//
// Generated By: dol2asm
// Translation Unit: d_a_mirror
//

#include "rel/d/a/d_a_mirror/d_a_mirror.h"
#include "dol2asm.h"
#include "d/com/d_com_inf_game.h"
#include "d/d_procname.h"
#include "d/a/d_a_player.h"
#include "JSystem/J3DGraphBase/J3DDrawBuffer.h"
#include "JSystem/JKernel/JKRHeap.h"
#include "JSystem/J3DGraphBase/J3DMaterial.h"

//
// Types:
//

//
// Forward References:
//

extern "C" static void daMirror_c_createHeap__FP10fopAc_ac_c();
extern "C" void __ct__16dMirror_packet_cFv();
extern "C" void __dt__4cXyzFv();
extern "C" void __ct__4cXyzFv();
extern "C" void reset__16dMirror_packet_cFv();
extern "C" void calcMinMax__16dMirror_packet_cFv();
extern "C" void entryModel__16dMirror_packet_cFP8J3DModel();
extern "C" void mirrorZdraw__16dMirror_packet_cFPfPfffffff();
extern "C" void modelDraw__16dMirror_packet_cFP8J3DModelPA4_f();
extern "C" void mainDraw__16dMirror_packet_cFv();
extern "C" void draw__16dMirror_packet_cFv();
extern "C" void __ct__10daMirror_cFv();
extern "C" void __dt__16dMirror_packet_cFv();
extern "C" void createHeap__10daMirror_cFv();
extern "C" void setModelMtx__10daMirror_cFv();
extern "C" static void daMirror_create__FP10daMirror_c();
extern "C" void create__10daMirror_cFv();
extern "C" static void daMirror_Delete__FP10daMirror_c();
extern "C" static void daMirror_execute__FP10daMirror_c();
extern "C" void execute__10daMirror_cFv();
extern "C" static void daMirror_draw__FP10daMirror_c();
extern "C" void entryModel__10daMirror_cFP8J3DModel();
extern "C" extern char const* const d_a_mirror__stringBase0;

//
// External References:
//

extern "C" void mDoMtx_XrotM__FPA4_fs();
extern "C" void mDoMtx_YrotM__FPA4_fs();
extern "C" void mDoMtx_ZrotM__FPA4_fs();
extern "C" void mDoMtx_lookAt__FPA4_fPC3VecPC3VecPC3Vecs();
extern "C" void scaleS__14mDoMtx_stack_cFRC4cXyz();
extern "C" void scaleM__14mDoMtx_stack_cFfff();
extern "C" void mDoExt_modelUpdateDL__FP8J3DModel();
extern "C" void mDoExt_J3DModel__create__FP12J3DModelDataUlUl();
extern "C" void mDoLib_setResTimgObj__FPC7ResTIMGP9_GXTexObjUlP10_GXTlutObj();
extern "C" void __ct__10fopAc_ac_cFv();
extern "C" void fopAcM_delete__FP10fopAc_ac_c();
extern "C" void fopAcM_entrySolidHeap__FP10fopAc_ac_cPFP10fopAc_ac_c_iUl();
extern "C" void fopAcM_seenActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c();
extern "C" void fopAcM_searchActorDistance2__FPC10fopAc_ac_cPC10fopAc_ac_c();
extern "C" void dComIfG_resLoad__FP30request_of_phase_process_classPCc();
extern "C" void dComIfG_resDelete__FP30request_of_phase_process_classPCc();
extern "C" void isSwitch__10dSv_info_cCFii();
extern "C" void getRes__14dRes_control_cFPCclP11dRes_info_ci();
extern "C" void setLookPos__9daPy_py_cFP4cXyz();
extern "C" void settingTevStruct__18dScnKy_env_light_cFiP4cXyzP12dKy_tevstr_c();
extern "C" void setLightTevColorType__18dScnKy_env_light_cFP12J3DModelDataP12dKy_tevstr_c();
extern "C" void __pl__4cXyzCFRC3Vec();
extern "C" void __mi__4cXyzCFRC3Vec();
extern "C" void __ml__4cXyzCFf();
extern "C" void outprod__4cXyzCFRC3Vec();
extern "C" void normalizeZP__4cXyzFv();
extern "C" void calcViewFrustum__11J3DUClipperFv();
extern "C" void clip__11J3DUClipperCFPA4_CfP3VecP3Vec();
extern "C" void GFSetGenMode2__FUcUcUcUc11_GXCullMode();
extern "C" void GFSetChanAmbColor__F12_GXChannelID8_GXColor();
extern "C" void __dl__FPv();
extern "C" void reinitGX__6J3DSysFv();
extern "C" void callDL__17J3DDisplayListObjCFv();
extern "C" bool entry__9J3DPacketFP13J3DDrawBuffer();
extern "C" void drawFast__14J3DShapePacketFv();
extern "C" void loadPreDrawSetting__8J3DShapeCFv();
extern "C" void entryImm__13J3DDrawBufferFP9J3DPacketUs();

extern "C" void __destroy_arr();
extern "C" void __construct_array();
extern "C" void __cvt_fp2unsigned();
extern "C" void _savegpr_18();
extern "C" void _savegpr_21();
extern "C" void _savegpr_28();
extern "C" void _restgpr_18();
extern "C" void _restgpr_21();
extern "C" void _restgpr_28();
extern "C" extern void* __vt__9J3DPacket[5];
extern "C" u8 now__14mDoMtx_stack_c[48];
extern "C" u8 mClipper__14mDoLib_clipper[92];
extern "C" u8 m_entryModel__10daMirror_c[12];
extern "C" f32 mSystemFar__14mDoLib_clipper;
extern "C" u8 m_myObj__10daMirror_c[4];
extern "C" u8 sOldVcdVatCmd__8J3DShape[4];

//
// Declarations:
//

/* 80870BB8-80870BD8 000078 0020+00 1/1 0/0 0/0 .text daMirror_c_createHeap__FP10fopAc_ac_c */
static bool daMirror_c_createHeap(fopAc_ac_c* param_0) {
    return ((daMirror_c*)param_0)->createHeap();
}

/* ############################################################################################## */
/* 80872660-80872664 -00001 0004+00 3/3 0/0 0/0 .data            l_arcName */
static char* l_arcName = "Mirror";

/* 80872664-80872668 -00001 0004+00 2/2 0/0 0/0 .data            l_arcName2 */
static char* l_arcName2 = "MR-Table";

/* 808726C4-808726D8 000064 0014+00 2/2 0/0 0/0 .data            __vt__16dMirror_packet_c */
SECTION_DATA extern void* __vt__16dMirror_packet_c[5] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)entry__9J3DPacketFP13J3DDrawBuffer,
    (void*)draw__16dMirror_packet_cFv,
    (void*)__dt__16dMirror_packet_cFv,
};

/* 80870BD8-80870C54 000098 007C+00 1/1 0/0 0/0 .text            __ct__16dMirror_packet_cFv */
dMirror_packet_c::dMirror_packet_c() {
    reset();
}


/* 80870C54-80870C90 000114 003C+00 2/2 0/0 0/0 .text            __dt__4cXyzFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
//asm cXyz::~cXyz() {
asm void __dt__4cXyzFv() {
    nofralloc
#include "asm/rel/d/a/d_a_mirror/d_a_mirror/__dt__4cXyzFv.s"
}
#pragma pop

/* 80870C90-80870C94 000150 0004+00 1/1 0/0 0/0 .text            __ct__4cXyzFv */
//cXyz::cXyz() {
void __ct__4cXyzFv() {
    /* empty function */
}

/* 80870C94-80870CA0 000154 000C+00 2/2 0/0 0/0 .text            reset__16dMirror_packet_cFv */
void dMirror_packet_c::reset() {
    mModelCount = 0;
}

/* 80870CA0-80870D58 000160 00B8+00 1/1 0/0 0/0 .text            calcMinMax__16dMirror_packet_cFv */
void dMirror_packet_c::calcMinMax() {
    mMinVal.set(FLT_MAX, FLT_MAX, FLT_MAX);
    mMaxVal.set(-FLT_MAX, -FLT_MAX, -FLT_MAX);
    cXyz* ptr = mQuad;
    for (int i = 0; i < 4; i++, ptr++) {
        f32 val = ptr->x;
        if (val < mMinVal.x) {
            mMinVal.x = val;
        }

        val = ptr->x;
        if (val > mMaxVal.x) {
            mMaxVal.x = val;
        }

        val = ptr->y;
        if (val < mMinVal.y) {
            mMinVal.y = val;
        }

        val = ptr->y;
        if (val > mMaxVal.y) {
            mMaxVal.y = val;
        }

        val = ptr->z;
        if (val < mMinVal.z) {
            mMinVal.z = val;
        }

        val = ptr->z;
        if (val > mMaxVal.z) {
            mMaxVal.z = val;
        }
    }
}

/* 80870D58-80870D88 000218 0030+00 1/1 0/0 0/0 .text entryModel__16dMirror_packet_cFP8J3DModel */
int dMirror_packet_c::entryModel(J3DModel* param_0) {
    if (mModelCount >= 0x40) {
        return 0;
    }

    mModels[mModelCount++] = param_0;
    return 1;
}

/* ############################################################################################## */
/* 8087258C-80872590 000000 0004+00 3/3 0/0 0/0 .rodata          @3884 */
SECTION_RODATA static u32 const lit_3884 = 0x000000FF;
COMPILER_STRIP_GATE(0x8087258C, &lit_3884);

/* 80872590-80872598 000004 0008+00 0/1 0/0 0/0 .rodata          l_texCoord$3899 */
#pragma push
#pragma force_active on
SECTION_RODATA static s8 const l_texCoord[4][2] = {
    {0x00, 0x00}, {0x01, 0x00}, {0x01, 0x01}, {0x00, 0x01},
};
COMPILER_STRIP_GATE(0x80872590, &l_texCoord);
#pragma pop

/* 80872598-8087259C 00000C 0004+00 2/4 0/0 0/0 .rodata          @3945 */
SECTION_RODATA static u8 const lit_3945[4] = {
    0x00,
    0x00,
    0x00,
    0x00,
};
COMPILER_STRIP_GATE(0x80872598, &lit_3945);

/* 8087259C-808725A0 000010 0004+00 0/1 0/0 0/0 .rodata          @3946 */
#pragma push
#pragma force_active on
SECTION_RODATA static f32 const lit_3946 = 100.0f;
COMPILER_STRIP_GATE(0x8087259C, &lit_3946);
#pragma pop

/* 808725A0-808725A4 000014 0004+00 0/3 0/0 0/0 .rodata          @3947 */
#pragma push
#pragma force_active on
SECTION_RODATA static f32 const lit_3947 = 1.0f;
COMPILER_STRIP_GATE(0x808725A0, &lit_3947);
#pragma pop

/* 808725A4-808725A8 000018 0004+00 0/1 0/0 0/0 .rodata          @3948 */
#pragma push
#pragma force_active on
SECTION_RODATA static f32 const lit_3948 = -100.0f;
COMPILER_STRIP_GATE(0x808725A4, &lit_3948);
#pragma pop

inline static void GXSetTexCoordGen(GXTexCoordID dst, GXTexGenType type, GXTexGenSrc src, u32 mtx) {
    GXSetTexCoordGen2(dst, type, src, mtx, 0, 125);
}

inline static void damirror_GXEnd() {
    i_GXEnd();
}

/* 80870D88-80871268 000248 04E0+00 1/1 0/0 0/0 .text mirrorZdraw__16dMirror_packet_cFPfPfffffff
 */
// Matches with literals (Maybe l_texCoord should be inside)
#ifdef NONMATCHING
void dMirror_packet_c::mirrorZdraw(f32* param_0, f32* param_1, f32 param_2, f32 param_3,
                                       f32 param_4, f32 param_5, f32 param_6, f32 param_7) {
    GXSetNumChans(1);
    GXSetChanCtrl(GX_COLOR0, 0, GX_SRC_REG, GX_SRC_REG, 0, GX_DF_NONE, GX_AF_NONE);
    GXSetNumTexGens(0);
    GXSetNumTevStages(1);
    GXSetTevOrder(GX_TEVSTAGE0, GX_TEXCOORD_NULL, GX_TEXMAP_NULL, GX_COLOR0A0);
    GXColor color = {0xff,0,0,0};
    GXSetTevColor(GX_TEVREG0, color);
    GXSetTevColorIn(GX_TEVSTAGE0, GX_CC_ZERO, GX_CC_ZERO, GX_CC_ZERO, GX_CC_C0);
    GXSetTevColorOp(GX_TEVSTAGE0, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, 1, GX_TEVPREV);
    GXSetTevAlphaIn(GX_TEVSTAGE0, GX_CA_ZERO, GX_CA_ZERO, GX_CA_ZERO, GX_CA_A0);
    GXSetTevAlphaOp(GX_TEVSTAGE0, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, 1, GX_TEVPREV);
    GXSetZCompLoc(1);
    GXSetBlendMode(GX_BM_BLEND, GX_BL_SRC_ALPHA, GX_BL_INV_SRC_ALPHA, GX_LO_OR);
    GXSetAlphaCompare(GX_GREATER, 0, GX_AOP_OR, GX_GREATER, 0);
    GXSetFog(GX_FOG_NONE, 0.0f, 0.0f, 0.0f, 0.0f, g_clearColor);
    GXSetFogRangeAdj(0, 0, NULL);
    GXSetCullMode(GX_CULL_BACK);
    GXSetNumIndStages(0);
    GXClearVtxDesc();
    GXSetVtxDesc(GX_VA_POS, GX_DIRECT);
    GXSetVtxAttrFmt(GX_VTXFMT0, GX_VA_POS, GX_POS_XYZ, GX_F32, 0);
    GXSetZMode(1, GX_GEQUAL, 1);
    GXLoadPosMtxImm(j3dSys.getViewMtx(), 0);
    GXSetCurrentMtx(0);
    GXBegin(GX_QUADS, GX_VTXFMT0, 4);
    for (int i = 0; i < 4; i++) {
        GXPosition3f32(mQuad[i].x, mQuad[i].y, mQuad[i].z);
    }
    damirror_GXEnd();
    
    if (mViewScale.y > 0.0f) {
        GXSetZMode(1, GX_ALWAYS, 1);
        GXSetColorUpdate(0);
        GXSetAlphaUpdate(0);
        Mtx44 mtx;
        C_MTXOrtho(mtx, param_1[1], param_1[1] + param_1[3], param_1[0],
                         param_1[0] + param_1[2], 0, 100.0f);
        GXSetProjection(mtx, GX_ORTHOGRAPHIC);
        GXLoadPosMtxImm(mDoMtx_getIdentity(), 0);

        param_3 -= 1.0f;
        param_4 -= 1.0f;
        param_5 += 1.0f;
        param_6 += 1.0f;
        GXBegin(GX_QUADS, GX_VTXFMT0, 4);
        GXPosition3f32(param_3, param_4, -100.0f);
        GXPosition3f32(param_5, param_4, -100.0f);
        GXPosition3f32(param_5, param_6, -100.0f);
        GXPosition3f32(param_3, param_6, -100.0f);
        damirror_GXEnd();
        GXSetProjectionv(param_0);
        GXSetZMode(1, GX_ALWAYS, 1);
        GXLoadPosMtxImm(j3dSys.getViewMtx(), 0);
        if (GXGetTexObjWidth(&mTexObj)) {
            GXLoadTexObj(&mTexObj, GX_TEXMAP0);
            GXSetTexCoordGen(GX_TEXCOORD0, GX_TG_MTX2x4, GX_TG_TEX0, 60);
            GXSetTevOrder(GX_TEVSTAGE0, GX_TEXCOORD0, GX_TEXMAP0, GX_COLOR_NULL);
            GXSetTevAlphaIn(GX_TEVSTAGE0, GX_CA_ZERO, GX_CA_ZERO, GX_CA_ZERO, GX_CA_TEXA);
            GXSetTevAlphaOp(GX_TEVSTAGE0, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, 1, GX_TEVPREV);
            GXSetNumChans(0);
            GXSetNumTexGens(1);
            GXSetZCompLoc(0);
            GXSetVtxDesc(GX_VA_TEX0, GX_DIRECT);
            GXSetVtxAttrFmt(GX_VTXFMT0, GX_VA_TEX0, GX_POS_XYZ, GX_S8, 0);
            GXBegin(GX_QUADS, GX_VTXFMT0, 4);
            cXyz* ptr = mQuad;
            s8* texPtr = (s8*)l_texCoord;
            for (int i = 0; i < 4; ptr++, texPtr += 2, i++) {
                GXPosition3f32(ptr->x, ptr->y, ptr->z);
                GXTexCoord2s8(texPtr[0], texPtr[1]);
            }
        } else {
            GXBegin(GX_QUADS, GX_VTXFMT0, 4);
            cXyz* ptr = mQuad;
            for (int i = 0; i < 4; ptr++, i++) {
                GXPosition3f32(ptr->x, ptr->y, ptr->z);
            }
        }
        damirror_GXEnd();
    } else {
        GXSetProjectionv(param_0);
    }

    GXSetColorUpdate(1);
    GXSetAlphaUpdate(0);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMirror_packet_c::mirrorZdraw(f32* param_0, f32* param_1, f32 param_2, f32 param_3,
                                       f32 param_4, f32 param_5, f32 param_6, f32 param_7) {
    nofralloc
#include "asm/rel/d/a/d_a_mirror/d_a_mirror/mirrorZdraw__16dMirror_packet_cFPfPfffffff.s"
}
#pragma pop
#endif

/* ############################################################################################## */
/* 808725A8-808725AC 00001C 0004+00 1/1 0/0 0/0 .rodata          @3956 */
SECTION_RODATA static u8 const lit_3956[4] = {
    0x00,
    0x00,
    0x00,
    0x00,
};
COMPILER_STRIP_GATE(0x808725A8, &lit_3956);

/* 80871268-8087146C 000728 0204+00 1/1 0/0 0/0 .text
 * modelDraw__16dMirror_packet_cFP8J3DModelPA4_f                */
// Matches with literals
#ifdef NONMATCHING
void dMirror_packet_c::modelDraw(J3DModel* param_0, f32 (*param_1)[4]) {
    Mtx& baseMtx = param_0->getBaseTRMtx();
    cXyz acStack_3c(baseMtx[0][3], baseMtx[1][3], baseMtx[2][3]);
    cXyz cStack_48;
    cMtx_multVec(param_1, &acStack_3c, &cStack_48);
    cXyz cStack_54;
    cMtx_multVec(j3dSys.getViewMtx(), &acStack_3c, &cStack_54);

    if (mViewScale.y > 0.0f && cStack_48.z > cStack_54.z) {
        return;
    }
    
    GXColor color = {0};
    color.r = i_dKy_getEnvlight()->mTerrainAmbienceBG0.r;
    color.g = i_dKy_getEnvlight()->mTerrainAmbienceBG0.g;
    color.b = i_dKy_getEnvlight()->mTerrainAmbienceBG0.b;
    color.a = i_dKy_getEnvlight()->mTerrainAmbienceBG0.a;
    J3DModelData* modelData = param_0->getModelData();
    u16 materialNum = modelData->getMaterialNum();
    for (u16 i = 0; i < materialNum; i++) {
        J3DMatPacket* matPacket = param_0->getMatPacket(i);
        J3DShapePacket* shapePacket = matPacket->getShapePacket();
        J3DShape* shape = shapePacket->getShape();
        if (!shape->checkFlag(1)) {
            J3DMaterial* material = modelData->getMaterialNodePointer(i);
            u32 texGenNum = material->getTexGenBlock()->getTexGenNum();
            u8 colorChanNum = material->getColorBlock()->getColorChanNum();
            u8 tevStageNum = material->getTevBlock()->getTevStageNum();
            u8 indTexStageNum = material->getIndBlock()->getIndTexStageNum();
            material->load();
            matPacket->callDL();
            shape->loadPreDrawSetting();
            if (shapePacket->getDisplayListObj() != NULL) {
                shapePacket->getDisplayListObj()->callDL();
            }
            GFSetGenMode2(texGenNum, (_GXChannelID)colorChanNum, (_GXTevStageID)tevStageNum, indTexStageNum, GX_CULL_FRONT);
            GXColor ambColor = *(GXColor*)&color;
            GFSetChanAmbColor(GX_COLOR0, ambColor);
            shapePacket->setBaseMtxPtr((Mtx*)param_1);
            shapePacket->drawFast();
            shapePacket->setBaseMtxPtr((Mtx*)j3dSys.getViewMtx());
        }
        shape->resetVcdVatCache();
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMirror_packet_c::modelDraw(J3DModel* param_0, f32 (*param_1)[4]) {
    nofralloc
#include "asm/rel/d/a/d_a_mirror/d_a_mirror/modelDraw__16dMirror_packet_cFP8J3DModelPA4_f.s"
}
#pragma pop
#endif

/* ############################################################################################## */
/* 808725AC-808725B0 000020 0004+00 0/1 0/0 0/0 .rodata          @4345 */
#pragma push
#pragma force_active on
SECTION_RODATA static u32 const lit_4345 = 0x3C8EFA35;
COMPILER_STRIP_GATE(0x808725AC, &lit_4345);
#pragma pop

/* 808725B0-808725B4 000024 0004+00 0/1 0/0 0/0 .rodata          @4346 */
#pragma push
#pragma force_active on
SECTION_RODATA static f32 const lit_4346 = 0.5f;
COMPILER_STRIP_GATE(0x808725B0, &lit_4346);
#pragma pop

/* 808725B4-808725B8 000028 0004+00 0/1 0/0 0/0 .rodata          @4347 */
#pragma push
#pragma force_active on
SECTION_RODATA static f32 const lit_4347 = 2.0f;
COMPILER_STRIP_GATE(0x808725B4, &lit_4347);
#pragma pop

/* 808725B8-808725BC 00002C 0004+00 0/1 0/0 0/0 .rodata          @4348 */
#pragma push
#pragma force_active on
SECTION_RODATA static f32 const lit_4348 = 304.0f;
COMPILER_STRIP_GATE(0x808725B8, &lit_4348);
#pragma pop

/* 808725BC-808725C0 000030 0004+00 0/1 0/0 0/0 .rodata          @4349 */
#pragma push
#pragma force_active on
SECTION_RODATA static f32 const lit_4349 = 608.0f;
COMPILER_STRIP_GATE(0x808725BC, &lit_4349);
#pragma pop

/* 808725C0-808725C4 000034 0004+00 0/1 0/0 0/0 .rodata          @4350 */
#pragma push
#pragma force_active on
SECTION_RODATA static f32 const lit_4350 = 224.0f;
COMPILER_STRIP_GATE(0x808725C0, &lit_4350);
#pragma pop

/* 808725C4-808725C8 000038 0004+00 0/1 0/0 0/0 .rodata          @4351 */
#pragma push
#pragma force_active on
SECTION_RODATA static f32 const lit_4351 = 448.0f;
COMPILER_STRIP_GATE(0x808725C4, &lit_4351);
#pragma pop

/* 808725C8-808725CC 00003C 0004+00 0/1 0/0 0/0 .rodata          @4352 */
#pragma push
#pragma force_active on
SECTION_RODATA static f32 const lit_4352 = 8.0f;
COMPILER_STRIP_GATE(0x808725C8, &lit_4352);
#pragma pop

/* 808725CC-808725D4 000040 0004+04 0/2 0/0 0/0 .rodata          @4353 */
#pragma push
#pragma force_active on
SECTION_RODATA static f32 const lit_4353[1 + 1 /* padding */] = {
    -1.0f,
    /* padding */
    0.0f,
};
COMPILER_STRIP_GATE(0x808725CC, &lit_4353);
#pragma pop

/* 808725D4-808725DC 000048 0008+00 0/1 0/0 0/0 .rodata          @4355 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_4355[8] = {
    0x43, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x808725D4, &lit_4355);
#pragma pop

/* 8087146C-80871D84 00092C 0918+00 1/1 0/0 0/1 .text            mainDraw__16dMirror_packet_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMirror_packet_c::mainDraw() {
    nofralloc
#include "asm/rel/d/a/d_a_mirror/d_a_mirror/mainDraw__16dMirror_packet_cFv.s"
}
#pragma pop

/* 80871D84-80871E24 001244 00A0+00 1/0 0/0 0/0 .text            draw__16dMirror_packet_cFv */
void dMirror_packet_c::draw() {
    mDoLib_clipper::changeFar(dComIfGd_getView()->mFar);
    s32 clipRes = mDoLib_clipper::clip(j3dSys.getViewMtx(), &mMaxVal, &mMinVal);
    if (clipRes == 0) {
        mainDraw();
    }
    mDoLib_clipper::resetFar();
    reset();
}

/* 80871E24-80871E84 0012E4 0060+00 1/1 0/0 0/0 .text            __ct__10daMirror_cFv */
daMirror_c::daMirror_c() {
    m_entryModel = &daMirror_c::entryModel;
}

/* 80871E84-80871F08 001344 0084+00 1/0 0/0 0/0 .text            __dt__16dMirror_packet_cFv */
dMirror_packet_c::~dMirror_packet_c() {
}

/* 80871F08-80871F78 0013C8 0070+00 1/1 0/0 0/0 .text            createHeap__10daMirror_cFv */
bool daMirror_c::createHeap() {
    J3DModelData* modelData = (J3DModelData*)dComIfG_getObjectRes(l_arcName, 4);
    field_0x6f8 = mDoExt_J3DModel__create(modelData, 0x80000, 0x11000084);
    return (field_0x6f8 != NULL);
}

/* 80871F78-80872018 001438 00A0+00 1/1 0/0 0/0 .text            setModelMtx__10daMirror_cFv */
void daMirror_c::setModelMtx() {
    field_0x6f8->setBaseScale(mScale);
    mDoMtx_stack_c::transS(current.pos.x, current.pos.y, current.pos.z);
    mDoMtx_stack_c::YrotM(shape_angle.y);
    mDoMtx_stack_c::XrotM(shape_angle.x);
    mDoMtx_stack_c::ZrotM(0x2000);
    field_0x6f8->i_setBaseTRMtx(mDoMtx_stack_c::get());
}

/* 80872018-8087206C 0014D8 0054+00 1/0 0/0 0/0 .text            daMirror_create__FP10daMirror_c */
static int daMirror_create(daMirror_c* i_this) {
    fopAcM_SetupActor(i_this, daMirror_c);
    return i_this->daMirror_c::create();
}

/* ############################################################################################## */
/* 808725DC-8087260C 000050 0030+00 0/0 0/0 0/0 .rodata          @4406 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_4406[48] = {
    0xC2, 0x91, 0x00, 0x00, 0x43, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x91, 0x00, 0x00,
    0x43, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xC2, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x808725DC, &lit_4406);
#pragma pop

/* 8087260C-8087263C 000080 0030+00 1/1 0/0 0/0 .rodata
 * l_mirrorQuad$localstatic3$create__10daMirror_cFv             */
SECTION_RODATA static Vec const data_8087260C[4] = {
    {-50.0f, 100.0f, 0.0f}, {50.0f, 100.0f, 0.0f}, 
    {50.0f, 0.0f, 0.0f}, {-50.0f, 0.0f, 0.0f},
};
COMPILER_STRIP_GATE(0x8087260C, &data_8087260C);

/* 8087263C-80872648 0000B0 000C+00 1/1 0/0 0/0 .rodata
 * l_mirrorLook$localstatic4$create__10daMirror_cFv             */
SECTION_RODATA static Vec const data_8087263C = {
    0.0f, 50.0f, 0.0f,
};
COMPILER_STRIP_GATE(0x8087263C, &data_8087263C);

/* 80872648-8087264C 0000BC 0004+00 0/1 0/0 0/0 .rodata          @4544 */
#pragma push
#pragma force_active on
SECTION_RODATA static f32 const lit_4544 = 10.0f;
COMPILER_STRIP_GATE(0x80872648, &lit_4544);
#pragma pop

/* 8087206C-80872344 00152C 02D8+00 2/2 0/0 0/0 .text            create__10daMirror_cFv */
// regalloc, static var load
#ifdef NONMATCHING
int daMirror_c::create() {
    if (getSw() != 0xff && !i_fopAcM_isSwitch(this, getSw())) {
        return 4;
    }

    if (m_myObj != NULL) {
        return 0;
    }

    s32 type = getType();
    if (type == 2) {
        request_of_phase_process_class* phase = (request_of_phase_process_class*)this;
        if (this) {
            phase = &mPhase;
        }
        int res = dComIfG_resLoad(phase, l_arcName);
        switch (res) {
        default:
            return res;
        case cPhs_COMPLEATE_e:
            if (!fopAcM_entrySolidHeap(this, (heapCallbackFunc)daMirror_c_createHeap, 0x1540)) {
                return 5;
            }
            break;
        }

        setModelMtx();
        void* uVar2 = dComIfG_getObjectRes(l_arcName, 7);
        GXTexObj& texObj = mPacket.getTexObj();
        mDoLib_setResTimgObj((ResTIMG*)uVar2, &texObj, 0, NULL);
        Vec src[4] = {
            {-72.5f, 145.0f, 0.0f}, {72.5f, 145.0f, 0.0f},
            {72.5f, 0.0f, 0.0f}, {-72.5f, 0.0f, 0.0f},
        };
        mDoMtx_stack_c::scaleS(mScale);
        mDoMtx_stack_c::revConcat(field_0x6f8->getBaseTRMtx());
        cMtx_multVecArray(mDoMtx_stack_c::get(), src, mPacket.getQuad(), 4);
        mPacket.getViewScale().set(-1.0f, 1.0f, 1.0f);
    } else {
        if (type == 1) {
            mScale *= 10.0f;
            mPacket.getViewScale().set(1.0,-1.0,1.0);
        } else {
            if (type == 3) {
                request_of_phase_process_class* phase = (request_of_phase_process_class*)this;
                if (this) {
                    phase = &mPhase;
                }
                int res = dComIfG_resLoad(phase, l_arcName2);
                switch (res) {
                default:
                    return res;
                case cPhs_COMPLEATE_e:
                    void* objRes = dComIfG_getObjectRes(l_arcName2, 0x25);
                    mDoLib_setResTimgObj((ResTIMG*)objRes, &mPacket.getTexObj(), 0, NULL);
                    break;
                }
            }
            mPacket.getViewScale().set(-1.0f, 1.0f, 1.0f);
        }
        mDoMtx_stack_c::transS(current.pos.x, current.pos.y, current.pos.z);
        mDoMtx_stack_c::YrotM(shape_angle.y);
        mDoMtx_stack_c::XrotM(shape_angle.x);
        mDoMtx_stack_c::scaleM(mScale.x, mScale.y, mScale.z);
        static Vec const data_8087260Cb[4] = {
            {-50.0f, 100.0f, 0.0f}, {50.0f, 100.0f, 0.0f}, 
            {50.0f, 0.0f, 0.0f}, {-50.0f, 0.0f, 0.0f},
        };
        mDoMtx_stack_c::multVecArray(data_8087260Cb,
                                     mPacket.getQuad(), 4);
    }
    m_myObj = this;
    mPacket.calcMinMax();
    static Vec const data_8087263C_a = {
        0.0f, 50.0f, 0.0f,
    };
    mDoMtx_stack_c::multVec(&data_8087263C_a, &mEyePos);
    return 4;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm int daMirror_c::create() {
    nofralloc
#include "asm/rel/d/a/d_a_mirror/d_a_mirror/create__10daMirror_cFv.s"
}
#pragma pop
#endif

/* 80872344-808723C4 001804 0080+00 1/0 0/0 0/0 .text            daMirror_Delete__FP10daMirror_c */
static int daMirror_Delete(daMirror_c* param_0) {
    s32 mirrorType = param_0->getType();
    if (mirrorType == 2) {
        dComIfG_resDelete(param_0 ? &param_0->mPhase : (request_of_phase_process_class*)param_0, l_arcName);
    } else if (mirrorType == 3) {
        dComIfG_resDelete(param_0 ? &param_0->mPhase: (request_of_phase_process_class*)param_0, l_arcName2);
    }
    daMirror_c::m_myObj = NULL;
    return 1;
}

/* 808723C4-808723E4 001884 0020+00 1/0 0/0 0/0 .text            daMirror_execute__FP10daMirror_c */
static int daMirror_execute(daMirror_c* param_0) {
    return param_0->execute();
}

/* ############################################################################################## */
/* 8087264C-80872650 0000C0 0004+00 1/1 0/0 0/0 .rodata          @4574 */
SECTION_RODATA static f32 const lit_4574 = 40000.0f;
COMPILER_STRIP_GATE(0x8087264C, &lit_4574);

/* 808723E4-808724C0 0018A4 00DC+00 1/1 0/0 0/0 .text            execute__10daMirror_cFv */
// Matches with literals
#ifdef NONMATCHING
int daMirror_c::execute() {
    if (this != m_myObj) {
        if (m_myObj == NULL) {
            if (create() == 5) {
                fopAcM_delete(this);
            }
        }
        return 1;
    }

    daPy_py_c* player = daPy_getLinkPlayerActorClass();
    if (mPacket.getViewScale().y > 0.0f &&
        player->getKandelaarFlamePos() &&
        fopAcM_searchActorDistance2(this, player) < 40000.0f)
    {
        if (fopAcM_seenActorAngleY(this, player) < 0x4000) {
            daPy_py_c::setLookPos(&mEyePos);
        }
    }
    return 1;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm int daMirror_c::execute() {
    nofralloc
#include "asm/rel/d/a/d_a_mirror/d_a_mirror/execute__10daMirror_cFv.s"
}
#pragma pop
#endif

/* 808724C0-80872560 001980 00A0+00 1/0 0/0 0/0 .text            daMirror_draw__FP10daMirror_c */
static int daMirror_draw(daMirror_c* param_0) {
    if (param_0 != daMirror_c::m_myObj) {
        return 1;
    }

    if (param_0->field_0x6f8) {
        g_env_light.settingTevStruct(0x10, &param_0->current.pos, &param_0->mTevStr);
        g_env_light.setLightTevColorType(param_0->field_0x6f8->mModelData, &param_0->mTevStr);
        mDoExt_modelUpdateDL(param_0->field_0x6f8);
    }

    dComIfGd_getOpaListBG()->entryImm(&param_0->mPacket, 0);
    return 1;
}

/* 80872560-80872584 001A20 0024+00 1/0 0/0 0/0 .text            entryModel__10daMirror_cFP8J3DModel
 */
int daMirror_c::entryModel(J3DModel* param_0) {
    return mPacket.entryModel(param_0);
}

/* 80872650-80872650 0000C4 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
/* 80872674-80872694 -00001 0020+00 1/0 0/0 0/0 .data            daMirror_METHODS */
static actor_method_class daMirror_METHODS = {
    (process_method_func)daMirror_create,
    (process_method_func)daMirror_Delete,
    (process_method_func)daMirror_execute,
    (process_method_func)NULL,
    (process_method_func)daMirror_draw,
};

/* 80872694-808726C4 -00001 0030+00 0/0 0/0 1/0 .data            g_profile_MIRROR */
extern actor_process_profile_definition g_profile_MIRROR = {
    -3,
    7,
    -3,
    PROC_MIRROR,
    &g_fpcLf_Method.mBase,
    sizeof(daMirror_c), 
    0,
    0,
    &g_fopAc_Method.base,
    0x02F5, 
    &daMirror_METHODS,
    0x00060000,
    5,
    0,
};
