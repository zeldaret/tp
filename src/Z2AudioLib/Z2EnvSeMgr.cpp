//
// Generated By: dol2asm
// Translation Unit: Z2EnvSeMgr
//

#include "Z2AudioLib/Z2EnvSeMgr.h"
#include "Z2AudioLib/Z2Calc.h"
#include "JSystem/JAudio2/JASCalc.h"
#include "Z2AudioLib/Z2Creature.h"
#include "d/d_save.h"
#include "d/d_com_inf_game.h"

/* 802C589C-802C58AC 2C01DC 0010+00 3/3 0/0 0/0 .text            __ct__11Z2EnvSeBaseFP3Vec */
Z2EnvSeBase::Z2EnvSeBase(Vec* param_0) {
    mPos = param_0;
}

/* 802C58AC-802C5908 2C01EC 005C+00 3/3 0/0 0/0 .text            __dt__11Z2EnvSeBaseFv */
Z2EnvSeBase::~Z2EnvSeBase() {}

/* 802C5908-802C5AB4 2C0248 01AC+00 2/2 0/0 0/0 .text
 * startEnvSe__11Z2EnvSeBaseF10JAISoundIDfffffUl                */
bool Z2EnvSeBase::startEnvSe(JAISoundID param_1, f32 param_2, f32 param_3, f32 param_4, f32 param_5,
                             f32 param_6, u32 param_7) {
    if (Z2GetStatusMgr()->isPaused()) {
        param_3 *= 0.33f;
    }
    f32 dVar16 = 1.0f;
    bool uStack_44 = Z2GetStatusMgr()->getCameraInWaterDepth() > 0.0f;
    f32 fVar1 = uStack_44;
    if (fVar1) {
        dVar16 = Z2Calc::getParamByExp(
            fVar1, 1500.0f, 0.0f,
            0.1f, 0.0f,
            dVar16, Z2Calc::CURVE_SIGN_0);
        param_3 *= dVar16;
    }
    bool rv = Z2GetSoundStarter()->startSound(param_1, &mHandle, (JGeometry::TVec3<f32>*)mPos, 0, param_2, param_6, param_3, param_4, param_5,  param_7);
    if (mHandle) {
        if (dVar16 < 1.0f) {
            Z2GetSoundMgr()->setIIR(mHandle.getSound(), JASCalc::CUTOFF_TO_IIR_TABLE[64]);
        } else {
            Z2GetSoundMgr()->setIIR(mHandle.getSound(), JASCalc::CUTOFF_TO_IIR_TABLE[127]);
        }
    }
    return rv;
}

/* 802C5AB4-802C5C9C 2C03F4 01E8+00 9/9 0/0 0/0 .text
 * startEnvSeLevel__11Z2EnvSeBaseF10JAISoundIDfffffUl           */
bool Z2EnvSeBase::startEnvSeLevel(JAISoundID param_1, f32 param_2, f32 param_3, f32 param_4,
                                      f32 param_5, f32 param_6, u32 param_7) {
    if (Z2GetStatusMgr()->isPaused()) {
        param_3 *= 0.33f;
    }
    f32 dVar16 = 1.0f;
    bool uStack_44 = Z2GetStatusMgr()->getCameraInWaterDepth() > 0.0f;
    f32 fVar1 = uStack_44;
    if (fVar1) {
        dVar16 = Z2Calc::getParamByExp(
            fVar1, 1500.0f, 0.0f,
            0.1f, 0.0f,
            dVar16, Z2Calc::CURVE_SIGN_0);
        param_3 *= dVar16;
    }
    bool rv = Z2GetSoundStarter()->startLevelSound(param_1, &mHandle, (JGeometry::TVec3<f32>*)mPos);
    if (mHandle) {
        if (dVar16 < 1.0f) {
            Z2GetSoundMgr()->setIIR(mHandle.getSound(), JASCalc::CUTOFF_TO_IIR_TABLE[64]);
        } else {
            Z2GetSoundMgr()->setIIR(mHandle.getSound(), JASCalc::CUTOFF_TO_IIR_TABLE[127]);
        }

        mHandle->getAuxiliary().moveVolume(param_3, param_7);
        mHandle->getAuxiliary().movePan(param_4, param_7);
        mHandle->getAuxiliary().moveDolby(param_5, param_7);
        mHandle->getAuxiliary().moveFxMix(param_2, param_7);
        mHandle->getAuxiliary().movePitch(param_6, param_7);
    }
    return rv;
}

/* 8039C250-8039C260 0288B0 000C+04 2/2 0/0 0/0 .rodata          cNullVec__6Z2Calc */
static Vec const cNullVec__6Z2Calc = {0.0f, 0.0f, 0.0f};

/* 802C5C9C-802C5D1C 2C05DC 0080+00 1/1 0/0 0/0 .text            __ct__10Z2EnvSeDirFP3Vec */
Z2EnvSeDir::Z2EnvSeDir(Vec* param_0) {
    field_0x8 = 0.5f;
    field_0xc = 0.5f;
    if (param_0) {
        setPanDir(param_0);
    } else {
        mPanDir = cNullVec__6Z2Calc;
    }
}

/* 802C5D1C-802C5D70 2C065C 0054+00 1/1 0/0 0/0 .text            __dt__10Z2EnvSeDirFv */
Z2EnvSeDir::~Z2EnvSeDir() {}

/* 802C5D70-802C5D9C 2C06B0 002C+00 2/2 0/0 0/0 .text            setPanDir__10Z2EnvSeDirFP3Vec */
void Z2EnvSeDir::setPanDir(Vec* dir) {
    mPanDir.x = dir->x * -1000.0f;
    mPanDir.y = dir->y * -1000.0f;
    mPanDir.z = dir->z * -1000.0f;
}

/* 802C5D9C-802C5E90 2C06DC 00F4+00 1/1 0/0 0/0 .text            calcPan__10Z2EnvSeDirFf */
void Z2EnvSeDir::calcPan(f32 param_0) {
    if (*getHandle()) {
        if (0.0f == mPanDir.x && 0.0f == mPanDir.y && 0.0f == mPanDir.z) {
            (*getHandle())->getAuxiliary().movePan(0.5f, 0);
            (*getHandle())->getAuxiliary().moveDolby(0.5f, 0);
        } else {
            Z2GetAudience()->convertAbsToRel(mPanDir, &mPanDir, 0);
            JMAFastVECNormalize(&mPanDir, &mPanDir);
            field_0x8 = Z2GetAudience()->calcRelPosPan(mPanDir, 0);
            field_0xc = Z2GetAudience()->calcRelPosDolby(mPanDir, 0);
            (*getHandle())->getAuxiliary().movePan(field_0x8, 0);
            (*getHandle())->getAuxiliary().moveDolby(field_0xc, 0);
        }
    }
}

/* 802C5E90-802C5ECC 2C07D0 003C+00 1/1 0/0 0/0 .text
 * startEnvSeDirLevel__10Z2EnvSeDirF10JAISoundIDff              */
bool Z2EnvSeDir::startEnvSeDirLevel(JAISoundID param_1, f32 param_2, f32 param_3) {
    return Z2EnvSeBase::startEnvSeLevel(param_1, param_2, param_3, field_0x8, field_0xc, 1.0f, 0);
}

/* 802C5ECC-802C5F28 2C080C 005C+00 1/1 0/0 0/0 .text            __ct__14Z2EnvSeAutoPanFv */
Z2EnvSeAutoPan::Z2EnvSeAutoPan() {
    field_0x8 = 0.5f;
    field_0xc = 0.5f;
    field_0x10 = 0.0018554000416770577f;
    field_0x14 = 0.0008553999941796064f;
    field_0x18 = 1;
    field_0x19 = 1;
}

/* 802C5F28-802C5F7C 2C0868 0054+00 1/1 0/0 0/0 .text            __dt__14Z2EnvSeAutoPanFv */
Z2EnvSeAutoPan::~Z2EnvSeAutoPan() {}

/* 802C5F7C-802C5F98 2C08BC 001C+00 2/2 0/0 0/0 .text setPanParam__14Z2EnvSeAutoPanFffbbff */
void Z2EnvSeAutoPan::setPanParam(f32 param_1, f32 param_2, bool param_3, bool param_4, f32 param_5,
                                 f32 param_6) {
    field_0x8 = param_1;
    field_0xc = param_2;
    field_0x10 = param_5;
    field_0x14 = param_6;
    field_0x18 = param_3;
    field_0x19 = param_4;
}

/* 802C5F98-802C60E0 2C08D8 0148+00 2/2 0/0 0/0 .text            calcPan__14Z2EnvSeAutoPanFv */
void Z2EnvSeAutoPan::calcPan() {
    if (field_0x18) {
        field_0x8 += field_0x10;
        if (field_0x8 > 1.0f) {
            field_0x8 = 2.0f - field_0x8;
            field_0x18 = false;
        }
    } else {
        field_0x8 = field_0x8 - field_0x10;
        if (field_0x8 < 0.0f) {
            field_0x8 *= -1.0f;
            field_0x18 = true;
        }
    }
    if (field_0x19) {
        field_0xc = field_0xc + field_0x14;
        if (field_0xc > 1.0f) {
            field_0xc = 2.0f - field_0xc;
            field_0x19 = false;
        }
    } else {
        field_0xc = field_0xc - field_0x14;
        if (field_0xc < 0.0f) {
            field_0xc *= -1.0f;
            field_0x19 = true;
        }
    }
    if (*getHandle()) {
        (*getHandle())->getAuxiliary().movePan(field_0x8, 0);
        (*getHandle())->getAuxiliary().moveDolby(field_0xc, 0);
    }
}

/* 802C60E0-802C611C 2C0A20 003C+00 2/2 0/0 0/0 .text
 * startEnvSeAutoPanLevel__14Z2EnvSeAutoPanF10JAISoundIDfff     */
bool Z2EnvSeAutoPan::startEnvSeAutoPanLevel(JAISoundID param_1, f32 param_2, f32 param_3,
                                            f32 param_4) {
    return Z2EnvSeBase::startEnvSeLevel(param_1, param_2, param_3, field_0x8, field_0xc, param_4,
                                        0);
}

/* 802C611C-802C6540 2C0A5C 0424+00 0/0 1/1 0/0 .text            __ct__10Z2EnvSeMgrFv */
Z2EnvSeMgr::Z2EnvSeMgr()
    : JASGlobalInstance<Z2EnvSeMgr>(this), field_0x38(), field_0x48(1.0f), field_0x4c(1.0f),
      field_0x50(1.0f), field_0x140(), mSnowPower(), mWindType(), field_0x188(), field_0x1ac(1.0f),
      field_0x1b0(1.0f), field_0x1b4(1.0f), field_0x1b8(), field_0x1e0(), field_0x1e4(1.0f),
      field_0x1e8(1.0f), field_0x1ec(1.0f), field_0x214(), field_0x218(1.0f), field_0x21c(1.0f),
      field_0x220(1.0f), field_0x248(), field_0x24c(1.0f), field_0x250(1.0f), field_0x254(1.0f),
      field_0x27c(), field_0x280(1.0f), field_0x284(1.0f), field_0x288(1.0f), field_0x2b0(),
      field_0x2b4(1.0f), field_0x2b8(1.0f), field_0x2bc(1.0f), field_0x2e4(), mFogDensity() {
    field_0x3c.x = 0.0f;
    field_0x3c.y = 0.0f;
    field_0x3c.z = 0.0f;
    field_0x54 = 0.0f;
    field_0x58 = 0.0f;
    field_0x5c = 0.0f;
    field_0x39 = 0;
    field_0x2e8.setParam(0.1f, 0.007823764f, 0.06f);
    field_0x2f8.setParam(0.2f, 0.007823764f, 0.06f);
    field_0x90.setParam(0.1f, 0.026302524f, 0.005f);
    field_0xa0.setParam(0.9f, 0.023310114f, 0.003f);
    field_0xb0.setParam(0.2f, 0.0063851574f, 0.004f);
    field_0xc0.setParam(0.8f, 0.006188805f, 0.0045f);
    field_0xd0.setParam(0.3f, 0.053432982f, 0.002f);
    field_0xe0.setParam(0.7f, 0.042566273f, 0.0025f);
    field_0xf0.setParam(0.4f, 0.012933955f, 0.006f);
    field_0x100.setParam(0.6f, 0.012157413f, 0.0065f);
    field_0x18c.setParam(0.1f, 0.023310114f, 0.005f);
    field_0x19c.setParam(0.5f, 0.053432982f, 0.0025f);
    field_0x64.setVolumeScale(1.0f);
    mWolfSmellSeMgr.setVolumeScale(1.0f);
    field_0x120.setParam(0.5f, 0.020923574f, 0.001f);
    field_0x130.setParam(0.1f, 0.0037908785f, 0.005f);
}

/* 802C6540-802C66B0 2C0E80 0170+00 0/0 1/1 0/0 .text            __dt__10Z2EnvSeMgrFv */
Z2EnvSeMgr::~Z2EnvSeMgr() {}

/* 802C66B0-802C6998 2C0FF0 02E8+00 0/0 1/1 0/0 .text            framework__10Z2EnvSeMgrFv */
void Z2EnvSeMgr::framework() {
    int sceneNum = Z2GetSceneMgr()->getCurrentSceneNum();
    if (field_0x64.getPosCount() >= 0) {
        if (field_0x214 == 0x12 ||
            (dComIfGs_isEventBit(dSv_event_flag_c::saveBitLabels[104]) && !dComIfGs_isEventBit(dSv_event_flag_c::saveBitLabels[250])))
        {
            int lVar12 = 0;
            if (sceneNum == 0x17 || sceneNum == 0x18 || (sceneNum == 0x19)) {
                lVar12 = 1;
            }
            startRainSe(lVar12, 100);
        }
        field_0x64.resetMultiSePos();
    }
    if (sceneNum == 0x2e) {
        startLv3WaterSe(-1);
        field_0x140 = 0;
    }
    if (Z2GetSceneMgr()->isSceneExist()) {
        playSceneEnvSe();
        if (field_0x140 > 0 && mSnowPower == 0) {
            JAISoundHandle* pJVar8 = field_0x80.getHandle();
            if (*pJVar8) {
                (*pJVar8)->updateLifeTime(field_0x140);
            }
            pJVar8 = field_0x88.getHandle();
            if (*pJVar8) {
                (*pJVar8)->updateLifeTime(field_0x140);
            }
            field_0x140 = 0;
        }
    }
    if (mFogDensity > 0.0f)
    {
        mFogDensity -= 0.01f;
        if (mFogDensity < 0.0f) {
            mFogDensity = 0.0f;
        }
    }
    if (field_0x1b8 > 0 && field_0x1b8 < 100) {
        field_0x1b8++;
    } else if (field_0x1b8 < 0 && field_0x1b8 > -100) {
        field_0x1b8--;
    }
    if (mSnowPower > 0) {
        mSnowPower--;
    }
    if (Z2GetLink() != NULL) {
        if (Z2GetLink()->isWolfSmellOpen() != 0) {
            if (field_0x2e4 < 0x1e) {
                field_0x2e4++;
            }
            if (mWolfSmellSeMgr.getPosCount() >= 0) {
                f32 maxVolume = mWolfSmellSeMgr.getMaxVolume();
                field_0x2dc.startEnvSeLevel(Z2SE_ENV_SCENT_GRAVE, 0.0f,
                    (field_0x2e4 / 30.0f) * maxVolume, mWolfSmellSeMgr.getPanPower(), mWolfSmellSeMgr.getDolbyPower(), 1.0f, 0);
                mWolfSmellSeMgr.resetMultiSePos();
            }
            return;
        }
    }
    if (field_0x2e4 != 0) {
        field_0x2e4--;
    }
}

/* 802C6998-802C699C 2C12D8 0004+00 0/0 1/1 0/0 .text            resetScene__10Z2EnvSeMgrFv */
void Z2EnvSeMgr::resetScene() {
    /* empty function */
}

/* 802C699C-802C6AC0 2C12DC 0124+00 0/0 1/1 0/0 .text            resetSceneInner__10Z2EnvSeMgrFv */
void Z2EnvSeMgr::resetSceneInner() {
    if (-1.0f == field_0x60) {
        field_0x38 = 0;
        field_0x48 = 1.0f;
        field_0x4c = 1.0f;
        field_0x50 = 1.0f;
        field_0x54 = 0.0f;
        field_0x58 = 0.0f;
        field_0x5c = 0.0f;
        field_0x39 = 0;
        field_0x3c.x = 0.0f;
        field_0x3c.y = 0.0f;
        field_0x3c.z = 0.0f;
    }
    field_0x140 = 0;
    mWindType = WIND_TYPE_0;
    field_0x188 = 0;
    field_0x1e0 = 0;
    field_0x214 = 0;
    field_0x248 = 0;
    field_0x27c = 0;
    field_0x2b0 = 0;
    field_0x1b8 = 0;
    field_0x1ac = 1.0f;
    field_0x1b0 = 1.0f;
    field_0x1b4 = 1.0f;
    field_0x1e4 = 1.0f;
    field_0x1e8 = 1.0f;
    field_0x1ec = 1.0f;
    field_0x218 = 1.0f;
    field_0x21c = 1.0f;
    field_0x220 = 1.0f;
    field_0x24c = 1.0f;
    field_0x250 = 1.0f;
    field_0x254 = 1.0f;
    field_0x280 = 1.0f;
    field_0x284 = 1.0f;
    field_0x288 = 1.0f;
    field_0x2b4 = 1.0f;
    field_0x2b8 = 1.0f;
    field_0x2bc = 1.0f;
    mRiverSeMgr.resetMultiSePos();
    mFallSeMgr.resetMultiSePos();
    mEtcSeMgr.resetMultiSePos();
    field_0x224.resetMultiSePos();
    field_0x258.resetMultiSePos();
    field_0x28c.resetMultiSePos();
    mWolfSmellSeMgr.resetMultiSePos();
    field_0x64.resetMultiSePos();
}

/* 802C6AC0-802C6C1C 2C1400 015C+00 0/0 1/1 0/0 .text            initSceneEnvSe__10Z2EnvSeMgrFlScf
 */
void Z2EnvSeMgr::initSceneEnvSe(s32 param_1, s8 param_2, f32 param_3) {
    field_0x60 = -1.0f;
    if (-1.0f == param_3) {
        return;
    }
    u8 r6 = 100.0f * param_3;
    u8 uVar3 = 0;
    switch(param_1) {
    case 0x1e:
        switch(param_2) {
        case 0xd:
            uVar3 = 10;
            break;
        case 7:
        case 9:
        case 0xb:
        case 0xc:
            uVar3 = 2;
            break;
        case 8:
        case 0xa:
        default:
            uVar3 = 6;
            break;
        }
        break;
    case 0x1f:
        switch(param_2) {
        case 8:
        case 0x10:
            uVar3 = 6;
            break;
        case 0x11:
            uVar3 = 10;
            break;
        }
        break;
    case 0x20:
        uVar3 = 10;
        break;
    case 0x22:
        uVar3 = 6;
        break;
    case 0x45:
        uVar3 = 7;
        break;
    }
    
    initStaticEnvSe(uVar3, r6, 0xff, 0xff, NULL);
    field_0x60 = param_3;
}

/* 802C6C1C-802C6C84 2C155C 0068+00 1/1 0/0 0/0 .text            playSceneEnvSe__10Z2EnvSeMgrFv */
void Z2EnvSeMgr::playSceneEnvSe() {
    if (-1.0f != field_0x60) {
        if (field_0x1b8 != 100) {
            startStaticEnvSe(Z2GetSceneMgr()->getRoomReverb());
        }
        field_0x1b8 = 0;
    }
}

/* 802C6C84-802C70C8 2C15C4 0444+00 2/1 1/1 0/0 .text initStaticEnvSe__10Z2EnvSeMgrFUcUcUcUcP3Vec
 */
void Z2EnvSeMgr::initStaticEnvSe(u8 param_1, u8 param_2, u8 param_3, u8 param_4, Vec* param_5) {
    f32 dVar7;
    f32 dVar6;
    f32 fVar1;
    if (-1.0f == field_0x60) {
        if (param_2 >= 100) {
            dVar7 = 1.0f;
        } else {
            dVar7 = 0.01f * param_2;
        }
        if (param_3 == 0xff) {
            dVar6 = 1.0f;
        } else {
            dVar6 = 0.01f * param_3;
        }
        if (param_4 == 0xff) {
            fVar1 = 0.0f;
        } else {
            field_0x3c = *param_5;
            fVar1 = 0.1f * param_4;
        }
        if (field_0x38 != 0 && field_0x38 == param_1) {
            field_0x39 = 100;
            if (dVar7 != field_0x48) {
                field_0x54 =
                    (dVar7 - field_0x48) / 100.0f;
            } else {
                field_0x48 = dVar7;
                field_0x54 = 0.0f;
            }
            if (dVar6 != field_0x4c) {
                field_0x58 =
                    (dVar6 - field_0x4c) / 100.0f;
            } else {
                field_0x4c = dVar6;
                field_0x58 = 0.0f;
            }
            if (fVar1 != field_0x50) {
                field_0x5c =
                    (fVar1 - field_0x50) / 100.0f;
            } else {
                field_0x50 = fVar1;
                field_0x5c = 0.0f;
            }
        } else {
            field_0x48 = dVar7;
            field_0x4c = dVar6;
            field_0x50 = fVar1;
            field_0x54 = 0.0f;
            field_0x58 = 0.0f;
            field_0x5c = 0.0f;
        }
        switch (param_1) {
        case 1:
            field_0x0.setPanParam(
                1.0f, 0.0f,
                true, false, 0.0018554000416770577f, 0.0008553999941796064f);
            field_0x1c.setPanParam(
                0.0f,
                1.0f, false, true, 0.0018554000416770577f,
                0.0008553999941796064f);
            break;
        case 2:
            field_0x0.setPanParam(
                1.0f, 0.0f,
                true, false, 0.0018554000416770577f, 0.0008553999941796064f);
            field_0x1c.setPanParam(
                0.0f,
                1.0f, false, true, 0.0018554000416770577f,
                0.0008553999941796064f);
            break;
        case 3:
            field_0x0.setPanParam(
                1.0f, 0.0f,
                true, false, 0.0018554000416770577f, 0.0008553999941796064f);
            field_0x1c.setPanParam(
                0.0f,
                1.0f, false, true, 0.0018554000416770577f,
                0.0008553999941796064f);
            break;
        case 4:
            field_0x0.setPanParam(
                1.0f, 0.0f,
                true, false, 0.0018554000416770577f, 0.0008553999941796064f);
            field_0x1c.setPanParam(
                0.0f,
                1.0f, false, true, 0.0018554000416770577f,
                0.0008553999941796064f);
            break;
        case 5:
        case 11:
            field_0x0.setPanParam(
                1.0f, 0.0f,
                true, false, 0.0018554000416770577f, 0.0008553999941796064f);
            field_0x1c.setPanParam(
                0.0f,
                1.0f, false, true, 0.0018554000416770577f,
                0.0008553999941796064f);
            break;
        case 6:
        case 10:
            field_0x0.setPanParam(
                1.0f, 0.0f,
                true, false, 0.0018554000416770577f, 0.0008553999941796064f);
            field_0x1c.setPanParam(
                0.0f,
                1.0f, false, true, 0.0018554000416770577f,
                0.0008553999941796064f);
            break;
        case 7:
            field_0x0.setPanParam(
                1.0f, 0.0f,
                true, false, 0.0018554000416770577f, 0.0008553999941796064f);
            field_0x1c.setPanParam(
                0.0f,
                1.0f, false, true, 0.0018554000416770577f,
                0.0008553999941796064f);
            break;
        case 8:
            field_0x0.setPanParam(
                1.0f, 0.0f,
                true, false, 0.0018554000416770577f, 0.0008553999941796064f);
            field_0x1c.setPanParam(
                0.0f,
                1.0f, false, true, 0.0018554000416770577f,
                0.0008553999941796064f);
            break;
        case 9:
            field_0x0.setPanParam(
                1.0f, 0.0f,
                true, false, 0.0018554000416770577f, 0.0008553999941796064f);
            field_0x1c.setPanParam(
                0.0f,
                1.0f, false, true, 0.0018554000416770577f,
                0.0008553999941796064f);
        }
        field_0x38 = param_1;
    }
}

/* 802C70C8-802C780C 2C1A08 0744+00 2/1 1/1 0/0 .text            startStaticEnvSe__10Z2EnvSeMgrFSc
 */
bool Z2EnvSeMgr::startStaticEnvSe(s8 param_1) {
    field_0x1b8 = 100;
    f32 local_90 = param_1 / 127.0f;
    if (field_0x39 != 0) {
        field_0x48 += field_0x54;
        field_0x4c += field_0x58;
        field_0x50 += field_0x5c;
        field_0x39--;
        if (field_0x39 == 0) {
            field_0x54 = 0.0f;
            field_0x58 = 0.0f;
            field_0x5c = 0.0f;
        }
    }
    field_0x0.calcPan();
    field_0x1c.calcPan();
    JAISoundID aJStack_94;
    JAISoundID aJStack_98 = 0xffffffff;
    f32 local_9c = 1.0f;
    if (0.0f != field_0x50) {
        Vec VStack_8c;
        Z2GetAudience()->convertAbsToRel(field_0x3c, &VStack_8c, 0);
        local_9c = Z2GetAudience()->calcRelPosVolume(VStack_8c, field_0x50, 0);
    }
    f32 dVar22 = field_0x48 * local_9c;
    f32 dVar21 = field_0x48 * local_9c;
    f32 dVar20 = field_0x4c;
    f32 dVar18 = field_0x4c;
    u8 bVar15 = Z2GetStatusMgr()->getHour();
    switch (field_0x38) {
    case 0:
        return false;
    case 1:
        if (bVar15 >= 6 && bVar15 <= 18) {
            aJStack_94 = Z2SE_ENV_FOREST_DAY;
            aJStack_98 = Z2SE_ENV_FORESTWIND;
            dVar21 *= 0.7f;
        } else {
            aJStack_94 = Z2SE_ENV_FORESTWIND;
            aJStack_98 = Z2SE_ENV_FORESTWIND;
        }
        break;
    case 2:
        if (bVar15 >= 6 && bVar15 <= 18) {
            dVar22 *= 0.7f;
            dVar21 *= 0.7f;
        }
        aJStack_94 = JA_SE_ATM_WIND_HOT;
        aJStack_98 = JA_SE_ATM_WIND_HOT;
        dVar20 = 2.0f;
        dVar18 = 2.1f;
        break;
    case 3:
        aJStack_94 = JA_SE_ATM_WIND_HOT;
        aJStack_98 = JA_SE_ATM_WIND_HOT;
        break;
    case 4:
        aJStack_94 = Z2SE_ENV_SNOW_MT_WIND_L;
        aJStack_98 = Z2SE_ENV_SNOW_MT_WIND_R;
        if (mSnowPower > 64) {
            dVar22 *= Z2Calc::getParamByExp(mSnowPower,
                64.0f, 127.0f,
                0.4f, 0.35f,
                1.0f, Z2Calc::CURVE_SIGN_1);
            dVar20 *= Z2Calc::getParamByExp(mSnowPower,
                64.0f, 127.0f,
                0.4f, 1.15f,
                1.6f, Z2Calc::CURVE_SIGN_1);
            dVar21 *= Z2Calc::getParamByExp(mSnowPower,
                64.0f, 127.0f,
                0.3f, 0.2f,
                1.0f, Z2Calc::CURVE_SIGN_1);
            dVar18 *= Z2Calc::getParamByExp(mSnowPower,
                127.0f, 64.0f,
                0.4f, 0.65f,
                0.9f, Z2Calc::CURVE_SIGN_0);
        } else {
             dVar22 *= Z2Calc::getParamByExp(mSnowPower,
                0.0f, 64.0f,
                0.4f, 0.2f,
                0.35f, Z2Calc::CURVE_SIGN_0);
            dVar20 *= Z2Calc::getParamByExp(mSnowPower,
                0.0f, 64.0f,
                0.3f, 1.0f,
                1.15f, Z2Calc::CURVE_SIGN_0);
            dVar21 *= Z2Calc::getParamByExp(mSnowPower,
                0.0f, 64.0f,
                0.3f, 0.1f,
                0.2f, Z2Calc::CURVE_SIGN_0);
            dVar18 *= ::Z2Calc::getParamByExp(mSnowPower,
                64.0f, 0.0f,
                0.4f, 0.9f,
                1.0f, Z2Calc::CURVE_SIGN_1);
        }
        break;
    case 11:
        dVar22 = 0.5f;
        dVar21 = 0.6f;
    case 5:
        aJStack_94 = Z2SE_ENV_WINDTAG_STRONG;
        aJStack_98 = Z2SE_ENV_WINDTAG_SLOW;
        break;
    case 6:
        if (bVar15 >= 6 && bVar15 <= 18) {
            dVar22 *= 0.1f;
            dVar21 *= 0.12f;
        } else {
            dVar22 *= 0.2f;
            dVar21 *= 0.2f;
        }
        aJStack_94 = Z2SE_ENV_FIELD_WIND_L;
        aJStack_98 = Z2SE_ENV_FIELD_WIND_R;
        break;
    case 10:
        if (bVar15 >= 6 && bVar15 <= 18) {
            dVar22 *= 0.1f;
            dVar21 *= 0.6f;
        } else {
            dVar22 *= 0.2f;
        }
        aJStack_94 = Z2SE_ENV_FIELD_WIND_L;
        aJStack_98 = Z2SE_ENV_VALLEY_WIND;
        break;
    case 7:
        dVar22 *= 0.85f;
        dVar21 *= 0.6f;
        aJStack_94 = Z2SE_ENV_WINDTAG_STRONG;
        aJStack_98 = Z2SE_ENV_WINDTAG_SLOW;
        break;
    case 8:
        aJStack_94 = Z2SE_ENV_ICED_VILLAGE_L;
        aJStack_98 = Z2SE_ENV_ICED_VILLAGE_R;
        break;
    case 9:
        aJStack_94 = Z2SE_ENV_OUGI_FIELD_L;
        aJStack_98 = Z2SE_ENV_OUGI_FIELD_R;
        break;    
    default:
        return false;
    }
    dVar22 *= 1.0f - getFogDensity();
    dVar21 *= 1.0f - getFogDensity();
    if (Z2GetSceneMgr()->isInDarkness()) {
        dVar22 *= 0.75f;
        dVar21 *= 0.75f;
    }
    JAISoundHandle* pJVar10 = field_0x0.getHandle();
    if (*pJVar10) {
        if ((u32)(*pJVar10)->getID() != (u32)aJStack_94) {
            (*pJVar10)->stop(0x1e);
            (*pJVar10)->releaseHandle();
        }
    }
    pJVar10 = field_0x1c.getHandle();
    if (*pJVar10) {
        if ((u32)(*pJVar10)->getID() != (u32)aJStack_98) {
            (*pJVar10)->stop(0x1e);
            (*pJVar10)->releaseHandle();
        }
    }
    bool iVar9 = field_0x0.startEnvSeAutoPanLevel(aJStack_94, local_90,
                                                   dVar22, dVar20);
    bool iVar11 = field_0x1c.startEnvSeAutoPanLevel(aJStack_98,
                                                    local_90, dVar21, dVar18);
    if (field_0x38 == 4) {
        JAISoundHandle* pJVar10 = field_0x0.getHandle();
        JAISoundHandle* this_02 = field_0x1c.getHandle();
        if (*pJVar10) {
            Z2GetSoundStarter()->setPortData(pJVar10, 6, mSnowPower, -1);
        }
        if (*this_02) {
            Z2GetSoundStarter()->setPortData(this_02, 6, mSnowPower, -1);
        }
    }
    bool rv = 0;
    if (iVar9 && iVar11) {
        rv = 1;
    }
    return rv;
}

/* 802C780C-802C7830 2C214C 0024+00 0/0 1/1 0/0 .text            registWindowPos__10Z2EnvSeMgrFP3Vec
 */
void Z2EnvSeMgr::registWindowPos(Vec* param_0) {
    field_0x64.registMultiSePos(param_0);
}

/* 802C7830-802C7CF4 2C2170 04C4+00 1/1 1/1 0/0 .text            startRainSe__10Z2EnvSeMgrFlSc */
bool Z2EnvSeMgr::startRainSe(s32 param_1, s8 param_2) {
    if (mSnowPower > 0) {
        return false;
    }
    mSnowPower = 1;
    JAISoundID aJStack_118 = 0xffffffff;
    JAISoundID aJStack_11c = 0xffffffff;
    JAISoundID aJStack_120 = 0xffffffff;
    f32 dVar21 = param_2 / 127.0f;
    s8 unaff_r29;
    switch (param_1) {
    case 0:
        aJStack_118 = Z2SE_ENV_RAIN_NORMAL_L;
        aJStack_11c = Z2SE_ENV_RAIN_NORMAL_R;
        aJStack_120 = Z2SE_ENV_RAIN_ROOM;
        unaff_r29 = 100;
        break;
    case 1:
        aJStack_118 = Z2SE_ENV_RAIN_HARD_L;
        aJStack_11c = Z2SE_ENV_RAIN_HARD_R;
        aJStack_120 = Z2SE_ENV_RAIN_HARD_ROOM;
        unaff_r29 = 50;
        break;
    }

    if (field_0x140 < unaff_r29) {
        field_0x140++;
    } else if (field_0x140 > unaff_r29) {
        field_0x140 = unaff_r29;
    }

    if (field_0x64.getPosCount() < 0) {
        f32 dVar13 =
            Z2Calc::linearTransform(field_0x90.calcNoise1f(), 0.0f, 1.0f, 0.7f, 1.0f, true);
        f32 dVar14 =
            Z2Calc::linearTransform(field_0xa0.calcNoise1f(), 0.0f, 1.0f, 0.7f, 1.0f, true);
        f32 dVar15 =
            Z2Calc::linearTransform(field_0xd0.calcNoise1f(), 0.0f, 1.0f, 0.8f, 1.1f, true);
        f32 dVar16 =
            Z2Calc::linearTransform(field_0xe0.calcNoise1f(), 0.0f, 1.0f, 0.8f, 1.1f, true);
        f32 dVar17 = Z2Calc::getParamByExp(field_0xb0.calcNoise1f(), 0.0f, 1.0f, 0.3f, 0.0f, 0.3f,
                                           Z2Calc::CURVE_SIGN_1);
        f32 dVar18 = Z2Calc::getParamByExp(field_0xc0.calcNoise1f(), 0.0f, 1.0f, 0.3f, 1.0f, 0.7f,
                                           Z2Calc::CURVE_SIGN_1);
        f32 dVar19 = Z2Calc::getParamByExp(field_0xf0.calcNoise1f(), 0.0f, 1.0f, 0.3f, 0.0f, 1.0f,
                                           Z2Calc::CURVE_SIGN_1);
        f32 dVar20 = Z2Calc::getParamByExp(field_0x100.calcNoise1f(), 0.0f, 1.0f, 0.3f, 0.0f, 1.0f,
                                           Z2Calc::CURVE_SIGN_1);
        if (Z2GetSceneMgr()->isInDarkness()) {
            dVar13 *= 0.5f;
            dVar14 *= 0.5f;
        }
        JAISoundHandle* pJVar8 = field_0x80.getHandle();
        if (*pJVar8) {
            if ((*pJVar8)->getID() != (u32)aJStack_118) {
                (*pJVar8)->stop(0x1e);
                (*pJVar8)->releaseHandle();
            }
        }
        pJVar8 = field_0x88.getHandle();
        if (*pJVar8) {
            if ((*pJVar8)->getID() != (u32)aJStack_11c) {
                (*pJVar8)->stop(0x1e);
                (*pJVar8)->releaseHandle();
            }
        }

        bool iVar7 =
            field_0x80.startEnvSeLevel(aJStack_118, dVar21, dVar13, dVar17, dVar19, dVar15, 0);
        bool iVar9 =
            field_0x88.startEnvSeLevel(aJStack_11c, dVar21, dVar14, dVar18, dVar20, dVar16, 0);
        bool uVar5 = 0;
        if (iVar7 && iVar9) {
            uVar5 = 1;
        }
        return uVar5;
    }

    f32 dVar13 = Z2Calc::linearTransform(field_0x90.calcNoise1f(), 0.0f, 1.0f, 0.7f, 1.0f, true);
    f32 dVar14 = Z2Calc::linearTransform(field_0xd0.calcNoise1f(), 0.0f, 1.0f, 0.8f, 1.1f, true);

    JAISoundHandle* pJVar8 = field_0x80.getHandle();
    if (*pJVar8) {
        if ((*pJVar8)->getID() != (u32)aJStack_120) {
            (*pJVar8)->stop(0x1e);
            (*pJVar8)->releaseHandle();
        }
    }

    f32 maxVolume = field_0x64.getMaxVolume();
    return field_0x80.startEnvSeLevel(aJStack_120, dVar21, dVar13 * maxVolume,
                                      field_0x64.getPanPower(), field_0x64.getDolbyPower(), dVar14,
                                      0);
}

/* 802C7CF4-802C7E68 2C2634 0174+00 0/0 1/1 0/0 .text            startNearThunderSe__10Z2EnvSeMgrFSc
 */
void Z2EnvSeMgr::startNearThunderSe(s8 param_1) {
    if (field_0x64.getPosCount() < 0) {
        f32 dVar10 = Z2Calc::getRandom(0.25f, Z2Calc::cEqualCSlope, Z2Calc::cEqualPSlope);
        dVar10 += 0.5f;
        f32 dVar8 = Z2Calc::getRandom(0.25f, Z2Calc::cEqualCSlope, Z2Calc::cEqualPSlope);
        dVar8 += 0.5f;
        field_0x118.startEnvSe(Z2SE_ENV_THUNDER_NEAR, param_1 / 127.0f, 1.0f, dVar10, dVar8, 1.0f,
                               0);
    } else {
        f32 maxVolume = field_0x64.getMaxVolume();
        field_0x118.startEnvSe(Z2SE_ENV_THUND_NEAR_WIN, param_1 / 127.0f, maxVolume,
                               field_0x64.getPanPower(), field_0x64.getDolbyPower(), 1.0f, 0);
    }
}

/* 802C7E68-802C7FB4 2C27A8 014C+00 0/0 2/2 0/0 .text startFarThunderSe__10Z2EnvSeMgrFP3VecSc */
void Z2EnvSeMgr::startFarThunderSe(Vec* param_1, s8 param_2) {
    if (field_0x64.getPosCount() < 0) {
        field_0x110.setPos(param_1);
        field_0x110.startEnvSe(Z2SE_ENV_THUNDER_FAR, param_2 / 127.0f, 1.0f, 0.5f, 0.0f, 1.0f, 0);
    } else {
        f32 maxVolume = field_0x64.getMaxVolume();
        field_0x110.startEnvSe(Z2SE_ENV_THUND_FAR_WIN, param_2 / 127.0f, maxVolume,
                               field_0x64.getPanPower(), field_0x64.getDolbyPower(), 1.0f, 0);
    }
}

/* 802C7FB4-802C7FBC -00001 0008+00 0/0 0/0 0/0 .text            setSnowPower__10Z2EnvSeMgrFSc */
void Z2EnvSeMgr::setSnowPower(s8 param_0) {
    mSnowPower = param_0;
}

/* 802C7FBC-802C7FC8 2C28FC 000C+00 0/0 1/1 1/1 .text            initStrongWindSe__10Z2EnvSeMgrFv */
void Z2EnvSeMgr::initStrongWindSe() {
    mWindType = WIND_TYPE_3;
}

/* 802C7FC8-802C800C 2C2908 0044+00 0/0 1/1 1/1 .text setWindDirection__10Z2EnvSeMgrFP3Vec */
void Z2EnvSeMgr::setWindDirection(Vec* param_0) {
    if (mWindType == WIND_TYPE_3) {
        field_0x144.setPanDir((Vec*)&cNullVec__6Z2Calc);
    } else {
        field_0x144.setPanDir(param_0);
    }
}

/* 802C800C-802C80F8 2C294C 00EC+00 0/0 1/1 1/1 .text            startStrongWindSe__10Z2EnvSeMgrFSc
 */
bool Z2EnvSeMgr::startStrongWindSe(s8 param_1) {
    field_0x144.calcPan(1.0f);
    JAISoundID aJStack_24 = 0xffffffff;
    switch (mWindType) {
    case WIND_TYPE_1:
        aJStack_24 = Z2SE_ENV_WINDTAG_STRONG;
        break;
    case WIND_TYPE_2:
        aJStack_24 = Z2SE_ENV_WINDTAG_SLOW;
        break;
    case WIND_TYPE_3:
        aJStack_24 = Z2SE_ENV_WINDTAG_CEASE;
        break;
    default:
        return false;
    }
  
    return field_0x144.startEnvSeDirLevel(aJStack_24, param_1 / 127.0f, 1.0f);
}

/* 802C80F8-802C8234 2C2A38 013C+00 0/0 1/1 0/0 .text            initRiverSe__10Z2EnvSeMgrFUcUcUcUc
 */
void Z2EnvSeMgr::initRiverSe(u8 param_1, u8 param_2, u8 param_3, u8 param_4) {
    field_0x188 = param_1;
    if (param_2 >= 100) {
        field_0x1ac = 1.0f;
    } else {
        field_0x1ac = 0.01f * param_2;
    }
    if (param_3 == 0xff) {
        field_0x1b0 = 1.0f;
    } else {
        field_0x1b0 = 0.01f * param_3;
    }
    if (param_4 == 0xff) {
        field_0x1b4 = 1.0f;
    } else {
        field_0x1b4 = 0.1f * param_4;
    }
    switch (param_1) {
    case 1:
        mRiverSeMgr.setVolumeScale(1.5f * field_0x1b4);
        break;
    case 2:
        mRiverSeMgr.setVolumeScale(3.0f * field_0x1b4);
        break;
    case 3:
        mRiverSeMgr.setVolumeScale(0.5f * field_0x1b4);
        break;
    case 5:
        mRiverSeMgr.setVolumeScale(1.5f * field_0x1b4);
        break;
    }
}

/* 802C8234-802C8258 2C2B74 0024+00 1/1 1/1 0/0 .text registRiverSePos__10Z2EnvSeMgrFP3Vec */
void Z2EnvSeMgr::registRiverSePos(Vec* param_0) {
    mRiverSeMgr.registMultiSePos(param_0);
}

/* 802C8258-802C8300 2C2B98 00A8+00 0/0 0/0 1/1 .text            setHyrulSewerOpen__10Z2EnvSeMgrFb
 */
void Z2EnvSeMgr::setHyrulSewerOpen(bool param_0) {
    if (param_0) {
        field_0x1b8 = 1;
        Z2GetSeMgr()->seStart(Z2SE_ENV_SEWER_FILL, NULL, 0, 0, 1.0f, 1.0f, -1.0f, -1.0f, 0);
    } else {
        field_0x1b8 = 0xff;
        Z2GetSeMgr()->seStart(Z2SE_ENV_SEWER_OUT, NULL, 0, 0, 1.0f, 1.0f, -1.0f, -1.0f, 0);
    }
}

/* 802C8300-802C8730 2C2C40 0430+00 2/1 1/1 0/0 .text            startRiverSe__10Z2EnvSeMgrFSc */
// NONMATCHING JAISound stack issues
bool Z2EnvSeMgr::startRiverSe(s8 param_1) {
    if (Z2GetStatusMgr()->mCameraMapInfo == 6) {
        switch (Z2GetSceneMgr()->getCurrentSceneNum()) {
        case 5:
            if (Z2GetSceneMgr()->getCurrentRoomNum() != 1) {
                break;
            }
        case 0x10:
            if (Z2GetStatusMgr()->mPolygonPosition.y < -14500.0f) {
                break;
            }
        case 8:
            // fake match: should be 2000.0f according to debug, but that generates an extra entry in sdata2
            if (Z2GetStatusMgr()->mPolygonPosition.y < -14500.0f) {
                break;
            }
        case 0x15:
        case 0x1e:
        case 0x1f:
        case 0x2e:
            break;
        default:
            registRiverSePos(&Z2GetStatusMgr()->mPolygonPosition);
            break;
        }
    }
    if (mRiverSeMgr.getPosCount() < 0) {
        return false;
    }
    JAISoundID aJStack_742 = 0xffffffff;
    bool uVar8 = false;
    f32 dVar16 = param_1 / 127.0f;
    f32 dVar18 = field_0x1ac * mRiverSeMgr.getMaxVolume();
    f32 dVar13 = mRiverSeMgr.getPanPower();
    f32 dVar14 = mRiverSeMgr.getDolbyPower();
    f32 dVar17 = field_0x1b0;

    switch (field_0x188) {
    case 0:
        return false;
    case 1:
        aJStack_742 = Z2SE_ENV_RIVER_SMALL;
        dVar18 *= Z2Calc::linearTransform(field_0x18c.calcNoise1f(), 0.0f, 1.0f, 0.7f, 1.0f,
                                          true);
        dVar17 *= Z2Calc::linearTransform(field_0x19c.calcNoise1f(), 0.0f, 1.0f, 0.8f, 1.1f,
                                          true);
        uVar8 = field_0x180.startEnvSeLevel(aJStack_742, dVar16, dVar18, dVar13, dVar14, dVar17, 0);
        break;
    case 2:
        aJStack_742 = Z2SE_ENV_RIVER_NORMAL;
        mRiverSeMgr.getMaxPowL();
        mRiverSeMgr.getMaxPowR();
        mRiverSeMgr.getDolbyPower();
        uVar8 = field_0x180.startEnvSeLevel(aJStack_742, dVar16, dVar18, dVar13, dVar14, dVar17, 0);
        break;
    case 3:
        if (field_0x1b8 > 0) {
            dVar18 *= (field_0x1b8 + 50) / 150.0f;
        } else {
            if (field_0x1b8 < 0) {
                dVar18 *= (field_0x1b8 + 150) / 150.0f;
            } else {
                dVar18 *= 0.3f;
            }
        }
        aJStack_742 = Z2SE_ENV_SEWER;
        dVar18 *= Z2Calc::linearTransform(field_0x18c.calcNoise1f(), 0.0f, 1.0f, 0.6f, 1.0f, true);
        dVar17 *= Z2Calc::linearTransform(field_0x19c.calcNoise1f(), 0.0f, 1.0f, 0.8f, 1.0f, true);
        uVar8 = field_0x180.startEnvSeLevel(aJStack_742, dVar16, dVar18, dVar13, dVar14, dVar17, 0);
        break;
    case 5:
        aJStack_742 = Z2SE_ENV_SPIRIT_FOUNTAIN;
        dVar18 *= Z2Calc::linearTransform(field_0x18c.calcNoise1f(), 0.0f, 1.0f, 0.6f, 1.0f, true);
        dVar17 *= Z2Calc::linearTransform(field_0x19c.calcNoise1f(), 0.0f, 1.0f, 0.8f, 1.0f, true);
        uVar8 = field_0x180.startEnvSeLevel(aJStack_742, dVar16, dVar18, dVar13, dVar14, dVar17, 0);
        break;
    }

    mRiverSeMgr.resetMultiSePos();
    return uVar8;
}

/* 802C8730-802C886C 2C3070 013C+00 1/1 1/1 0/0 .text            initFallSe__10Z2EnvSeMgrFUcUcUcUc
 */
void Z2EnvSeMgr::initFallSe(u8 param_1, u8 param_2, u8 param_3, u8 param_4) {
    field_0x1e0 = param_1;
    if (param_2 >= 100) {
        field_0x1e4 = 1.0f;
    } else {
        field_0x1e4 = 0.01f * param_2;
    }
    if (param_3 == 0xff) {
        field_0x1e8 = 1.0f;
    } else {
        field_0x1e8 = 0.01f * param_3;
    }
    if (param_4 == 0xff) {
        field_0x1ec = 1.0f;
    } else {
        field_0x1ec = 0.1f * param_4;
    }
    switch (param_1) {
    case 8:
        mFallSeMgr.setVolumeScale(3.0f * field_0x1ec);
        break;
    case 9:
        mFallSeMgr.setVolumeScale(3.0f * field_0x1ec);
        break;
    case 10:
        mFallSeMgr.setVolumeScale(1.5f * field_0x1ec);
        break;
    case 11:
        mFallSeMgr.setVolumeScale(1.5f * field_0x1ec);
        break;
    }
}

/* 802C886C-802C8890 2C31AC 0024+00 0/0 1/1 0/0 .text            registFallSePos__10Z2EnvSeMgrFP3Vec
 */
void Z2EnvSeMgr::registFallSePos(Vec* param_0) {
    mFallSeMgr.registMultiSePos(param_0);
}

/* 802C8890-802C8A90 2C31D0 0200+00 1/1 1/1 0/0 .text            startFallSe__10Z2EnvSeMgrFSc */
bool Z2EnvSeMgr::startFallSe(s8 param_1) {
    if (mFallSeMgr.getPosCount() < 0) {
        return false;
    }
    JAISoundID aJStack_80 = 0xffffffff;
    f32 dVar14 = param_1 / 127.0f;
    f32 dVar13 = ((field_0x1e4 * mFallSeMgr.getMaxVolume()) *
                  Z2Calc::linearTransform(field_0x90.calcNoise1f(), 0.0f, 1.0f, 0.7f, 1.0f, true));
    f32 dVar15 = (field_0x1e8 *
                  Z2Calc::linearTransform(field_0xd0.calcNoise1f(), 0.0f, 1.0f, 0.8f, 1.1f, true));
    f32 dVar11 = mFallSeMgr.getPanPower();
    f32 dVar12 = mFallSeMgr.getDolbyPower();
    switch (field_0x1e0) {
    case 8:
        aJStack_80 = Z2SE_ENV_WATERFALL_NORMAL;
        break;
    case 9:
        aJStack_80 = Z2SE_ENV_FALL_LV1BOSS;
        break;
    case 10:
        aJStack_80 = Z2SE_ENV_SPIRIT_FALL;
        dVar15 *= 0.75f;
        break;
    case 11:
        aJStack_80 = Z2SE_ENV_SAND_FALL;
        break;
    }

    bool rv = field_0x1d8.startEnvSeLevel(aJStack_80, dVar14, dVar13, dVar11, dVar12, dVar15, 0);
    mFallSeMgr.resetMultiSePos();
    return rv;
}

/* 802C8A90-802C8C24 2C33D0 0194+00 2/1 1/1 0/0 .text            initEtcSe__10Z2EnvSeMgrFUcUcUcUc */
void Z2EnvSeMgr::initEtcSe(u8 param_1, u8 param_2, u8 param_3, u8 param_4) {
    field_0x214 = param_1;
    if (param_2 >= 100) {
        field_0x218 = 1.0f;
    } else {
        field_0x218 = 0.01f * param_2;
    }
    if (param_3 == 0xff) {
        field_0x21c = 1.0f;
    } else {
        field_0x21c = 0.01f * param_3;
    }
    if (param_4 == 0xff) {
        field_0x220 = 1.0f;
    } else {
        field_0x220 = 0.1f * param_4;
    }
    switch (param_1) {
    case 17:
        mEtcSeMgr.setVolumeScale(2.0f * field_0x220);
        break;
    case 18:
        mEtcSeMgr.setVolumeScale(0.7f * field_0x220);
        break;
    case 25:
        field_0x1c.setPanParam(0.0f, 1.0f, false,
                               true, 0.0018554000416770577f, 0.0008553999941796064f);
    case 26:
    case 30:
    case 31:
        mEtcSeMgr.setVolumeScale(2.0f * field_0x220);
        break;
    case 20:
        mEtcSeMgr.setVolumeScale(field_0x220);
        break;
    case 16:
        mEtcSeMgr.setVolumeScale(2.0f * field_0x220);
        break;
    case 24:
        mEtcSeMgr.setVolumeScale(4.0f * field_0x1b4);
        break;
    }
}

/* 802C8C24-802C8C48 2C3564 0024+00 1/1 1/1 0/0 .text            registEtcSePos__10Z2EnvSeMgrFP3Vec
 */
void Z2EnvSeMgr::registEtcSePos(Vec* param_0) {
    mEtcSeMgr.registMultiSePos(param_0);
}

/* 802C8C48-802C92C8 2C3588 0680+00 2/1 1/1 0/0 .text            startEtcSe__10Z2EnvSeMgrFSc */
bool Z2EnvSeMgr::startEtcSe(s8 param_1) {
    f32 dVar17 = param_1 / 127.0f;
    f32 dVar19 = (field_0x218 * mEtcSeMgr.getMaxVolume());
    f32 dVar14 = mEtcSeMgr.getPanPower();
    f32 dVar15 = mEtcSeMgr.getDolbyPower();
    bool rv = false;
    f32 dVar18 = field_0x21c;
    f32 local_90, local_98, local_9c, local_a0;
    bool iVar5, iVar6, iVar7, iVar8;
    switch (field_0x214) {
    case 0x11:
        local_90 = Z2Calc::linearTransform(field_0x120.calcNoise1f(), 0.0f, 1.0f, 0.01f, 1.0f,
                                           true);
        dVar18 *= Z2Calc::linearTransform(field_0x130.calcNoise1f(), 0.0f, 1.0f, 0.8f, 1.2f,
                                          true);
        iVar8 = field_0x20c.startEnvSeLevel(Z2SE_OBJ_RANCH_WOODPLATE, dVar17,
                                                 (dVar19 * local_90), dVar14, dVar15, dVar18, 0);
        local_90 = Z2Calc::linearTransform(local_90, 0.0f, 1.0f, 0.3f, 1.0f, true);
        field_0x0.calcPan();
        field_0x1c.calcPan();
        iVar6 = field_0x0.startEnvSeAutoPanLevel(JA_SE_ATM_WIND_1, dVar17, local_90, dVar18);
        iVar7 = field_0x1c.startEnvSeAutoPanLevel(JA_SE_ATM_WIND_1, dVar17, 0.7f * local_90,
                                                       (0.8f * dVar18));
        iVar5 = false;
        if (iVar8 && iVar6 && iVar7) {
            iVar5 = true;
        }
        rv = iVar5;
        break;
    case 0x12:
        local_90 = ::Z2Calc::linearTransform(field_0x120.calcNoise1f(), 0.0f, 1.0f, 0.4f, 0.8f,
                                             true);
        dVar18 *= ::Z2Calc::linearTransform(field_0x130.calcNoise1f(), 0.0f, 1.0f, 0.8f, 1.3f,
                                            true);
        rv = field_0x20c.startEnvSeLevel(JA_SE_OBJ_WIND_TAG, dVar17, (dVar19 * local_90), dVar14,
                                         dVar15, dVar18, 0);
        break;
    case 0x18:
        if (mEtcSeMgr.getPosCount() < 0) {
            return false;
        }
        rv = field_0x20c.startEnvSeLevel(JA_SE_MAGMA_L, dVar17, dVar19, dVar14, dVar15, dVar18, 0);
        break;
    case 0x1a:
    case 0x1e:
        if (mEtcSeMgr.getPosCount() < 0) {
            return false;
        }
        rv = field_0x20c.startEnvSeLevel(Z2SE_ENV_WATER_SURFACE, dVar17, dVar19, dVar14, dVar15,
                                         dVar18, 0);
        break;
    case 0x1f:
        if (mEtcSeMgr.getPosCount() < 0) {
            return false;
        }
        rv = field_0x20c.startEnvSeLevel(Z2SE_ENV_RIVER_NORMAL, dVar17, dVar19, dVar14, dVar15,
                                         0.89f * dVar18, 0);
        break;
    case 0x19:
        if (Z2GetStatusMgr()->mCameraMapInfo == 6 &&
            (Z2GetSceneMgr()->getCurrentSceneNum() != 0x10 ||
             Z2GetStatusMgr()->mPolygonPosition.y < -14500.0f))
        {
            f32 local_94 = (1.0f - dVar19);
            registEtcSePos(&Z2GetStatusMgr()->mPolygonPosition);
            dVar14 = mEtcSeMgr.getMaxVolume();
            dVar19 = field_0x218 * dVar14;
            dVar14 = mEtcSeMgr.getPanPower();
            dVar15 = mEtcSeMgr.getDolbyPower();
            if (Z2GetSceneMgr()->isInDarkness()) {
                dVar19 *= 0.75f;
            }
            local_94 *= dVar19;
            field_0x1c.calcPan();
            field_0x1c.startEnvSeAutoPanLevel(Z2SE_ENV_LAKE_OFFSHORE, dVar17, local_94, 1.0f);
        } else if (Z2GetSceneMgr()->isInDarkness()) {
            dVar19 *= 0.75f;
        }
        rv = field_0x20c.startEnvSeLevel(Z2SE_ENV_LAKEWATER, dVar17, dVar19, dVar14, dVar15, dVar18,
                                         0);
        break;
    case 0x14:
        local_90 = ::Z2Calc::linearTransform(field_0x120.calcNoise1f(), 0.0f, 1.0f, 0.4f, 0.8f,
                                             true);
        dVar18 *= ::Z2Calc::linearTransform(field_0x130.calcNoise1f(), 0.0f, 1.0f, 0.8f, 1.3f,
                                            true);
        rv = field_0x20c.startEnvSeLevel(Z2SE_ENV_SNOW_MT_WIND_ROOM, dVar17, (dVar19 * local_90),
                                         dVar14, dVar15, dVar18, 0);
        break;
    case 0x0:
        break;
    case 0x10:
        local_98 = Z2Calc::getParamByExp(getFogDensity(), 0.4f, 1.0f, 0.2f, 0.2f, 1.0f,
                                             Z2Calc::CURVE_SIGN_0);
        local_9c = Z2Calc::getParamByExp(getFogDensity(), 0.4f, 1.0f, 0.2f, 0.75f, 1.0f,
                                             Z2Calc::CURVE_SIGN_0);
        local_a0 = field_0x2e8.calcNoise1f();
        rv = field_0x240.startEnvSeLevel(Z2SE_ENV_PUPPET_FOG_L, 0.3f,
                                         (dVar19 * ((0.332f + 0.668f * local_a0) * local_98)),
                                         dVar14, dVar15, 0.8f + 0.2f * local_a0, 0);
        local_a0 = field_0x2f8.calcNoise1f();
        field_0x274.startEnvSeLevel(Z2SE_ENV_PUPPET_FOG_R, 0.3f,
                                    local_98 * (dVar19 * (0.332f + 0.668f * local_a0)), dVar14,
                                    dVar15, 0.8f + 0.2f * local_a0, 0);
        break;
    default:
        return false;
    }
    mEtcSeMgr.resetMultiSePos();
    return rv;
}

/* 802C92C8-802C92EC 2C3C08 0024+00 0/0 0/0 1/1 .text registWolfSmellSePos__10Z2EnvSeMgrFP3Vec */
void Z2EnvSeMgr::registWolfSmellSePos(Vec* param_0) {
    mWolfSmellSeMgr.registMultiSePos(param_0);
}

/* 802C92EC-802C93A0 2C3C2C 00B4+00 0/0 0/0 1/1 .text startFogWipeTrigger__10Z2EnvSeMgrFP3Vec */
bool Z2EnvSeMgr::startFogWipeTrigger(Vec* param_0) {
    if (*field_0x240.getHandle()) {
        f32 fogDensity = getFogDensity();
        u32 fogDensity2 = 340.0f * getFogDensity();
        return Z2GetSoundStarter()->startSound(Z2SE_ENV_FOG_WIPE, field_0x20c.getHandle(),
                                               (JGeometry::TVec3<f32>*)param_0, fogDensity2, 0.3f,
                                               1.0f, fogDensity, -1.0f, -1.0f, 0);
    }
    //! @bug does not always return a value
}

/* 802C93A0-802C93E4 2C3CE0 0044+00 0/0 0/0 1/1 .text            setFogWipeWidth__10Z2EnvSeMgrFf */
void Z2EnvSeMgr::setFogWipeWidth(f32 param_0) {
    mFogDensity = Z2Calc::linearTransform(param_0, 0.0f, 1.0f, 1.0f, 0.4f, true);
}

/* 802C93E4-802C9400 2C3D24 001C+00 3/3 2/2 0/0 .text            getFogDensity__10Z2EnvSeMgrFv */
f32 Z2EnvSeMgr::getFogDensity() {
    if (field_0x214 == 0x10) {
        return mFogDensity;
    }
    return 0.0f;
}

/* 802C9400-802C950C 2C3D40 010C+00 0/0 0/0 1/1 .text            startFogSe__10Z2EnvSeMgrFv */
// NONMATCHING fmuls reg order
bool Z2EnvSeMgr::startFogSe() { 
    f32 dVar10 = field_0x2e8.calcNoise1f();
    f32 dVar14 = 0.332f + (0.668f * dVar10);
    f32 dVar13 = 0.8f + (dVar10 * 0.2f);
    f32 dVar12 = 0.5f - (dVar10 * 0.4f) / 2;
    bool iVar5 =
        field_0x240.startEnvSeLevel(Z2SE_ENV_PUPPET_FOG_L, 20.0f, dVar14, dVar12, 0.5f, dVar13, 0);
    dVar10 = field_0x2f8.calcNoise1f();
    dVar14 = (0.332f + (0.668f * dVar10));
    dVar13 = (0.8f + (0.2f * dVar10));
    dVar12 = (0.5f + ( 0.4f * dVar10) / 2);
    bool iVar6 = field_0x274.startEnvSeLevel(Z2SE_ENV_PUPPET_FOG_R, 20.0f, dVar14, dVar12, 0.5f,
                                             dVar13, 0);
    bool uVar8 = false;
    if (iVar5 && iVar6) {
        uVar8 = true;
    }
    return uVar8;
}

/* 802C950C-802C9F58 2C3E4C 0A4C+00 2/0 1/1 0/0 .text initLv3WaterSe__10Z2EnvSeMgrFUcUcUcUc */
void Z2EnvSeMgr::initLv3WaterSe(u8 param_1, u8 param_2, u8 param_3, u8 param_4) {
    switch (param_1) {
    case 110:
        field_0x248 = param_1;
        if (param_2 >= 100) {
            field_0x24c = 1.0f;
        } else {
            field_0x24c = 0.01f * param_2;
        }
        
        if (param_3 == 0xff) {
            field_0x250 = 1.0f;
        } else {
            field_0x250 = 0.01f * param_3;
        }

        if (param_4 == 0xff) {
            field_0x254 = 1.0f;
        } else {
            field_0x254 = 0.1f * param_4;
        }
        field_0x224.setVolumeScale(2.0f * field_0x254);
        break;
    case 115:
        field_0x248 = param_1;
        if (param_2 >= 100) {
            field_0x24c = 1.0f;
        } else {
            field_0x24c = 0.01f * param_2;
        }
        if (param_3 == 0xff) {
            field_0x250 = 1.0f;
        } else {
            field_0x250 = 0.01f * param_3;
        }
        if (param_4 == 0xff) {
            field_0x254 = 1.0f;
        } else {
            field_0x254 = 0.1f * param_4;
        }
        field_0x224.setVolumeScale(1.5f * field_0x254);
        break;
    case 111:
        field_0x27c = param_1;
        if (param_2 >= 100) {
            field_0x280 = 1.0f;
        } else {
            field_0x280 = 0.01f * param_2;
        }
        if (param_3 == 0xff) {
            field_0x284 = 1.0f;
        } else {
            field_0x284 = 0.01f * param_3;
        }
        if (param_4 == 0xff) {
            field_0x288 = 1.0f;
        } else {
            field_0x288 = 0.1f * param_4;
        }
        field_0x258.setVolumeScale(2.0f * field_0x288);
        break;
    case 116:
        field_0x27c = param_1;
        if (param_2 >= 100) {
            field_0x280 = 1.0f;
        } else {
            field_0x280 = 0.01f * param_2;
        }
        if (param_3 == 0xff) {
            field_0x284 = 1.0f;
        } else {
            field_0x284 = 0.01f * param_3;
        }
        if (param_4 == 0xff) {
            field_0x288 = 1.0f;
        } else {
            field_0x288 = 0.1f * param_4;
        }
        field_0x258.setVolumeScale(1.5f * field_0x288);
        break;
    case 112:
        field_0x2b0 = param_1;
        if (param_2 >= 100) {
            field_0x2b4 = 1.0f;
        } else {
            field_0x2b4 = 0.01f *param_2;
        }
        if (param_3 == 0xff) {
            field_0x2b8 = 1.0f;
        } else {
            field_0x2b8 = 0.01f * param_3;
        }
        if (param_4 == 0xff) {
            field_0x2bc = 1.0f;
        } else {
            field_0x2bc = 0.1f * param_4;
        }
        field_0x28c.setVolumeScale(2.0f * field_0x2bc);
        break;
    case 117:
        field_0x2b0 = param_1;
        if (param_2 >= 100) {
            field_0x2b4 = 1.0f;
        } else {
            field_0x2b4 = 0.01f * param_2;
        }
        if (param_3 == 0xff) {
            field_0x2b8 = 1.0f;
        } else {
            field_0x2b8 = 0.01f * param_3;
        }
        if (param_4 == 0xff) {
            field_0x2bc = 1.0f;
        } else {
            field_0x2bc = 0.1f * param_4;
        }
        field_0x28c.setVolumeScale(1.5f * field_0x2bc);
        break;
    case 'w':
        field_0x2b0 = param_1;
        if (param_2 >= 100) {
            field_0x2b4 = 1.0f;
        } else {
            field_0x2b4 = 0.01f * param_2;
        }
        if (param_3 == 0xff) {
            field_0x2b8 = 1.0f;
        } else {
            field_0x2b8 = 0.01f * param_3;
        }
        if (param_4 == 0xff) {
            field_0x2bc = 1.0f;
        } else {
            field_0x2bc = 0.1f * param_4;
        }
        field_0x28c.setVolumeScale(3.0f * field_0x2bc);
        break;
    default:
        if (Z2GetSceneMgr()->getCurrentSceneNum() == 46) {
            switch (Z2GetSceneMgr()->getCurrentRoomNum()) {
            case 1:
                if (param_1 == 107) {
                    initFallSe(9, param_2, 0x82, 5);
                }
            case 0:
            case 5:
            case 6:
            case 9:
                if (param_1 == 100) {
                    initEtcSe(0x1e, param_2, param_3, param_4);
                }
                break;
            case 2:
                if (param_1 == 100) {
                    initEtcSe(0x1f, param_2, param_3, 20);
                } else if ((((param_1 == 103) || (param_1 == 104)) || (param_1 == 105)) ||
                           (param_1 == 106))
                {
                    initLv3WaterSe(115, param_2, param_3, param_4);
                }
                break;
            case 3:
                if (((param_1 == 100) || (param_1 == 101)) || (param_1 == 102)) {
                    initEtcSe(0x1e, param_2, param_3, param_4);
                } else if ((param_1 == 103) || (param_1 == 104)) {
                    initLv3WaterSe(115, param_2, param_3, param_4);
                } else if ((param_1 == 105) || (param_1 == 106)) {
                    initLv3WaterSe(117, param_2, param_3, param_4);
                } else if ((param_1 == 107) || (param_1 == 108)) {
                    initLv3WaterSe(111, param_2, param_3, 15);
                }
                break;
            case 7:
                if (param_1 == 103) {
                    initLv3WaterSe(115, param_2, param_3, param_4);
                } else if (param_1 == 107) {
                    initFallSe(9, param_2, 0x82, param_4);
                }
                break;
            case 8:
                if ((param_1 == 100) || (param_1 == 101)) {
                    initEtcSe(0x1e, param_2, param_3, param_4);
                } else if (param_1 == 103) {
                    initLv3WaterSe(115, param_2, param_3, param_4);
                } else if (param_1 == 107) {
                    initLv3WaterSe(111, param_2, param_3, param_4);
                }
                break;
            case 10:
                if (param_1 == 100) {
                    initEtcSe(0x1e, param_2, param_3, param_4);
                } else if (param_1 == 103) {
                    initLv3WaterSe(117, param_2, param_3, param_4);
                } else if (param_1 == 104) {
                    initLv3WaterSe(116, param_2, param_3, param_4);
                } else if (param_1 == 107) {
                    initFallSe(9, param_2, 0xa0, param_4);
                }
                break;
            case 0xb:
                if (param_1 == 100 || param_1 == 101) {
                    initEtcSe(0x1e, param_2, param_3, param_4);
                } else if (param_1 == 103) {
                    initLv3WaterSe(115, param_2, param_3, param_4);
                } else if (param_1 == 107) {
                    initFallSe(9, param_2, 0x82, param_4);
                }
                break;
            case 0xc:
                if (param_1 == 103) {
                    initLv3WaterSe(115, param_2, param_3, param_4);
                } else if (param_1 == 107) {
                    initLv3WaterSe(111, param_2, 0x82, param_4);
                }
                break;
            case 0xd:
                if ((param_1 == 100) || (param_1 == 101)) {
                    initEtcSe(0x1e, param_2, param_3, param_4);
                } else if (param_1 == 103) {
                    initLv3WaterSe(117, param_2, param_3, param_4);
                } else if (param_1 == 104) {
                    initLv3WaterSe(116, param_2, param_3, param_4);
                } else if (param_1 == 107) {
                    initFallSe(9, param_2, 0xa0, param_4);
                }
                break;
            }
        }
        break;
    }
}

/* 802C9F58-802CA794 2C4898 083C+00 2/0 1/1 0/0 .text registLv3WaterSePos__10Z2EnvSeMgrFUcP3Vec */
void Z2EnvSeMgr::registLv3WaterSePos(u8 param_1, Vec* param_2) {
    switch (param_1) {
    case 110:
    case 115:
        field_0x224.registMultiSePos(param_2);
        break;
    case 111:
    case 116:
        field_0x258.registMultiSePos(param_2);
        break;
    case 112:
    case 117:
    case 119:
        field_0x28c.registMultiSePos(param_2);
        break;
    default:
        switch (Z2GetSceneMgr()->getCurrentRoomNum()) {
        case 1:
            if (param_1 == 107) {
                mFallSeMgr.registMultiSePos(param_2);
            }
        case 0:
        case 5:
        case 6:
        case 9:
            if (param_1 == 100) {
                mEtcSeMgr.registMultiSePos(param_2);
            }
            break;
        case 2:
            if (param_1 == 100) {
                mEtcSeMgr.registMultiSePos(param_2);
            } else if (param_1 == 103 && dComIfGs_isSaveSwitch(8)) {
                field_0x224.registMultiSePos(param_2);
            } else if (param_1 == 104 && dComIfGs_isSaveSwitch(9)) {
                field_0x224.registMultiSePos(param_2);
            } else if (param_1 == 105 && dComIfGs_isSaveSwitch(8) && dComIfGs_isSaveSwitch(3)) {
                field_0x224.registMultiSePos(param_2);
            } else if (param_1 == 106 && dComIfGs_isSaveSwitch(9) && dComIfGs_isSaveSwitch(1)) {
                field_0x224.registMultiSePos(param_2);
            }
            break;
        case 3:
            if (param_1 == 100 && !dComIfGs_isSaveSwitch(8) && !dComIfGs_isSaveSwitch(9)) {
                mEtcSeMgr.registMultiSePos(param_2);
            } else if ((param_1 == 101 && dComIfGs_isSaveSwitch(8) &&
                        (!dComIfGs_isSaveSwitch(9))) ||
                       (!dComIfGs_isSaveSwitch(8) && dComIfGs_isSaveSwitch(9)))
            {
                mEtcSeMgr.registMultiSePos(param_2);
            } else if (param_1 == 102 && dComIfGs_isSaveSwitch(8) && dComIfGs_isSaveSwitch(9)) {
                mEtcSeMgr.registMultiSePos(param_2);
            }
            if (param_1 == 103 && dComIfGs_isSaveSwitch(8)) {
                field_0x224.registMultiSePos(param_2);
            }
            if (param_1 == 104 && dComIfGs_isSaveSwitch(9)) {
                field_0x224.registMultiSePos(param_2);
            }
            if (param_1 == 105 && dComIfGs_isSaveSwitch(8) && dComIfGs_isSaveSwitch(3)) {
                field_0x28c.registMultiSePos(param_2);
            } else if (param_1 == 107 && dComIfGs_isSaveSwitch(8) && !dComIfGs_isSaveSwitch(3)) {
                field_0x258.registMultiSePos(param_2);
            }
            if (param_1 == 106 && dComIfGs_isSaveSwitch(9) && dComIfGs_isSaveSwitch(1)) {
                field_0x28c.registMultiSePos(param_2);
            } else if (param_1 == 108 && dComIfGs_isSaveSwitch(9) && !dComIfGs_isSaveSwitch(1)) {
                field_0x258.registMultiSePos(param_2);
            }
            break;
        case 7:
            if (dComIfGs_isSaveSwitch(8)) {
                if (param_1 == 103) {
                    field_0x224.registMultiSePos(param_2);
                } else if (param_1 == 107) {
                    mFallSeMgr.registMultiSePos(param_2);
                }
            }
            break;
        case 8:
            if (dComIfGs_isSaveSwitch(9) && dComIfGs_isSaveSwitch(1)) {
                if (param_1 == 101) {
                    mEtcSeMgr.registMultiSePos(param_2);
                } else if (param_1 == 103) {
                    field_0x224.registMultiSePos(param_2);
                } else if (param_1 == 107) {
                    field_0x258.registMultiSePos(param_2);
                }
            } else if (param_1 == 100) {
                mEtcSeMgr.registMultiSePos(param_2);
            }
            break;
        case 10:
            if ((param_1 == 100) && dComIfGs_isSaveSwitch(0x31)) {
                mEtcSeMgr.registMultiSePos(param_2);
            } else if (param_1 == 103 && dComIfGs_isSaveSwitch(0x31)) {
                field_0x28c.registMultiSePos(param_2);
            } else if (param_1 == 104 && (dComIfGs_isSaveSwitch(8))) {
                field_0x258.registMultiSePos(param_2);
            } else if (param_1 == 107 && dComIfGs_isSaveSwitch(0x31)) {
                mFallSeMgr.registMultiSePos(param_2);
            }
            break;
        case 11:
            if (dComIfGs_isSaveSwitch(9)) {
                if (param_1 == 101) {
                    mEtcSeMgr.registMultiSePos(param_2);
                } else if (param_1 == 103) {
                    field_0x224.registMultiSePos(param_2);
                } else if (param_1 == 107) {
                    mFallSeMgr.registMultiSePos(param_2);
                }
            } else if (param_1 == 100) {
                mEtcSeMgr.registMultiSePos(param_2);
            }
            break;
        case 12:
            if (dComIfGs_isSaveSwitch(8) && dComIfGs_isSaveSwitch(3)) {
                if (param_1 == 103) {
                    field_0x224.registMultiSePos(param_2);
                } else if (param_1 == 107) {
                    field_0x258.registMultiSePos(param_2);
                }
            }
            break;
        case 13:
            if (dComIfGs_isSaveSwitch(0x30)) {
                if (param_1 == 101) {
                    mEtcSeMgr.registMultiSePos(param_2);
                } else if (param_1 == 103) {
                    field_0x28c.registMultiSePos(param_2);
                } else if ((param_1 == 104) && (dComIfGs_isSaveSwitch(9))) {
                    field_0x258.registMultiSePos(param_2);
                } else if (param_1 == 107) {
                    mFallSeMgr.registMultiSePos(param_2);
                }
            } else if (param_1 == 100) {
                mEtcSeMgr.registMultiSePos(param_2);
            }
        }
    }
}

/* 802CA794-802CAAC0 2C50D4 032C+00 1/1 1/1 0/0 .text            startLv3WaterSe__10Z2EnvSeMgrFSc */
void Z2EnvSeMgr::startLv3WaterSe(s8 param_1) {
    if (Z2GetSceneMgr()->getCurrentSceneNum() == 0x2e) {
        if (param_1 >= 0) {
            field_0x140 = param_1;
            return;
        }
        param_1 = field_0x140;
    }
    JAISoundID aJStack_60 = 0xffffffff;
    f32 dVar12 = param_1 / 127.0f;
    f32 maxVolume;
    f32 panPower;
    f32 dolbyPower;
    if (field_0x224.getPosCount() >= 0) {
        if (field_0x248 == 0x73) {
            aJStack_60 = Z2SE_ENV_WATER_WAY;
        } else if (field_0x248 == 0x6e) {
            aJStack_60 = Z2SE_ENV_WATERFALL_CALM;
        }
        maxVolume = field_0x24c * field_0x224.getMaxVolume();
        panPower = field_0x224.getPanPower();
        dolbyPower = field_0x224.getDolbyPower();
        field_0x240.startEnvSeLevel(aJStack_60, dVar12,
                                     maxVolume, panPower, dolbyPower,
                                     field_0x250, 0);
        field_0x224.resetMultiSePos();
    }
    if (field_0x258.getPosCount() >= 0) {
        if (field_0x27c == 0x74) {
            aJStack_60 = Z2SE_ENV_WATER_WAY;
        } else if (field_0x27c == 0x6f) {
            aJStack_60 = Z2SE_ENV_WATERFALL_CALM;
        }
        maxVolume = field_0x280 * field_0x258.getMaxVolume();
        panPower = field_0x258.getPanPower();
        dolbyPower = field_0x258.getDolbyPower();
        field_0x274.startEnvSeLevel(aJStack_60, dVar12,
                                     maxVolume, panPower, dolbyPower,
                                     field_0x284, 0);
        field_0x258.resetMultiSePos();
    }
    if (field_0x28c.getPosCount() >= 0) {
        if (field_0x2b0 == 0x75) {
            aJStack_60 = Z2SE_ENV_WATER_WAY_L;
        } else if (field_0x2b0 == 0x70) {
            aJStack_60 = Z2SE_ENV_WATERFALL_CALM;
        } else if (field_0x2b0 == 0x77) {
            aJStack_60 = Z2SE_ENV_VALLEY_WIND;
        }
        maxVolume = field_0x2b4 * field_0x28c.getMaxVolume();
        panPower = field_0x28c.getPanPower();
        dolbyPower = field_0x28c.getDolbyPower();
        field_0x2a8.startEnvSeLevel(aJStack_60, dVar12,
                                     maxVolume, panPower, dolbyPower,
                                     field_0x2b8, 0);
        field_0x28c.resetMultiSePos();
    }
    startRiverSe(param_1);
    startFallSe(param_1);
    startEtcSe(param_1);
}
