//
// Generated By: dol2asm
// Translation Unit: d/meter/d_meter2_draw
//

#include "d/meter/d_meter2_draw.h"
#include "JSystem/J2DGraph/J2DAnmLoader.h"
#include "JSystem/J2DGraph/J2DScreen.h"
#include "JSystem/JKernel/JKRExpHeap.h"
#include "d/a/d_a_alink.h"
#include "d/d_kantera_icon_meter.h"
#include "d/meter/d_meter_HIO.h"
#include "d/msg/d_msg_object.h"
#include "d/pane/d_pane_class.h"
#include "dol2asm.h"
#include "dolphin/types.h"
#include "global.h"

//
// Forward References:
//

extern "C" void __ct__13dMeter2Draw_cFP10JKRExpHeap();
extern "C" void __dt__13dMeter2Draw_cFv();
extern "C" void init__13dMeter2Draw_cFv();
extern "C" void exec__13dMeter2Draw_cFUl();
extern "C" void draw__13dMeter2Draw_cFv();
extern "C" void initLife__13dMeter2Draw_cFv();
extern "C" void initMagic__13dMeter2Draw_cFv();
extern "C" void initLightDrop__13dMeter2Draw_cFv();
extern "C" void initRupeeKey__13dMeter2Draw_cFv();
extern "C" void initButton__13dMeter2Draw_cFv();
extern "C" void initButtonCross__13dMeter2Draw_cFv();
extern "C" void playPikariBckAnimation__13dMeter2Draw_cFf();
extern "C" void setPikariBpkAnimation__13dMeter2Draw_cFP11J2DAnmColor();
extern "C" void playPikariBpkAnimation__13dMeter2Draw_cFf();
extern "C" void playOxygenBpkAnimation__13dMeter2Draw_cFP11J2DAnmColor();
extern "C" void
drawPikari__13dMeter2Draw_cFP8CPaneMgrPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc();
extern "C" void
drawPikari__13dMeter2Draw_cFffPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc();
extern "C" void
drawPikariHakusha__13dMeter2Draw_cFffffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColor();
extern "C" void changeTextureLife__13dMeter2Draw_cFibUc();
extern "C" void drawLife__13dMeter2Draw_cFssff();
extern "C" void setAlphaLifeChange__13dMeter2Draw_cFb();
extern "C" void setAlphaLifeAnimeMin__13dMeter2Draw_cFv();
extern "C" void setAlphaLifeAnimeMax__13dMeter2Draw_cFv();
extern "C" void drawKanteraScreen__13dMeter2Draw_cFUc();
extern "C" void drawMagic__13dMeter2Draw_cFssff();
extern "C" void setAlphaMagicChange__13dMeter2Draw_cFb();
extern "C" void drawKantera__13dMeter2Draw_cFllff();
extern "C" void setAlphaKanteraChange__13dMeter2Draw_cFb();
extern "C" void setAlphaKanteraAnimeMin__13dMeter2Draw_cFv();
extern "C" void setAlphaKanteraAnimeMax__13dMeter2Draw_cFv();
extern "C" void drawOxygen__13dMeter2Draw_cFllff();
extern "C" void setAlphaOxygenChange__13dMeter2Draw_cFb();
extern "C" void setAlphaOxygenAnimeMin__13dMeter2Draw_cFv();
extern "C" void setAlphaOxygenAnimeMax__13dMeter2Draw_cFv();
extern "C" void drawLightDrop__13dMeter2Draw_cFUcUcffffUc();
extern "C" void setAlphaLightDropChange__13dMeter2Draw_cFb();
extern "C" void getNowLightDropRateCalc__13dMeter2Draw_cFv();
extern "C" void setAlphaLightDropAnimeMin__13dMeter2Draw_cFv();
extern "C" void setAlphaLightDropAnimeMax__13dMeter2Draw_cFv();
extern "C" void drawRupee__13dMeter2Draw_cFs();
extern "C" void setAlphaRupeeChange__13dMeter2Draw_cFb();
extern "C" void setAlphaRupeeAnimeMin__13dMeter2Draw_cFv();
extern "C" void setAlphaRupeeAnimeMax__13dMeter2Draw_cFv();
extern "C" void drawKey__13dMeter2Draw_cFs();
extern "C" void setAlphaKeyChange__13dMeter2Draw_cFb();
extern "C" void setAlphaKeyAnimeMin__13dMeter2Draw_cFv();
extern "C" void setAlphaKeyAnimeMax__13dMeter2Draw_cFv();
extern "C" void drawButtonA__13dMeter2Draw_cFUcfffffbb();
extern "C" void drawButtonB__13dMeter2Draw_cFUcbfffffb();
extern "C" void drawButtonR__13dMeter2Draw_cFUcUcbb();
extern "C" void drawButtonZ__13dMeter2Draw_cFUc();
extern "C" void drawButton3D__13dMeter2Draw_cFUc();
extern "C" void drawButtonC__13dMeter2Draw_cFUcb();
extern "C" void drawButtonS__13dMeter2Draw_cFUc();
extern "C" void drawButtonBin__13dMeter2Draw_cFUc();
extern "C" void drawButtonXY__13dMeter2Draw_cFiUcUcbb();
extern "C" void getButtonCrossParentInitTransY__13dMeter2Draw_cFv();
extern "C" void drawButtonCross__13dMeter2Draw_cFff();
extern "C" void setAlphaButtonCrossAnimeMin__13dMeter2Draw_cFv();
extern "C" void setAlphaButtonCrossAnimeMax__13dMeter2Draw_cFv();
extern "C" void setAlphaButtonCrossItemAnimeMin__13dMeter2Draw_cFv();
extern "C" void setAlphaButtonCrossItemAnimeMax__13dMeter2Draw_cFv();
extern "C" void setAlphaButtonCrossMapAnimeMin__13dMeter2Draw_cFv();
extern "C" void setAlphaButtonCrossMapAnimeMax__13dMeter2Draw_cFv();
extern "C" void setAlphaButtonChange__13dMeter2Draw_cFb();
extern "C" void setAlphaButtonAnimeMin__13dMeter2Draw_cFv();
extern "C" void setAlphaButtonAnimeMax__13dMeter2Draw_cFv();
extern "C" void setAlphaButtonAAnimeMin__13dMeter2Draw_cFv();
extern "C" void setAlphaButtonAAnimeMax__13dMeter2Draw_cFv();
extern "C" void setAlphaButtonBAnimeMin__13dMeter2Draw_cFv();
extern "C" void setAlphaButtonBAnimeMax__13dMeter2Draw_cFv();
extern "C" void setButtonIconAAlpha__13dMeter2Draw_cFUcUlb();
extern "C" void setButtonIconBAlpha__13dMeter2Draw_cFUcUlb();
extern "C" void setButtonIconMidonaAlpha__13dMeter2Draw_cFUl();
extern "C" void setButtonIconAlpha__13dMeter2Draw_cFiUcUlb();
extern "C" void getNumberTexture__13dMeter2Draw_cFi();
extern "C" void getActionString__13dMeter2Draw_cFUcUcPUc();
extern "C" void changeTextureItemB__13dMeter2Draw_cFUc();
extern "C" void changeTextureItemXY__13dMeter2Draw_cFiUc();
extern "C" void setAlphaAnimeMin__13dMeter2Draw_cFP13CPaneMgrAlphas();
extern "C" void setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas();
extern "C" void setItemNum__13dMeter2Draw_cFUcUcUc();
extern "C" void drawItemNum__13dMeter2Draw_cFUcf();
extern "C" void drawKanteraMeter__13dMeter2Draw_cFUcf();
extern "C" void isButtonVisible__13dMeter2Draw_cFv();
extern "C" void setItemParamX__13dMeter2Draw_cFUc();
extern "C" void setItemParamY__13dMeter2Draw_cFUc();
extern "C" void setItemParamZ__13dMeter2Draw_cFUc();
extern "C" void setItemParamB__13dMeter2Draw_cFUc();
extern "C" void getFishingType__13dMeter2Draw_cFv();
extern "C" void getCanoeFishing__13dMeter2Draw_cFv();
extern "C" void getCameraSubject__13dMeter2Draw_cFv();
extern "C" void getItemSubject__13dMeter2Draw_cFv();
extern "C" void getPlayerSubject__13dMeter2Draw_cFv();
extern "C" void isBButtonShow__13dMeter2Draw_cFb();
extern "C" void getButtonTimer__13dMeter2Draw_cFv();
extern "C" extern char const* const d_meter_d_meter2_draw__stringBase0;

//
// External References:
//

extern "C" void mDoExt_setCurrentHeap__FP7JKRHeap();
extern "C" void mDoExt_getMesgFont__Fv();
extern "C" void dComIfGs_getMaxLifeGauge__Fv();
extern "C" void dComIfGp_getSelectItem__Fi();
extern "C" void getItem__17dSv_player_item_cCFib();
extern "C" void getLightDropNum__16dSv_light_drop_cCFUc();
extern "C" void isLightDropGetFlag__16dSv_light_drop_cCFUc();
extern "C" void isEventBit__11dSv_event_cCFUs();
extern "C" void isBottleItem__FUc();
extern "C" void dCam_getBody__Fv();
extern "C" void __ct__15dKantera_icon_cFv();
extern "C" void setAlphaRate__15dKantera_icon_cFf();
extern "C" void setPos__15dKantera_icon_cFff();
extern "C" void setScale__15dKantera_icon_cFff();
extern "C" void setNowGauge__15dKantera_icon_cFUsUs();
extern "C" void getString__13dMeter2Info_cFUlPcP14JMSMesgEntry_c();
extern "C" void getStringKana__13dMeter2Info_cFUlPcP14JMSMesgEntry_c();
extern "C" void getStringKanji__13dMeter2Info_cFUlPcP14JMSMesgEntry_c();
extern "C" void isDirectUseItem__13dMeter2Info_cFi();
extern "C" void
readItemTexture__13dMeter2Info_cFUcPvP10J2DPicturePvP10J2DPicturePvP10J2DPicturePvP10J2DPicturei();
extern "C" void dMeter2Info_getNumberTextureName__Fi();
extern "C" void dMeter2Info_isMapOpenCheck__Fv();
extern "C" void dMeter2Info_isItemOpenCheck__Fv();
extern "C" void dMeter2Info_set2DVibration__Fv();
extern "C" void dMsgObject_getGroupID__Fv();
extern "C" void isHowlMessage__12dMsgObject_cFv();
extern "C" void getStatus__12dMsgObject_cFv();
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
extern "C" void setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor();
extern "C" void paneTrans__8CPaneMgrFff();
extern "C" void getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs();
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
extern "C" void __ct__13CPaneMgrAlphaFP9J2DScreenUxUcP10JKRExpHeap();
extern "C" void show__13CPaneMgrAlphaFv();
extern "C" void hide__13CPaneMgrAlphaFv();
extern "C" void isVisible__13CPaneMgrAlphaFv();
extern "C" void setAlphaRate__13CPaneMgrAlphaFf();
extern "C" void getAlphaRate__13CPaneMgrAlphaFv();
extern "C" void cLib_addCalc2__FPffff();
extern "C" void seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc();
extern "C" void seStartLevel__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc();
extern "C" void alloc__7JKRHeapFUli();
extern "C" void free__7JKRHeapFPv();
extern "C" void* __nw__FUl();
extern "C" void __dl__FPv();
extern "C" void getGlbResource__13JKRFileLoaderFPCcP13JKRFileLoader();
extern "C" void getGlbResource__10JKRArchiveFUlPCcP10JKRArchive();
extern "C" void appendChild__7J2DPaneFP7J2DPane();
extern "C" void rotate__7J2DPaneFff13J2DRotateAxisf();
extern "C" void setBasePosition__7J2DPaneF15J2DBasePosition();
extern "C" void getGlbVtx__7J2DPaneCFUc();
extern "C" void animationTransform__7J2DPaneFv();
extern "C" void __ct__9J2DScreenFv();
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive();
extern "C" void draw__9J2DScreenFffPC14J2DGrafContext();
extern "C" void animation__9J2DScreenFv();
extern "C" void __ct__10J2DPictureFPC7ResTIMG();
extern "C" void func_802FC800();
extern "C" void getStringPtr__10J2DTextBoxCFv();
extern "C" void setString__10J2DTextBoxFsPCce();
extern "C" void load__20J2DAnmLoaderDataBaseFPCv();
extern "C" void _savegpr_15();
extern "C" void _savegpr_20();
extern "C" void _savegpr_21();
extern "C" void _savegpr_22();
extern "C" void _savegpr_24();
extern "C" void _savegpr_25();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_15();
extern "C" void _restgpr_20();
extern "C" void _restgpr_21();
extern "C" void _restgpr_22();
extern "C" void _restgpr_24();
extern "C" void _restgpr_25();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" extern void* __vt__12dDlst_base_c[3];
extern "C" void* item_resource__10dItem_data[1530];
extern "C" extern u8 g_MsgObject_HIO_c[1040];
extern "C" u8 mAudioMgrPtr__10Z2AudioMgr[4 + 4 /* padding */];

//
// Declarations:
//

/* ############################################################################################## */
/* 80398258-80398280 0248B8 0028+00 4/4 0/0 0/0 .rodata          a_tag$3949 */
static u64 const a_tag[5] = {
    'cont_at1', 'cont_at2', 'cont_at3', 'cont_at4', 'cont_at',
};

/* 80398280-803982A8 0248E0 0028+00 0/1 0/0 0/0 .rodata          b_tag$3950 */
#pragma push
#pragma force_active on
static u64 const b_tag[5] = {
    'cont_bt1', 'cont_bt2', 'cont_bt3', 'cont_bt4', 'cont_bt',
};
#pragma pop

/* 803982A8-803982D0 024908 0028+00 0/1 0/0 0/0 .rodata          z_tag$3951 */
#pragma push
#pragma force_active on
static u64 const z_tag[5] = {
    'cont_zt1', 'cont_zt2', 'cont_zt3', 'cont_zt4', 'cont_rt',
};
#pragma pop

/* 803982D0-803982F8 024930 0028+00 0/1 0/0 0/0 .rodata          x_tag$3952 */
#pragma push
#pragma force_active on
static u64 const x_tag[5] = {
    'cont_xt1', 'cont_xt2', 'cont_xt3', 'cont_xt4', 'cont_xt5',
};
#pragma pop

/* 803982F8-80398320 024958 0028+00 0/1 0/0 0/0 .rodata          y_tag$3953 */
#pragma push
#pragma force_active on
static u64 const y_tag[5] = {
    'cont_yt1', 'cont_yt2', 'cont_yt3', 'cont_yt4', 'cont_yt5',
};
#pragma pop

/* 803988D0-803988D0 024F30 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_803988D0 = "zel_00.bmg";
SECTION_DEAD static char const* const stringBase_803988DB = "zel_01.bmg";
SECTION_DEAD static char const* const stringBase_803988E6 = "zel_02.bmg";
SECTION_DEAD static char const* const stringBase_803988F1 = "zel_03.bmg";
SECTION_DEAD static char const* const stringBase_803988FC = "zel_04.bmg";
SECTION_DEAD static char const* const stringBase_80398907 = "zel_05.bmg";
SECTION_DEAD static char const* const stringBase_80398912 = "zel_06.bmg";
SECTION_DEAD static char const* const stringBase_8039891D = "zel_07.bmg";
SECTION_DEAD static char const* const stringBase_80398928 = "zel_08.bmg";
SECTION_DEAD static char const* const stringBase_80398933 = "zel_99.bmg";
SECTION_DEAD static char const* const stringBase_8039893E = "zel_unit.bmg";
SECTION_DEAD static char const* const stringBase_8039894B = "zelda_game_image.blo";
SECTION_DEAD static char const* const stringBase_80398960 = "zelda_game_image_kantera.blo";
SECTION_DEAD static char const* const stringBase_8039897D = "zelda_icon_pikari.blo";
SECTION_DEAD static char const* const stringBase_80398993 = "zelda_icon_pikari.bck";
SECTION_DEAD static char const* const stringBase_803989A9 = "zelda_icon_pikari.bpk";
SECTION_DEAD static char const* const stringBase_803989BF = "";
#pragma pop

/* 803BF328-803BF350 -00001 0028+00 1/1 0/0 0/0 .data            bmg_filename$3954 */
SECTION_DATA static const char* bmg_filename[10] = {
    "zel_00.bmg", "zel_01.bmg", "zel_02.bmg", "zel_03.bmg", "zel_04.bmg",
    "zel_05.bmg", "zel_06.bmg", "zel_07.bmg", "zel_08.bmg", "zel_99.bmg",
};

/* 803BF350-803BF554 01C470 0204+00 1/1 0/0 0/0 .data            i_action_num$8471 */
SECTION_DATA static int i_action_num[129] = {
    0,    1001, 1002, 1003, 1004, 1005, 1006, 1007, 1387, 1009, 1010, 1011, 1012, 1013, 1014,
    1015, 1033, 1016, 1017, 1018, 1019, 1020, 1045, 1022, 1026, 1027, 1028, 1029, 1030, 1024,
    1031, 1025, 1023, 1045, 1036, 1032, 93,   0,    0,    0,    1035, 1034, 1037, 1038, 1039,
    1040, 1041, 998,  1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
    1055, 1056, 1057, 1058, 1059, 1070, 1060, 1061, 1062, 1063, 1064, 1067, 1065, 1066, 1211,
    1069, 1021, 1072, 1073, 0,    1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
    1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1904, 1097, 1098,
    1099, 1100, 1150, 1149, 1148, 1377, 1147, 1145, 1146, 1161, 1162, 1163, 1164, 1165, 1166,
    1144, 982,  983,  1143, 1160, 1319, 1314, 1399, 1008,
};

/* 803BF554-803BF578 -00001 0024+00 1/1 0/0 0/0 .data            @9008 */
SECTION_DATA static void* lit_9008[9] = {
    (void*)(((char*)setItemParamX__13dMeter2Draw_cFUc) + 0x8C),
    (void*)(((char*)setItemParamX__13dMeter2Draw_cFUc) + 0x1B8),
    (void*)(((char*)setItemParamX__13dMeter2Draw_cFUc) + 0x1B8),
    (void*)(((char*)setItemParamX__13dMeter2Draw_cFUc) + 0xC8),
    (void*)(((char*)setItemParamX__13dMeter2Draw_cFUc) + 0x140),
    (void*)(((char*)setItemParamX__13dMeter2Draw_cFUc) + 0x104),
    (void*)(((char*)setItemParamX__13dMeter2Draw_cFUc) + 0x1B8),
    (void*)(((char*)setItemParamX__13dMeter2Draw_cFUc) + 0x1B8),
    (void*)(((char*)setItemParamX__13dMeter2Draw_cFUc) + 0x17C),
};

/* 803BF578-803BF59C -00001 0024+00 1/1 0/0 0/0 .data            @9030 */
SECTION_DATA static void* lit_9030[9] = {
    (void*)(((char*)setItemParamY__13dMeter2Draw_cFUc) + 0x8C),
    (void*)(((char*)setItemParamY__13dMeter2Draw_cFUc) + 0x1A4),
    (void*)(((char*)setItemParamY__13dMeter2Draw_cFUc) + 0x1A4),
    (void*)(((char*)setItemParamY__13dMeter2Draw_cFUc) + 0xC4),
    (void*)(((char*)setItemParamY__13dMeter2Draw_cFUc) + 0x130),
    (void*)(((char*)setItemParamY__13dMeter2Draw_cFUc) + 0xFC),
    (void*)(((char*)setItemParamY__13dMeter2Draw_cFUc) + 0x1A4),
    (void*)(((char*)setItemParamY__13dMeter2Draw_cFUc) + 0x1A4),
    (void*)(((char*)setItemParamY__13dMeter2Draw_cFUc) + 0x168),
};

/* 803BF59C-803BF5C0 -00001 0024+00 1/1 0/0 0/0 .data            @9053 */
SECTION_DATA static void* lit_9053[9] = {
    (void*)(((char*)setItemParamZ__13dMeter2Draw_cFUc) + 0x8C),
    (void*)(((char*)setItemParamZ__13dMeter2Draw_cFUc) + 0x1B8),
    (void*)(((char*)setItemParamZ__13dMeter2Draw_cFUc) + 0x1B8),
    (void*)(((char*)setItemParamZ__13dMeter2Draw_cFUc) + 0xC8),
    (void*)(((char*)setItemParamZ__13dMeter2Draw_cFUc) + 0x140),
    (void*)(((char*)setItemParamZ__13dMeter2Draw_cFUc) + 0x104),
    (void*)(((char*)setItemParamZ__13dMeter2Draw_cFUc) + 0x1B8),
    (void*)(((char*)setItemParamZ__13dMeter2Draw_cFUc) + 0x1B8),
    (void*)(((char*)setItemParamZ__13dMeter2Draw_cFUc) + 0x17C),
};

/* 803BF5C0-803BF750 -00001 0190+00 1/1 0/0 0/0 .data            @9106 */
SECTION_DATA static void* lit_9106[100] = {
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x248),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x1D0),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x11C),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x1D0),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x20C),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x158),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x284),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x194),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x20C),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x20C),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x2C0),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0xE0),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x248),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x248),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0xE0),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0xE0),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0xE0),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0xE0),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0xE0),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x248),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x248),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x248),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0xE0),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x304),
    (void*)(((char*)setItemParamB__13dMeter2Draw_cFUc) + 0x248),
};

/* 803BF750-803BF760 01C870 0010+00 2/2 0/0 0/0 .data            __vt__13dMeter2Draw_c */
SECTION_DATA extern void* __vt__13dMeter2Draw_c[4] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)draw__13dMeter2Draw_cFv,
    (void*)__dt__13dMeter2Draw_cFv,
};

/* 80454880-80454884 002E80 0004+00 38/38 0/0 0/0 .sdata2          @4182 */
SECTION_SDATA2 static u8 lit_4182[4] = {
    0x00,
    0x00,
    0x00,
    0x00,
};

/* 80454884-80454888 002E84 0004+00 14/14 0/0 0/0 .sdata2          @4183 */
SECTION_SDATA2 static f32 lit_4183 = 1.0f;

/* 80454888-8045488C 002E88 0004+00 5/5 0/0 0/0 .sdata2          @4184 */
SECTION_SDATA2 static f32 lit_4184 = 17.0f;

/* 8045488C-80454890 002E8C 0004+00 1/1 0/0 0/0 .sdata2          @4185 */
SECTION_SDATA2 static f32 lit_4185 = 20.0f;

/* 8020FAB4-802102F8 20A3F4 0844+00 0/0 1/1 0/0 .text            __ct__13dMeter2Draw_cFP10JKRExpHeap
 */
#ifdef NONMATCHING
dMeter2Draw_c::dMeter2Draw_c(JKRExpHeap* p_heap) {
    mp_heap = p_heap;
    JKRHeap* heap = mDoExt_setCurrentHeap(dComIfGp_getMsgExpHeap());

    void* msg_res = JKRGetTypeResource('ROOT', "zel_00.bmg", dComIfGp_getMsgDtArchive(0));
    dMeter2Info_setMsgResource(msg_res);

    void* stg_msg_res = JKRGetTypeResource('ROOT', bmg_filename[dMsgObject_getGroupID()],
                                           dComIfGp_getMsgDtArchive(1));
    dMeter2Info_setStageMsgResource(stg_msg_res);

    void* msg_unit_res = JKRGetTypeResource('ROOT', "zel_unit.bmg", dComIfGp_getMsgDtArchive(0));
    dMeter2Info_setMsgUnitResource(msg_unit_res);
    mDoExt_setCurrentHeap(heap);

    mpScreen = new J2DScreen();
    mpScreen->setPriority("zelda_game_image.blo", 0x20000, dComIfGp_getMain2DArchive());
    dPaneClass_showNullPane(mpScreen);
    mpScreen->search('ju_ring5')->hide();

    field_0x73c = 0.0f;
    for (int i = 0; i < 2; i++) {
        mpKanteraMeter[i] = new dKantera_icon_c();
    }
    mpKanteraScreen = new J2DScreen();
    mpKanteraScreen->setPriority("zelda_game_image_kantera.blo", 0x20000,
                                 dComIfGp_getMain2DArchive());
    dPaneClass_showNullPane(mpKanteraScreen);

    mpPikariScreen = new J2DScreen();
    mpPikariScreen->setPriority("zelda_icon_pikari.blo", 0x20000, dComIfGp_getMain2DArchive());
    dPaneClass_showNullPane(mpPikariScreen);
    mpPikariParent = new CPaneMgr(mpPikariScreen, 'pika_n', 0, NULL);
    field_0x548 = ((J2DPicture*)mpPikariScreen->search('pika00'))->getBlack();
    field_0x54c = ((J2DPicture*)mpPikariScreen->search('pika00'))->getWhite();
    i_OSInitFastCast();
    void* pikari_bck = JKRGetNameResource("zelda_icon_pikari.bck", dComIfGp_getMain2DArchive());
    mPikariBck = (J2DAnmTransformKey*)J2DAnmLoaderDataBase::load(pikari_bck);
    playPikariBckAnimation(1.0f);
    void* pikari_bpk = JKRGetNameResource("zelda_icon_pikari.bpk", dComIfGp_getMain2DArchive());
    mPikariBpk = (J2DAnmColorKey*)J2DAnmLoaderDataBase::load(pikari_bpk);
    mPikariBpk->searchUpdateMaterialID(mpPikariScreen);
    playPikariBpkAnimation(1.0f);

    mpParent = new CPaneMgr(mpScreen, 'n_all', 2, NULL);
    for (int i = 0; i < 5; i++) {
        mpAText[i] = new CPaneMgr(mpScreen, a_tag[i], 0, NULL);
        ((J2DTextBox*)mpAText[i]->getPanePtr())->setString(64, "");
        ((J2DTextBox*)mpAText[i]->getPanePtr())->setFont(mDoExt_getMesgFont());
        ((J2DTextBox*)mpAText[i]->getPanePtr())->setCharSpace(g_drawHIO.mAButtonFontSpacing);

        mpBText[i] = new CPaneMgr(mpScreen, b_tag[i], 0, NULL);
        ((J2DTextBox*)mpBText[i]->getPanePtr())->setString(64, "");
        ((J2DTextBox*)mpBText[i]->getPanePtr())->setFont(mDoExt_getMesgFont());

        mpXYText[i][2] = new CPaneMgr(mpScreen, z_tag[i], 0, NULL);
        ((J2DTextBox*)mpXYText[i][2]->getPanePtr())->setString(64, "");
        ((J2DTextBox*)mpXYText[i][2]->getPanePtr())->setFont(mDoExt_getMesgFont());

        mpXYText[i][0] = new CPaneMgr(mpScreen, x_tag[i], 0, NULL);
        ((J2DTextBox*)mpXYText[i][0]->getPanePtr())->setString(64, "");
        ((J2DTextBox*)mpXYText[i][0]->getPanePtr())->setFont(mDoExt_getMesgFont());

        mpXYText[i][1] = new CPaneMgr(mpScreen, y_tag[i], 0, NULL);
        ((J2DTextBox*)mpXYText[i][1]->getPanePtr())->setString(64, "");
        ((J2DTextBox*)mpXYText[i][1]->getPanePtr())->setFont(mDoExt_getMesgFont());
    }

    J2DTextBox::TFontSize font_size = {lit_4184, lit_4185};
    for (int i = 0; i < 5; i++) {
        ((J2DTextBox*)mpAText[i]->getPanePtr())->setFontSize(font_size);
        ((J2DTextBox*)mpBText[i]->getPanePtr())->setFontSize(font_size);
        ((J2DTextBox*)mpXYText[i][2]->getPanePtr())->setFontSize(font_size);
        ((J2DTextBox*)mpXYText[i][0]->getPanePtr())->setFontSize(font_size);
        ((J2DTextBox*)mpXYText[i][1]->getPanePtr())->setFontSize(font_size);
    }

    init();
    field_0xa8 = 0;
    field_0x1e4 = 0;
    field_0x2fc = 0;
    field_0x36c = 0;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMeter2Draw_c::dMeter2Draw_c(JKRExpHeap* param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/__ct__13dMeter2Draw_cFP10JKRExpHeap.s"
}
#pragma pop
#endif

/* 802102F8-80210FB0 20AC38 0CB8+00 1/0 0/0 0/0 .text            __dt__13dMeter2Draw_cFv */
dMeter2Draw_c::~dMeter2Draw_c() {
    dComIfGp_getMsgDtArchive(0)->removeResource(dMeter2Info_getMsgResource());
    dComIfGp_getMsgDtArchive(0)->removeResource(dMeter2Info_getMsgUnitResource());
    dComIfGp_getItemIconArchive()->removeResourceAll();

    delete mpScreen;
    mpScreen = NULL;

    delete mpKanteraScreen;
    mpKanteraScreen = NULL;

    for (int i = 0; i < 2; i++) {
        delete mpKanteraMeter[i];
        mpKanteraMeter[i] = NULL;
    }

    delete mpParent;
    mpParent = NULL;

    delete mpPikariScreen;
    mpPikariScreen = NULL;

    delete mpPikariParent;
    mpPikariParent = NULL;

    delete mPikariBck;
    mPikariBck = NULL;

    delete mPikariBpk;
    mPikariBpk = NULL;

    for (int i = 0; i < 5; i++) {
        delete mpAText[i];
        mpAText[i] = NULL;

        delete mpBText[i];
        mpBText[i] = NULL;

        for (int j = 0; j < 3; j++) {
            delete mpXYText[i][j];
            mpXYText[i][j] = NULL;
        }
    }

    delete mpLifeParent;
    mpLifeParent = NULL;

    for (int i = 0; i < 20; i++) {
        delete mpLifeParts[i];
        mpLifeParts[i] = NULL;

        delete mpHeartMask[i];
        mpHeartMask[i] = NULL;

        delete mpHeartBase[i];
        mpHeartBase[i] = NULL;

        delete mpLifeTexture[i][0];
        mpLifeTexture[i][0] = NULL;

        delete mpLifeTexture[i][1];
        mpLifeTexture[i][1] = NULL;
    }

    delete mpBigHeart;
    mpBigHeart = NULL;

    delete mpMagicParent;
    mpMagicParent = NULL;

    delete mpMagicBase;
    mpMagicBase = NULL;

    delete mpMagicFrameL;
    mpMagicFrameL = NULL;

    delete mpMagicFrameR;
    mpMagicFrameR = NULL;

    for (int i = 0; i < 3; i++) {
        delete mpOxygenBpk[i];
        mpOxygenBpk[i] = NULL;
    }

    delete mpMagicMeter;
    mpMagicMeter = NULL;

    for (int i = 0; i < 2; i++) {
        delete mpSIParent[i];
        mpSIParent[i] = NULL;
    }

    delete mpLightDropParent;
    mpLightDropParent = NULL;

    for (int i = 0; i < 16; i++) {
        for (int j = 0; j < 3; j++) {
            if (mpSIParts[i][j] != NULL) {
                delete mpSIParts[i][j];
                mpSIParts[i][j] = NULL;
            }
        }
    }

    delete mpRupeeKeyParent;
    mpRupeeKeyParent = NULL;

    for (int i = 0; i < 4; i++) {
        delete mpRupeeTexture[i][0];
        mpRupeeTexture[i][0] = NULL;

        delete mpRupeeTexture[i][1];
        mpRupeeTexture[i][1] = NULL;
    }

    for (int i = 0; i < 3; i++) {
        delete mpRupeeParent[i];
        mpRupeeParent[i] = NULL;
    }

    for (int i = 0; i < 5; i++) {
        delete mpKeyTexture[i];
        mpKeyTexture[i] = NULL;
    }

    delete mpKeyParent;
    mpKeyParent = NULL;

    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            mp_heap->free(mpItemBTex[i][j]);
            mpItemBTex[i][j] = NULL;
        }
    }

    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 2; k++) {
                mp_heap->free(mpItemXYTex[i][j][k]);
                mpItemXYTex[i][j][k] = NULL;
            }
        }
    }

    delete mpItemB;
    mpItemB = NULL;
    mpItemBPane = NULL;

    for (int i = 0; i < 2; i++) {
        if (mpItemXY[i] != NULL) {
            delete mpItemXY[i];
            mpItemXY[i] = NULL;
        }
    }

    delete mpItemR;
    mpItemR = NULL;

    for (int i = 0; i < 3; i++) {
        mpItemXYPane[i] = NULL;
    }

    delete mpLightB;
    mpLightB = NULL;

    for (int i = 0; i < 3; i++) {
        if (mpLightXY[i] != NULL) {
            delete mpLightXY[i];
            mpLightXY[i] = NULL;
        }
    }

    delete mpBTextA;
    mpBTextA = NULL;

    delete mpBTextB;
    mpBTextB = NULL;

    for (int i = 0; i < 3; i++) {
        if (mpBTextXY[i] != NULL) {
            delete mpBTextXY[i];
            mpBTextXY[i] = NULL;
        }
    }

    delete mpTextA;
    mpTextA = NULL;

    delete mpTextB;
    mpTextB = NULL;

    for (int i = 0; i < 3; i++) {
        delete mpTextXY[i];
        mpTextXY[i] = NULL;
    }

    delete mpTextI;
    mpTextI = NULL;

    delete mpTextM;
    mpTextM = NULL;

    for (int i = 0; i < 5; i++) {
        if (mpJujiI[i] != NULL) {
            delete mpJujiI[i];
            mpJujiI[i] = NULL;
        }

        if (mpJujiM[i] != NULL) {
            delete mpJujiM[i];
            mpJujiM[i] = NULL;
        }
    }

    delete mpButtonParent;
    mpButtonParent = NULL;

    delete mpButtonA;
    mpButtonA = NULL;

    delete mpButtonB;
    mpButtonB = NULL;

    delete mpButtonMidona;
    mpButtonMidona = NULL;

    for (int i = 0; i < 3; i++) {
        delete mpButtonXY[i];
        mpButtonXY[i] = NULL;
    }

    if (mpUzu != NULL) {
        delete mpUzu;
        mpUzu = NULL;
    }

    delete mpButtonCrossParent;
    mpButtonCrossParent = NULL;

    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
            if (mpItemNumTex[i][j] != NULL) {
                delete mpItemNumTex[i][j];
                mpItemNumTex[i][j] = NULL;
            }
        }
    }

    for (int i = 0; i < 3; i++) {
        if (field_0x9c[i] != NULL) {
            delete field_0x9c[i];
            field_0x9c[i] = NULL;
        }
    }
}

/* 80210FB0-8021135C 20B8F0 03AC+00 1/1 0/0 0/0 .text            init__13dMeter2Draw_cFv */
void dMeter2Draw_c::init() {
    f32 tmp_0 = FLOAT_LABEL(lit_4182);
    field_0x608 = tmp_0;
    field_0x60c = tmp_0;

    for (int i = 0; i < 3; i++) {
        field_0x620[i] = tmp_0;
        field_0x610[i] = tmp_0;
    }

    f32 tmp_0_1 = FLOAT_LABEL(lit_4182);
    field_0x61c = tmp_0_1;
    for (int i = 0; i < 16; i++) {
        field_0x62c[i] = tmp_0_1;
        field_0x66c[i] = tmp_0_1;
    }

    field_0x759 = 0;
    field_0x75a = 0;
    for (int i = 0; i < 3; i++) {
        field_0x75c[i] = 0;
    }

    field_0x75f = 0;
    field_0x756 = -1;

    field_0x760 = 0;

    int j = 0;
    f32 tmp_0_3 = FLOAT_LABEL(lit_4182);
    for (; j < 3; j++) {
        field_0x6ac[j] = tmp_0_3;
        field_0x6b8[j] = tmp_0_3;
        field_0x6c4[j] = tmp_0_3;
        field_0x6d0[j] = tmp_0_3;
    }

    f32 tmp_0_4 = FLOAT_LABEL(lit_4182);
    field_0x6dc = tmp_0_4;
    field_0x6e0 = tmp_0_4;
    field_0x6e4 = tmp_0_4;
    field_0x6e8 = tmp_0_4;
    field_0x6ec = tmp_0_4;
    field_0x6f0 = tmp_0_4;
    mHUDScale = g_drawHIO.mHUDScale;
    mHUDAlpha = g_drawHIO.mHUDAlpha;
    mButtonsPosX = tmp_0_4;
    mButtonsPosY = tmp_0_4;
    mButtonsScale = lit_4183;
    field_0x78c = g_drawHIO.mButtonDisplayBackScale;
    field_0x790 = tmp_0_4;
    mLifeGaugeHeartAlpha = g_drawHIO.mLifeGaugeHeartAlpha;
    mLifeGaugeBaseAlpha = g_drawHIO.mLifeGaugeBaseAlpha;
    mHeartAlpha = g_drawHIO.mHeartAlpha;
    mLargeHeartAlpha = g_drawHIO.mLargeHeartAlpha;
    field_0x7a4 = tmp_0_4;
    mMagicMeterAlpha = g_drawHIO.mMagicMeterAlpha;
    mMagicMeterFrameAlpha = g_drawHIO.mMagicMeterFrameAlpha;
    field_0x7b0 = tmp_0_4;
    mLanternMeterAlpha = g_drawHIO.mLanternMeterAlpha;
    mLanternMeterFrameAlpha = g_drawHIO.mLanternMeterFrameAlpha;
    field_0x7bc = tmp_0_4;
    mOxygenMeterAlpha = g_drawHIO.mOxygenMeterAlpha;
    mOxygenMeterFrameAlpha = g_drawHIO.mOxygenMeterFrameAlpha;
    field_0x7c8 = tmp_0_4;
    field_0x861 = 0;
    field_0x860 = 0;
    field_0x7cc = g_drawHIO.mHUDAlpha;
    field_0x7d0 = g_drawHIO.mRupeeKeyAlpha;
    mRupeeAlpha = g_drawHIO.mRupeeAlpha;
    mRupeeFrameAlpha = g_drawHIO.mRupeeFrameAlpha;
    mRupeeCountAlpha = g_drawHIO.mRupeeCountAlpha;
    field_0x7e0 = g_drawHIO.mHUDAlpha;
    field_0x7e4 = g_drawHIO.mRupeeKeyAlpha;
    mKeyAlpha = g_drawHIO.mKeyAlpha;
    mKeyNumAlpha = g_drawHIO.mKeyNumAlpha;
    field_0x7f0 = g_drawHIO.mHUDAlpha;
    mMainHUDButtonsAlpha = g_drawHIO.mMainHUDButtonsAlpha;
    mButtonDisplayBackAlpha = g_drawHIO.mButtonDisplayBackAlpha;
    mAButtonAlpha = g_drawHIO.mAButtonAlpha;
    mBButtonAlpha = g_drawHIO.mBButtonAlpha;
    mXButtonAlpha = g_drawHIO.mXButtonAlpha;
    mYButtonAlpha = g_drawHIO.mYButtonAlpha;
    field_0x80c = g_drawHIO.field_0x168;
    field_0x810 = g_drawHIO.mZButtonAlpha;

    for (int i = 0; i < 2; i++) {
        mBItemBaseAlpha[i] = g_drawHIO.mBItemBaseAlpha[i];
        mXButtonItemBaseAlpha[i] = g_drawHIO.mXButtonItemBaseAlpha[i];
        mYButtonItemBaseAlpha[i] = g_drawHIO.mYButtonItemBaseAlpha[i];
        field_0x82c[i] = g_drawHIO.field_0x298[i];
    }

    mZButtonItemBaseAlpha = g_drawHIO.mZButtonItemBaseAlpha;
    mButtonBaseAlpha = g_drawHIO.mButtonBaseAlpha;
    mAButtonFontSpacing = g_drawHIO.mAButtonFontSpacing;
    mDPadButtonAlpha = g_drawHIO.mDPadButtonAlpha;
    mDPadButtonITEMAlpha = g_drawHIO.mDPadButtonITEMAlpha;
    mDPadButtonMAPAlpha = g_drawHIO.mDPadButtonMAPAlpha;
    field_0x84c = g_drawHIO.mAButtonFontColor.r;
    field_0x84d = g_drawHIO.mAButtonFontColor.g;
    field_0x84e = g_drawHIO.mAButtonFontColor.b;
    field_0x84f = g_drawHIO.mAButtonFontColor.a;
    field_0x850 = g_drawHIO.mBButtonFontColor.r;
    field_0x851 = g_drawHIO.mBButtonFontColor.g;
    field_0x852 = g_drawHIO.mBButtonFontColor.b;
    field_0x853 = g_drawHIO.mBButtonFontColor.a;
    field_0x854 = g_drawHIO.field_0x2f0.r;
    field_0x855 = g_drawHIO.field_0x2f0.g;
    field_0x856 = g_drawHIO.field_0x2f0.b;
    field_0x857 = g_drawHIO.field_0x2f0.a;
    field_0x858 = g_drawHIO.mZButtonFontColor.r;
    field_0x859 = g_drawHIO.mZButtonFontColor.g;
    field_0x85a = g_drawHIO.mZButtonFontColor.b;
    field_0x85b = g_drawHIO.mZButtonFontColor.a;
    field_0x85c = g_drawHIO.mXYButtonFontColor.r;
    field_0x85d = g_drawHIO.mXYButtonFontColor.g;
    field_0x85e = g_drawHIO.mXYButtonFontColor.b;
    field_0x85f = g_drawHIO.mXYButtonFontColor.a;

    setItemParamX(0);
    setItemParamY(0);
    setItemParamZ(0);
    setItemParamB(0);
    initLife();
    initMagic();
    initLightDrop();
    initRupeeKey();
    initButton();
    initButtonCross();
    field_0x772 = 0;
}

/* 8021135C-8021151C 20BC9C 01C0+00 0/0 1/1 0/0 .text            exec__13dMeter2Draw_cFUl */
void dMeter2Draw_c::exec(u32 i_status) {
    if (mHUDScale != g_drawHIO.mHUDScale) {
        mHUDScale = g_drawHIO.mHUDScale;
        mpParent->scale(g_drawHIO.mHUDScale, g_drawHIO.mHUDScale);
    }

    if (mHUDAlpha != g_drawHIO.mHUDAlpha) {
        mHUDAlpha = g_drawHIO.mHUDAlpha;
        mpParent->setAlphaRate(g_drawHIO.mHUDAlpha);
    }

    if (i_status & 0x1000000) {
        if (mButtonsPosX != g_drawHIO.mRingHUDButtonsPosX ||
            mButtonsPosY != g_drawHIO.mRingHUDButtonsPosY)
        {
            mButtonsPosX = g_drawHIO.mRingHUDButtonsPosX;
            mButtonsPosY = g_drawHIO.mRingHUDButtonsPosY;
            mpButtonParent->paneTrans(g_drawHIO.mRingHUDButtonsPosX, g_drawHIO.mRingHUDButtonsPosY);
        }

        if (mButtonsScale != g_drawHIO.mRingHUDButtonsScale) {
            mButtonsScale = g_drawHIO.mRingHUDButtonsScale;
            mpButtonParent->scale(g_drawHIO.mRingHUDButtonsScale, g_drawHIO.mRingHUDButtonsScale);
        }
    } else {
        if (mButtonsPosX != g_drawHIO.mMainHUDButtonsPosX ||
            mButtonsPosY != g_drawHIO.mMainHUDButtonsPosY)
        {
            mButtonsPosX = g_drawHIO.mMainHUDButtonsPosX;
            mButtonsPosY = g_drawHIO.mMainHUDButtonsPosY;
            mpButtonParent->paneTrans(g_drawHIO.mMainHUDButtonsPosX, g_drawHIO.mMainHUDButtonsPosY);
        }

        if (mButtonsScale != g_drawHIO.mMainHUDButtonsScale) {
            mButtonsScale = g_drawHIO.mMainHUDButtonsScale;
            mpButtonParent->scale(g_drawHIO.mMainHUDButtonsScale, g_drawHIO.mMainHUDButtonsScale);
        }
    }
}

/* ############################################################################################## */
/* 80454890-80454894 002E90 0004+00 1/1 0/0 0/0 .sdata2          @4921 */
SECTION_SDATA2 static f32 lit_4921 = 16.0f;

/* 80454894-80454898 002E94 0004+00 9/9 0/0 0/0 .sdata2          @4922 */
SECTION_SDATA2 static f32 lit_4922 = 0.5f;

/* 80454898-804548A0 002E98 0004+04 7/7 0/0 0/0 .sdata2          @4923 */
SECTION_SDATA2 static f32 lit_4923[1 + 1 /* padding */] = {
    18.0f,
    /* padding */
    0.0f,
};

/* 804548A0-804548A8 002EA0 0008+00 13/13 0/0 0/0 .sdata2          @4925 */
SECTION_SDATA2 static f64 lit_4925 = 4503601774854144.0 /* cast s32 to float */;

/* 8021151C-80211BEC 20BE5C 06D0+00 1/0 0/0 0/0 .text            draw__13dMeter2Draw_cFv */
#ifdef NONMATCHING
void dMeter2Draw_c::draw() {
    J2DGrafContext* graf = dComIfGp_getCurrentGrafPort();

    mpScreen->draw(0.0f, 0.0f, graf);
    drawKanteraScreen(1);
    drawKanteraScreen(2);

    for (int i = 0; i < 2; i++) {
        if (mpItemXY[i] != NULL) {
            for (int j = 0; j < 3; j++) {
                JGeometry::TVec3<f32> vtx1 = pane->getPanePtr()->getGlbVtx(0);
                JGeometry::TVec3<f32> vtx2 = pane->getPanePtr()->getGlbVtx(3);

                // mpItemNumTex[i][j]->
            }
        }
    }

    for (int i = 0; i < 2; i++) {
        mpKanteraMeter[i]->drawSelf();
    }

    if (!dComIfGp_isPauseFlag() && mpButtonParent->getAlphaRate() != 0.0f) {
        if (field_0x608 > 0.0f) {
            drawPikari(mpBTextA, &field_0x608, g_drawHIO.mAButtonHighlightScale,
                       g_drawHIO.mAButtonHighlightFrontOuter, g_drawHIO.mAButtonHighlightFrontInner,
                       g_drawHIO.mAButtonHighlightBackOuter, g_drawHIO.mAButtonHighlightBackInner,
                       g_drawHIO.mAButtonHighlightAnimSpeed, field_0x759);
        }

        if (field_0x60c > 0.0f) {
            drawPikari(mpBTextB, &field_0x60c, g_drawHIO.mBButtonHighlightScale,
                       g_drawHIO.mBButtonHighlightFrontOuter, g_drawHIO.mBButtonHighlightFrontInner,
                       g_drawHIO.mBButtonHighlightBackOuter, g_drawHIO.mBButtonHighlightBackInner,
                       g_drawHIO.mBButtonHighlightAnimSpeed, field_0x75a);
        }

        for (int i = 0; i < 2; i++) {
            if (field_0x60c > 0.0f) {
                drawPikari(mpBTextXY[i], &field_0x620[i], g_drawHIO.mXYButtonHighlightScale,
                        g_drawHIO.mXYButtonHighlightFrontOuter, g_drawHIO.mXYButtonHighlightFrontInner,
                        g_drawHIO.mXYButtonHighlightBackOuter, g_drawHIO.XYButtonHighlightBackInner,
                        g_drawHIO.mXYButtonHighlightAnimSpeed, field_0x768[i]);
            }
        }
    }

    // TODO
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::draw() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/draw__13dMeter2Draw_cFv.s"
}
#pragma pop
#endif

/* ############################################################################################## */
/* 80398320-803983C0 024980 00A0+00 0/1 0/0 0/0 .rodata          life_tag$4931 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const life_tag[160] = {
    0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x30, 0x30, 0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x30, 0x31,
    0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x30, 0x32, 0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x30, 0x33,
    0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x30, 0x34, 0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x30, 0x35,
    0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x30, 0x36, 0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x30, 0x37,
    0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x30, 0x38, 0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x30, 0x39,
    0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x31, 0x30, 0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x31, 0x31,
    0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x31, 0x32, 0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x31, 0x33,
    0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x31, 0x34, 0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x31, 0x35,
    0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x31, 0x36, 0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x31, 0x37,
    0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x31, 0x38, 0x00, 0x00, 0x68, 0x70, 0x62, 0x5F, 0x31, 0x39,
};
COMPILER_STRIP_GATE(0x80398320, &life_tag);
#pragma pop

/* 803983C0-80398460 024A20 00A0+00 0/1 0/0 0/0 .rodata          mark_tag$4932 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const mark_tag[160] = {
    0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x30, 0x30, 0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x30, 0x31,
    0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x30, 0x32, 0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x30, 0x33,
    0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x30, 0x34, 0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x30, 0x35,
    0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x30, 0x36, 0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x30, 0x37,
    0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x30, 0x38, 0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x30, 0x39,
    0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x31, 0x30, 0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x31, 0x31,
    0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x31, 0x32, 0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x31, 0x33,
    0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x31, 0x34, 0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x31, 0x35,
    0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x31, 0x36, 0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x31, 0x37,
    0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x31, 0x38, 0x68, 0x65, 0x61, 0x72, 0x74, 0x6E, 0x31, 0x39,
};
COMPILER_STRIP_GATE(0x803983C0, &mark_tag);
#pragma pop

/* 80398460-80398500 024AC0 00A0+00 0/1 0/0 0/0 .rodata          base_tag$4933 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const base_tag[160] = {
    0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x30, 0x30, 0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x30, 0x31,
    0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x30, 0x32, 0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x30, 0x33,
    0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x30, 0x34, 0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x30, 0x35,
    0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x30, 0x36, 0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x30, 0x37,
    0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x30, 0x38, 0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x30, 0x39,
    0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x31, 0x30, 0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x31, 0x31,
    0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x31, 0x32, 0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x31, 0x33,
    0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x31, 0x34, 0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x31, 0x35,
    0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x31, 0x36, 0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x31, 0x37,
    0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x31, 0x38, 0x68, 0x5F, 0x62, 0x61, 0x5F, 0x6E, 0x31, 0x39,
};
COMPILER_STRIP_GATE(0x80398460, &base_tag);
#pragma pop

/* 80398500-803985A0 024B60 00A0+00 0/1 0/0 0/0 .rodata          lifet1_tag$4934 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lifet1_tag[160] = {
    0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x30, 0x73, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x31, 0x73,
    0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x32, 0x73, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x33, 0x73,
    0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x34, 0x73, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x35, 0x73,
    0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x36, 0x73, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x37, 0x73,
    0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x38, 0x73, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x39, 0x73,
    0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x30, 0x73, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x31, 0x73,
    0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x32, 0x73, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x33, 0x73,
    0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x34, 0x73, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x35, 0x73,
    0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x36, 0x73, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x37, 0x73,
    0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x38, 0x73, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x39, 0x73,
};
COMPILER_STRIP_GATE(0x80398500, &lifet1_tag);
#pragma pop

/* 803985A0-80398640 024C00 00A0+00 0/1 0/0 0/0 .rodata          lifet2_tag$4935 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lifet2_tag[160] = {
    0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x30, 0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x31,
    0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x32, 0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x33,
    0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x34, 0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x35,
    0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x36, 0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x37,
    0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x38, 0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x30, 0x39,
    0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x30, 0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x31,
    0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x32, 0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x33,
    0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x34, 0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x35,
    0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x36, 0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x37,
    0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x38, 0x00, 0x68, 0x65, 0x61, 0x72, 0x5F, 0x31, 0x39,
};
COMPILER_STRIP_GATE(0x803985A0, &lifet2_tag);
#pragma pop

/* 80211BEC-80211E64 20C52C 0278+00 1/1 0/0 0/0 .text            initLife__13dMeter2Draw_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::initLife() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/initLife__13dMeter2Draw_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 803988D0-803988D0 024F30 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_803989C0 = "zelda_game_image_sanso_10percent.bpk";
SECTION_DEAD static char const* const stringBase_803989E5 = "zelda_game_image_sanso_25percent.bpk";
SECTION_DEAD static char const* const stringBase_80398A0A = "zelda_game_image_sanso_50percent.bpk";
#pragma pop

/* 80211E64-80212190 20C7A4 032C+00 1/1 0/0 0/0 .text            initMagic__13dMeter2Draw_cFv */
// matches with literals
#ifdef NONMATCHING
void dMeter2Draw_c::initMagic() {
    field_0x550 = 0.0f;
    field_0x554 = 0.0f;

    mpMagicParent = new CPaneMgr(mpKanteraScreen, 'magic_n', 2, NULL);
    mpMagicBase = new CPaneMgr(mpKanteraScreen, 'mm_base', 0, NULL);
    mpMagicFrameL = new CPaneMgr(mpKanteraScreen, 'm_w_l_n', 2, NULL);
    mpMagicFrameR = new CPaneMgr(mpKanteraScreen, 'm_w_r_n', 2, NULL);
    mpMagicMeter = new CPaneMgr(mpKanteraScreen, 'mm_00', 0, NULL);
    i_OSInitFastCast();

    void* res = JKRFileLoader::getGlbResource("zelda_game_image_sanso_10percent.bpk",
                                              dComIfGp_getMain2DArchive());
    mpOxygenBpk[0] = (J2DAnmColorKey*)J2DAnmLoaderDataBase::load(res);
    mpOxygenBpk[0]->searchUpdateMaterialID(mpKanteraScreen);

    res = JKRFileLoader::getGlbResource("zelda_game_image_sanso_25percent.bpk",
                                        dComIfGp_getMain2DArchive());
    mpOxygenBpk[1] = (J2DAnmColorKey*)J2DAnmLoaderDataBase::load(res);
    mpOxygenBpk[1]->searchUpdateMaterialID(mpKanteraScreen);

    res = JKRFileLoader::getGlbResource("zelda_game_image_sanso_50percent.bpk",
                                        dComIfGp_getMain2DArchive());
    mpOxygenBpk[2] = (J2DAnmColorKey*)J2DAnmLoaderDataBase::load(res);
    mpOxygenBpk[2]->searchUpdateMaterialID(mpKanteraScreen);

    field_0x558 = 0.0f;
    mpMagicParent->setAlphaRate(0.0f);

    f32 offsetX = g_drawHIO.mLifeTopPosX;
    f32 offsetY = 0.0f;

    if (dComIfGs_getMaxLife() <= 50) {
        offsetY = g_drawHIO.mLifeTopPosY;
    }

    for (int i = 0; i < 3; i++) {
        mMeterAlphaRate[i] = 0.0f;
        field_0x742[i] = 0;
    }

    u8 magic = dComIfGs_getMagic();
    u8 max_magic = dComIfGs_getMaxMagic();
    drawMagic(max_magic, magic, g_drawHIO.mMagicMeterPosX + offsetX,
              g_drawHIO.mMagicMeterPosY + offsetY);
    setAlphaMagicChange(true);

    drawKantera((u16)dComIfGs_getMaxOil(), (u16)dComIfGs_getOil(),
                g_drawHIO.mLanternMeterPosX + offsetX,
                g_drawHIO.mNoMagicPosY + (g_drawHIO.mLanternMeterPosY + offsetY));
    setAlphaKanteraChange(true);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::initMagic() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/initMagic__13dMeter2Draw_cFv.s"
}
#pragma pop
#endif

/* ############################################################################################## */
/* 80398640-803986C0 024CA0 0080+00 0/1 0/0 0/0 .rodata          tuta_0$5094 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const tuta_0[128] = {
    0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x30, 0x31,
    0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x30, 0x32, 0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x30, 0x33,
    0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x30, 0x34, 0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x30, 0x35,
    0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x30, 0x36, 0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x30, 0x37,
    0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x30, 0x38, 0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x30, 0x39,
    0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x31, 0x30, 0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x31, 0x31,
    0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x31, 0x32, 0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x31, 0x33,
    0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x31, 0x34, 0x00, 0x00, 0x00, 0x00, 0x73, 0x5F, 0x31, 0x35,
};
COMPILER_STRIP_GATE(0x80398640, &tuta_0);
#pragma pop

/* 803986C0-80398740 024D20 0080+00 0/1 0/0 0/0 .rodata          tuta_1$5095 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const tuta_1[128] = {
    0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x30, 0x30, 0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x30, 0x31,
    0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x30, 0x32, 0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x30, 0x33,
    0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x30, 0x34, 0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x30, 0x35,
    0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x30, 0x36, 0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x30, 0x37,
    0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x30, 0x38, 0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x30, 0x39,
    0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x31, 0x30, 0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x31, 0x31,
    0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x31, 0x32, 0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x31, 0x33,
    0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x31, 0x34, 0x00, 0x00, 0x00, 0x73, 0x6C, 0x5F, 0x31, 0x35,
};
COMPILER_STRIP_GATE(0x803986C0, &tuta_1);
#pragma pop

/* 80398740-803987C0 024DA0 0080+00 0/1 0/0 0/0 .rodata          tuta_2$5096 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const tuta_2[128] = {
    0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x30, 0x30, 0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x30, 0x31,
    0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x30, 0x32, 0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x30, 0x33,
    0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x30, 0x34, 0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x30, 0x35,
    0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x30, 0x36, 0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x30, 0x37,
    0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x30, 0x38, 0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x30, 0x39,
    0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x31, 0x30, 0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x31, 0x31,
    0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x31, 0x32, 0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x31, 0x33,
    0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x31, 0x34, 0x00, 0x00, 0x73, 0x63, 0x70, 0x5F, 0x31, 0x35,
};
COMPILER_STRIP_GATE(0x80398740, &tuta_2);
#pragma pop

/* 80212190-80212404 20CAD0 0274+00 1/1 0/0 0/0 .text            initLightDrop__13dMeter2Draw_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::initLightDrop() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/initLightDrop__13dMeter2Draw_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 803987C0-803987E0 024E20 0020+00 0/1 0/0 0/0 .rodata          rupeet1_tag$5152 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const rupeet1_tag[32] = {
    0x00, 0x72, 0x5F, 0x6E, 0x5F, 0x31, 0x5F, 0x73, 0x00, 0x72, 0x5F, 0x6E, 0x5F, 0x32, 0x5F, 0x73,
    0x00, 0x72, 0x5F, 0x6E, 0x5F, 0x33, 0x5F, 0x73, 0x00, 0x72, 0x5F, 0x6E, 0x5F, 0x34, 0x5F, 0x73,
};
COMPILER_STRIP_GATE(0x803987C0, &rupeet1_tag);
#pragma pop

/* 803987E0-80398800 024E40 0020+00 0/1 0/0 0/0 .rodata          rupeet2_tag$5153 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const rupeet2_tag[32] = {
    0x00, 0x00, 0x00, 0x72, 0x5F, 0x6E, 0x5F, 0x31, 0x00, 0x00, 0x00, 0x72, 0x5F, 0x6E, 0x5F, 0x32,
    0x00, 0x00, 0x00, 0x72, 0x5F, 0x6E, 0x5F, 0x33, 0x00, 0x00, 0x00, 0x72, 0x5F, 0x6E, 0x5F, 0x34,
};
COMPILER_STRIP_GATE(0x803987E0, &rupeet2_tag);
#pragma pop

/* 80398800-80398828 024E60 0028+00 0/1 0/0 0/0 .rodata          key_tag$5165 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const key_tag[40] = {
    0x00, 0x6B, 0x65, 0x79, 0x5F, 0x6E, 0x75, 0x6C, 0x00, 0x6B, 0x5F, 0x6E, 0x5F, 0x31,
    0x5F, 0x6E, 0x00, 0x6B, 0x5F, 0x6E, 0x5F, 0x32, 0x5F, 0x6E, 0x00, 0x6B, 0x5F, 0x6E,
    0x5F, 0x33, 0x5F, 0x6E, 0x00, 0x6B, 0x5F, 0x6E, 0x5F, 0x34, 0x5F, 0x6E,
};
COMPILER_STRIP_GATE(0x80398800, &key_tag);
#pragma pop

/* 80212404-802126E4 20CD44 02E0+00 1/1 0/0 0/0 .text            initRupeeKey__13dMeter2Draw_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::initRupeeKey() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/initRupeeKey__13dMeter2Draw_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 80398828-80398850 024E88 0028+00 1/1 0/0 0/0 .rodata          juji_i_tag$5269 */
SECTION_RODATA static u8 const juji_i_tag[40] = {
    0x6A, 0x75, 0x5F, 0x72, 0x69, 0x6E, 0x67, 0x34, 0x00, 0x79, 0x61, 0x6A, 0x69, 0x5F,
    0x30, 0x30, 0x00, 0x79, 0x61, 0x6A, 0x69, 0x5F, 0x30, 0x31, 0x6A, 0x75, 0x5F, 0x72,
    0x69, 0x6E, 0x67, 0x32, 0x6A, 0x75, 0x5F, 0x72, 0x69, 0x6E, 0x67, 0x34,
};
COMPILER_STRIP_GATE(0x80398828, &juji_i_tag);

/* 80398850-80398878 024EB0 0028+00 1/1 0/0 0/0 .rodata          juji_m_tag$5270 */
SECTION_RODATA static u8 const juji_m_tag[40] = {
    0x6A, 0x75, 0x5F, 0x72, 0x69, 0x6E, 0x67, 0x33, 0x00, 0x79, 0x61, 0x6A, 0x69, 0x5F,
    0x30, 0x32, 0x00, 0x79, 0x61, 0x6A, 0x69, 0x5F, 0x30, 0x33, 0x6A, 0x75, 0x5F, 0x72,
    0x69, 0x6E, 0x67, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x80398850, &juji_m_tag);

/* 802126E4-8021350C 20D024 0E28+00 1/1 0/0 0/0 .text            initButton__13dMeter2Draw_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::initButton() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/initButton__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 8021350C-80213CEC 20DE4C 07E0+00 1/1 0/0 0/0 .text            initButtonCross__13dMeter2Draw_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::initButtonCross() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/initButtonCross__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80213CEC-80213D6C 20E62C 0080+00 3/3 0/0 0/0 .text playPikariBckAnimation__13dMeter2Draw_cFf */
void dMeter2Draw_c::playPikariBckAnimation(f32 frame) {
    mpPikariParent->getPanePtr()->setAnimation(mPikariBck);
    mPikariBck->setFrame(frame);
    mpPikariParent->getPanePtr()->animationTransform();
    mpPikariParent->getPanePtr()->setAnimation((J2DAnmTransformKey*)NULL);
}

/* 80213D6C-80213E3C 20E6AC 00D0+00 1/1 0/0 0/0 .text
 * setPikariBpkAnimation__13dMeter2Draw_cFP11J2DAnmColor        */
void dMeter2Draw_c::setPikariBpkAnimation(J2DAnmColor* p_anmcolor) {
    mpPikariScreen->search('pika00')->setAnimation(p_anmcolor);
    mpPikariScreen->search('moya00')->setAnimation(p_anmcolor);
    mpPikariScreen->search('moyabs')->setAnimation(p_anmcolor);
}

/* 80213E3C-80213E94 20E77C 0058+00 3/3 0/0 0/0 .text playPikariBpkAnimation__13dMeter2Draw_cFf */
void dMeter2Draw_c::playPikariBpkAnimation(f32 frame) {
    setPikariBpkAnimation(mPikariBpk);
    mPikariBpk->setFrame(frame);
    mpPikariScreen->animation();
    setPikariBpkAnimation(NULL);
}

/* 80213E94-80213FF0 20E7D4 015C+00 1/1 0/0 0/0 .text
 * playOxygenBpkAnimation__13dMeter2Draw_cFP11J2DAnmColor       */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::playOxygenBpkAnimation(J2DAnmColor* param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/playOxygenBpkAnimation__13dMeter2Draw_cFP11J2DAnmColor.s"
}
#pragma pop

/* 80213FF0-802140DC 20E930 00EC+00 1/1 0/0 0/0 .text
 * drawPikari__13dMeter2Draw_cFP8CPaneMgrPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawPikari(CPaneMgr* param_0, f32* param_1, f32 param_2,
                                   JUtility::TColor param_3, JUtility::TColor param_4,
                                   JUtility::TColor param_5, JUtility::TColor param_6, f32 param_7,
                                   u8 param_8) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/func_80213FF0.s"
}
#pragma pop

/* ############################################################################################## */
/* 804548A8-804548AC 002EA8 0004+00 1/1 0/0 0/0 .sdata2          @5784 */
SECTION_SDATA2 static f32 lit_5784 = 28.0f;

/* 804548AC-804548B0 002EAC 0004+00 1/1 0/0 0/0 .sdata2          @5785 */
SECTION_SDATA2 static f32 lit_5785 = 24.0f;

/* 804548B0-804548B4 002EB0 0004+00 4/4 0/0 0/0 .sdata2          @5786 */
SECTION_SDATA2 static f32 lit_5786 = -1.0f;

/* 802140DC-8021462C 20EA1C 0550+00 1/1 6/6 0/0 .text
 * drawPikari__13dMeter2Draw_cFffPffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorfUc
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawPikari(f32 param_0, f32 param_1, f32* param_2, f32 param_3,
                                   JUtility::TColor param_4, JUtility::TColor param_5,
                                   JUtility::TColor param_6, JUtility::TColor param_7, f32 param_8,
                                   u8 param_9) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/func_802140DC.s"
}
#pragma pop

/* 8021462C-802147CC 20EF6C 01A0+00 0/0 1/1 0/0 .text
 * drawPikariHakusha__13dMeter2Draw_cFffffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColor
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawPikariHakusha(f32 param_0, f32 param_1, f32 param_2, f32 param_3,
                                          JUtility::TColor param_4, JUtility::TColor param_5,
                                          JUtility::TColor param_6, JUtility::TColor param_7) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/func_8021462C.s"
}
#pragma pop

/* ############################################################################################## */
/* 80398878-80398898 024ED8 0020+00 1/1 0/0 0/0 .rodata          tag_bigh$5851 */
SECTION_RODATA static u8 const tag_bigh[32] = {
    0x00, 0x62, 0x69, 0x67, 0x68, 0x5F, 0x30, 0x30, 0x00, 0x62, 0x69, 0x67, 0x68, 0x5F, 0x30, 0x31,
    0x00, 0x62, 0x69, 0x67, 0x68, 0x5F, 0x30, 0x32, 0x00, 0x62, 0x69, 0x67, 0x68, 0x5F, 0x30, 0x33,
};
COMPILER_STRIP_GATE(0x80398878, &tag_bigh);

/* 80398898-803988A8 024EF8 0010+00 1/1 0/0 0/0 .rodata          tag_du$5852 */
SECTION_RODATA static u8 const tag_du[16] = {
    0x68, 0x65, 0x61, 0x72, 0x74, 0x5F, 0x6C, 0x6E, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5F, 0x75, 0x6E,
};
COMPILER_STRIP_GATE(0x80398898, &tag_du);

/* 802147CC-802149F4 20F10C 0228+00 1/1 0/0 0/0 .text changeTextureLife__13dMeter2Draw_cFibUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::changeTextureLife(int param_0, bool param_1, u8 param_2) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/changeTextureLife__13dMeter2Draw_cFibUc.s"
}
#pragma pop

/* 802149F4-80214C20 20F334 022C+00 1/1 1/1 0/0 .text            drawLife__13dMeter2Draw_cFssff */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawLife(s16 param_0, s16 param_1, f32 param_2, f32 param_3) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawLife__13dMeter2Draw_cFssff.s"
}
#pragma pop

/* 80214C20-80214DF4 20F560 01D4+00 1/1 1/1 0/0 .text setAlphaLifeChange__13dMeter2Draw_cFb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaLifeChange(bool param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaLifeChange__13dMeter2Draw_cFb.s"
}
#pragma pop

/* 80214DF4-80214E54 20F734 0060+00 0/0 1/1 0/0 .text setAlphaLifeAnimeMin__13dMeter2Draw_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaLifeAnimeMin() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaLifeAnimeMin__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80214E54-80214EB4 20F794 0060+00 0/0 1/1 0/0 .text setAlphaLifeAnimeMax__13dMeter2Draw_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaLifeAnimeMax() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaLifeAnimeMax__13dMeter2Draw_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 804548B4-804548B8 002EB4 0004+00 1/1 0/0 0/0 .sdata2          @6143 */
SECTION_SDATA2 static f32 lit_6143 = 0.25f;

/* 80214EB4-80215290 20F7F4 03DC+00 1/1 0/0 0/0 .text drawKanteraScreen__13dMeter2Draw_cFUc */
// matches with literals
#ifdef NONMATCHING
void dMeter2Draw_c::drawKanteraScreen(u8 i_meterType) {
    J2DGrafContext* graf = dComIfGp_getCurrentGrafPort();

    mpMagicParent->setAlphaRate(mMeterAlphaRate[i_meterType]);

    if (i_meterType == 0) {
        JUtility::TColor black = mpMagicMeter->getInitBlack();
        black.a = 255;

        mpMagicMeter->setBlackWhite(black, mpMagicMeter->getInitWhite());
        setAlphaMagicChange(true);
    } else if (i_meterType == 1) {
        mpMagicMeter->setBlackWhite(JUtility::TColor(255, 255, 140, 255),
                                    JUtility::TColor(230, 170, 0, 255));
        setAlphaKanteraChange(true);
    } else if (i_meterType == 2) {
        f32 oxygen_percent = (f32)dComIfGp_getOxygen() / (f32)dComIfGp_getMaxOxygen();

        if (oxygen_percent <= 0.25f) {
            mpMagicMeter->setBlackWhite(JUtility::TColor(255, 100, 100, 255),
                                        JUtility::TColor(255, 10, 10, 255));
            playOxygenBpkAnimation(mpOxygenBpk[0]);

            if (mMeterAlphaRate[i_meterType] > 0.0f) {
                Z2GetAudioMgr()->mSeMgr.seStartLevel(Z2SE_SWIM_TIMER_BLINK_2, NULL, 0, 0, 1.0f,
                                                     1.0f, -1.0f, -1.0f, 0);
            }
        } else if (oxygen_percent <= 0.5f) {
            mpMagicMeter->setBlackWhite(JUtility::TColor(200, 200, 255, 255),
                                        JUtility::TColor(80, 180, 255, 255));
            playOxygenBpkAnimation(mpOxygenBpk[1]);

            if (mMeterAlphaRate[i_meterType] > 0.0f) {
                Z2GetAudioMgr()->mSeMgr.seStartLevel(Z2SE_SWIM_TIMER_BLINK_1, NULL, 0, 0, 1.0f,
                                                     1.0f, -1.0f, -1.0f, 0);
            }
        } else {
            mpMagicMeter->setBlackWhite(JUtility::TColor(200, 200, 255, 255),
                                        JUtility::TColor(80, 180, 255, 255));
        }

        setAlphaOxygenChange(true);
    }

    mpMagicMeter->resize(field_0x584[i_meterType], field_0x590[i_meterType]);
    mpMagicFrameR->move(field_0x59c[i_meterType], field_0x5a8[i_meterType]);
    mpMagicBase->resize(field_0x5b4[i_meterType], field_0x5c0[i_meterType]);
    mpMagicParent->scale(field_0x5cc[i_meterType], field_0x5d8[i_meterType]);
    mpMagicParent->paneTrans(field_0x5e4[i_meterType], field_0x5f0[i_meterType]);
    mpKanteraScreen->draw(0.0f, 0.0f, graf);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawKanteraScreen(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawKanteraScreen__13dMeter2Draw_cFUc.s"
}
#pragma pop
#endif

/* ############################################################################################## */
/* 804548B8-804548BC 002EB8 0004+00 1/1 0/0 0/0 .sdata2          @6175 */
SECTION_SDATA2 static f32 lit_6175 = 0.03125f;

/* 80215290-80215380 20FBD0 00F0+00 1/1 0/0 0/0 .text            drawMagic__13dMeter2Draw_cFssff */
#ifdef NONMATCHING
void dMeter2Draw_c::drawMagic(s16 i_maxMagic, s16 i_nowMagic, f32 i_xPos, f32 i_yPos) {
    f32 frameL_posX = mpMagicFrameL->getInitPosX();
    f32 frameR_posX = mpMagicFrameR->getInitPosX();

    field_0x584[0] = (mpMagicMeter->getInitSizeX() * i_nowMagic) * 0.03125f;
    field_0x590[0] = mpMagicMeter->getInitSizeY();

    field_0x59c[0] =
        ((f32)i_maxMagic * (frameR_posX - frameL_posX)) * 0.03125f + mpMagicFrameL->getInitPosX();
    field_0x5a8[0] = mpMagicFrameL->getInitPosY();

    field_0x5b4[0] = (f32)i_maxMagic * mpMagicBase->getInitSizeX() * 0.03125f;
    field_0x5c0[0] = mpMagicBase->getInitSizeY();

    field_0x5cc[0] = g_drawHIO.mMagicMeterScale;
    field_0x5d8[0] = g_drawHIO.mMagicMeterScale;

    field_0x5e4[0] = i_xPos;
    field_0x5f0[0] = i_yPos;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawMagic(s16 i_maxMagic, s16 i_nowMagic, f32 i_xPos, f32 i_yPos) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawMagic__13dMeter2Draw_cFssff.s"
}
#pragma pop
#endif

/* 80215380-802154A8 20FCC0 0128+00 2/2 0/0 0/0 .text setAlphaMagicChange__13dMeter2Draw_cFb */
void dMeter2Draw_c::setAlphaMagicChange(bool i_forceSet) {
    bool meter_parent_alpha_set = false;
    bool meter_alpha_set = false;
    bool meter_frame_alpha_set = false;

    if (field_0x7a4 != mpMagicParent->getAlphaRate() || i_forceSet) {
        field_0x7a4 = mpMagicParent->getAlphaRate();
        meter_parent_alpha_set = true;
    }

    if (mMagicMeterAlpha != g_drawHIO.mMagicMeterAlpha || i_forceSet) {
        mMagicMeterAlpha = g_drawHIO.mMagicMeterAlpha;
        meter_alpha_set = true;
    }

    if (mMagicMeterFrameAlpha != g_drawHIO.mMagicMeterFrameAlpha || i_forceSet) {
        mMagicMeterFrameAlpha = g_drawHIO.mMagicMeterFrameAlpha;
        meter_frame_alpha_set = true;
    }

    if (meter_parent_alpha_set || meter_alpha_set || i_forceSet) {
        mpMagicMeter->setAlphaRate(mMagicMeterAlpha * field_0x7a4);
    }

    if (meter_parent_alpha_set || meter_frame_alpha_set || i_forceSet) {
        mpMagicFrameL->setAlphaRate(mMagicMeterFrameAlpha * field_0x7a4);
        mpMagicFrameR->setAlphaRate(mMagicMeterFrameAlpha * field_0x7a4);
    }
}

/* ############################################################################################## */
/* 804548BC-804548C0 002EBC 0004+00 4/4 0/0 0/0 .sdata2          @6210 */
SECTION_SDATA2 static f32 lit_6210 = 5.0f;

/* 804548C0-804548C8 002EC0 0008+00 9/9 0/0 0/0 .sdata2          @6293 */
SECTION_SDATA2 static f64 lit_6293 = 4503599627370496.0 /* cast u32 to float */;

/* 802154A8-802155B8 20FDE8 0110+00 1/1 1/1 0/0 .text            drawKantera__13dMeter2Draw_cFllff
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawKantera(s32 i_maxOil, s32 i_nowOil, f32 i_xPos, f32 i_yPos) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawKantera__13dMeter2Draw_cFllff.s"
}
#pragma pop

/* 802155B8-802156E0 20FEF8 0128+00 2/2 1/1 0/0 .text setAlphaKanteraChange__13dMeter2Draw_cFb */
void dMeter2Draw_c::setAlphaKanteraChange(bool i_forceSet) {
    bool meter_parent_alpha_set = false;
    bool meter_alpha_set = false;
    bool meter_frame_alpha_set = false;

    if (field_0x7b0 != mpMagicParent->getAlphaRate() || i_forceSet) {
        field_0x7b0 = mpMagicParent->getAlphaRate();
        meter_parent_alpha_set = true;
    }

    if (mLanternMeterAlpha != g_drawHIO.mLanternMeterAlpha || i_forceSet) {
        mLanternMeterAlpha = g_drawHIO.mLanternMeterAlpha;
        meter_alpha_set = true;
    }

    if (mLanternMeterFrameAlpha != g_drawHIO.mLanternMeterFrameAlpha || i_forceSet) {
        mLanternMeterFrameAlpha = g_drawHIO.mLanternMeterFrameAlpha;
        meter_frame_alpha_set = true;
    }

    if (meter_parent_alpha_set || meter_alpha_set || i_forceSet) {
        mpMagicMeter->setAlphaRate(mLanternMeterAlpha * field_0x7b0);
    }

    if (meter_parent_alpha_set || meter_frame_alpha_set || i_forceSet) {
        mpMagicFrameL->setAlphaRate(mLanternMeterFrameAlpha * field_0x7b0);
        mpMagicFrameR->setAlphaRate(mLanternMeterFrameAlpha * field_0x7b0);
    }
}

/* 802156E0-8021575C 210020 007C+00 0/0 1/1 0/0 .text setAlphaKanteraAnimeMin__13dMeter2Draw_cFv
 */
// matches with literals
#ifdef NONMATCHING
void dMeter2Draw_c::setAlphaKanteraAnimeMin() {
    if (field_0x742[1] <= 0) {
        mMeterAlphaRate[1] = 0.0f;
    } else {
        field_0x742[1]--;
        if (field_0x742[1] < 0) {
            field_0x742[1] = 0;
        }

        mMeterAlphaRate[1] = (field_0x742[1] / 5.0f) * g_drawHIO.mHUDAlpha;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaKanteraAnimeMin() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaKanteraAnimeMin__13dMeter2Draw_cFv.s"
}
#pragma pop
#endif

/* 8021575C-802157E0 21009C 0084+00 0/0 1/1 0/0 .text setAlphaKanteraAnimeMax__13dMeter2Draw_cFv
 */
// matches with literals
#ifdef NONMATCHING
void dMeter2Draw_c::setAlphaKanteraAnimeMax() {
    if (field_0x742[1] >= 5) {
        mMeterAlphaRate[1] = g_drawHIO.mHUDAlpha;
    } else {
        field_0x742[1]++;
        if (field_0x742[1] > 5) {
            field_0x742[1] = 5;
        }

        mMeterAlphaRate[1] = (field_0x742[1] / 5.0f) * g_drawHIO.mHUDAlpha;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaKanteraAnimeMax() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaKanteraAnimeMax__13dMeter2Draw_cFv.s"
}
#pragma pop
#endif

/* 802157E0-802158F0 210120 0110+00 0/0 1/1 0/0 .text            drawOxygen__13dMeter2Draw_cFllff */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawOxygen(s32 param_0, s32 param_1, f32 param_2, f32 param_3) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawOxygen__13dMeter2Draw_cFllff.s"
}
#pragma pop

/* 802158F0-80215A18 210230 0128+00 1/1 1/1 0/0 .text setAlphaOxygenChange__13dMeter2Draw_cFb */
void dMeter2Draw_c::setAlphaOxygenChange(bool i_forceSet) {
    bool meter_parent_alpha_set = false;
    bool meter_alpha_set = false;
    bool meter_frame_alpha_set = false;

    if (field_0x7bc != mpMagicParent->getAlphaRate() || i_forceSet) {
        field_0x7bc = mpMagicParent->getAlphaRate();
        meter_parent_alpha_set = true;
    }

    if (mOxygenMeterAlpha != g_drawHIO.mOxygenMeterAlpha || i_forceSet) {
        mOxygenMeterAlpha = g_drawHIO.mOxygenMeterAlpha;
        meter_alpha_set = true;
    }

    if (mOxygenMeterFrameAlpha != g_drawHIO.mOxygenMeterFrameAlpha || i_forceSet) {
        mOxygenMeterFrameAlpha = g_drawHIO.mOxygenMeterFrameAlpha;
        meter_frame_alpha_set = true;
    }

    if (meter_parent_alpha_set || meter_alpha_set || i_forceSet) {
        mpMagicMeter->setAlphaRate(mOxygenMeterAlpha * field_0x7bc);
    }

    if (meter_parent_alpha_set || meter_frame_alpha_set || i_forceSet) {
        mpMagicFrameL->setAlphaRate(mOxygenMeterFrameAlpha * field_0x7bc);
        mpMagicFrameR->setAlphaRate(mOxygenMeterFrameAlpha * field_0x7bc);
    }
}

/* 80215A18-80215A94 210358 007C+00 0/0 1/1 0/0 .text setAlphaOxygenAnimeMin__13dMeter2Draw_cFv */
// matches with literals
#ifdef NONMATCHING
void dMeter2Draw_c::setAlphaOxygenAnimeMin() {
    if (field_0x742[2] <= 0) {
        mMeterAlphaRate[2] = 0.0f;
    } else {
        field_0x742[2]--;
        if (field_0x742[2] < 0) {
            field_0x742[2] = 0;
        }

        mMeterAlphaRate[2] = (field_0x742[2] / 5.0f) * g_drawHIO.mHUDAlpha;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaOxygenAnimeMin() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaOxygenAnimeMin__13dMeter2Draw_cFv.s"
}
#pragma pop
#endif

/* 80215A94-80215B18 2103D4 0084+00 0/0 1/1 0/0 .text setAlphaOxygenAnimeMax__13dMeter2Draw_cFv */
// matches with literals
#ifdef NONMATCHING
void dMeter2Draw_c::setAlphaOxygenAnimeMax() {
    if (field_0x742[2] >= 5) {
        mMeterAlphaRate[2] = g_drawHIO.mHUDAlpha;
    } else {
        field_0x742[2]++;
        if (field_0x742[2] > 5) {
            field_0x742[2] = 5;
        }

        mMeterAlphaRate[2] = (field_0x742[2] / 5.0f) * g_drawHIO.mHUDAlpha;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaOxygenAnimeMax() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaOxygenAnimeMax__13dMeter2Draw_cFv.s"
}
#pragma pop
#endif

/* ############################################################################################## */
/* 804548C8-804548CC 002EC8 0004+00 4/4 0/0 0/0 .sdata2          @6524 */
SECTION_SDATA2 static f32 lit_6524 = 3.0f / 10.0f;

/* 80215B18-80215DA4 210458 028C+00 1/1 1/1 0/0 .text drawLightDrop__13dMeter2Draw_cFUcUcffffUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawLightDrop(u8 param_0, u8 param_1, f32 param_2, f32 param_3, f32 param_4,
                                      f32 param_5, u8 param_6) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawLightDrop__13dMeter2Draw_cFUcUcffffUc.s"
}
#pragma pop

/* 80215DA4-80215DA8 2106E4 0004+00 1/1 1/1 0/0 .text setAlphaLightDropChange__13dMeter2Draw_cFb
 */
void dMeter2Draw_c::setAlphaLightDropChange(bool param_0) {}

/* 80215DA8-80215E40 2106E8 0098+00 0/0 1/1 0/0 .text getNowLightDropRateCalc__13dMeter2Draw_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm f32 dMeter2Draw_c::getNowLightDropRateCalc() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/getNowLightDropRateCalc__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80215E40-80215F88 210780 0148+00 0/0 1/1 0/0 .text setAlphaLightDropAnimeMin__13dMeter2Draw_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaLightDropAnimeMin() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaLightDropAnimeMin__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80215F88-8021632C 2108C8 03A4+00 0/0 1/1 0/0 .text setAlphaLightDropAnimeMax__13dMeter2Draw_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaLightDropAnimeMax() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaLightDropAnimeMax__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 8021632C-80216684 210C6C 0358+00 1/1 1/1 0/0 .text            drawRupee__13dMeter2Draw_cFs */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawRupee(s16 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawRupee__13dMeter2Draw_cFs.s"
}
#pragma pop

/* 80216684-802168D0 210FC4 024C+00 1/1 1/1 0/0 .text setAlphaRupeeChange__13dMeter2Draw_cFb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaRupeeChange(bool param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaRupeeChange__13dMeter2Draw_cFb.s"
}
#pragma pop

/* 802168D0-80216990 211210 00C0+00 0/0 1/1 0/0 .text setAlphaRupeeAnimeMin__13dMeter2Draw_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaRupeeAnimeMin() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaRupeeAnimeMin__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80216990-80216A40 2112D0 00B0+00 0/0 1/1 0/0 .text setAlphaRupeeAnimeMax__13dMeter2Draw_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaRupeeAnimeMax() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaRupeeAnimeMax__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80216A40-80216B28 211380 00E8+00 1/1 1/1 0/0 .text            drawKey__13dMeter2Draw_cFs */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawKey(s16 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawKey__13dMeter2Draw_cFs.s"
}
#pragma pop

/* 80216B28-80216CA8 211468 0180+00 1/1 1/1 0/0 .text setAlphaKeyChange__13dMeter2Draw_cFb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaKeyChange(bool param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaKeyChange__13dMeter2Draw_cFb.s"
}
#pragma pop

/* 80216CA8-80216D2C 2115E8 0084+00 0/0 1/1 0/0 .text setAlphaKeyAnimeMin__13dMeter2Draw_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaKeyAnimeMin() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaKeyAnimeMin__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80216D2C-80216DAC 21166C 0080+00 0/0 1/1 0/0 .text setAlphaKeyAnimeMax__13dMeter2Draw_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaKeyAnimeMax() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaKeyAnimeMax__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80216DAC-802170E4 2116EC 0338+00 1/1 1/1 0/0 .text drawButtonA__13dMeter2Draw_cFUcfffffbb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawButtonA(u8 param_0, f32 param_1, f32 param_2, f32 param_3, f32 param_4,
                                    f32 param_5, bool param_6, bool param_7) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawButtonA__13dMeter2Draw_cFUcfffffbb.s"
}
#pragma pop

/* 802170E4-8021764C 211A24 0568+00 1/1 1/1 0/0 .text drawButtonB__13dMeter2Draw_cFUcbfffffb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawButtonB(u8 param_0, bool param_1, f32 param_2, f32 param_3, f32 param_4,
                                    f32 param_5, f32 param_6, bool param_7) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawButtonB__13dMeter2Draw_cFUcbfffffb.s"
}
#pragma pop

/* 8021764C-802176EC 211F8C 00A0+00 1/1 1/1 0/0 .text            drawButtonR__13dMeter2Draw_cFUcUcbb
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawButtonR(u8 param_0, u8 param_1, bool param_2, bool param_3) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawButtonR__13dMeter2Draw_cFUcUcbb.s"
}
#pragma pop

/* 802176EC-80217904 21202C 0218+00 1/1 1/1 0/0 .text            drawButtonZ__13dMeter2Draw_cFUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawButtonZ(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawButtonZ__13dMeter2Draw_cFUc.s"
}
#pragma pop

/* 80217904-80217954 212244 0050+00 1/1 1/1 0/0 .text            drawButton3D__13dMeter2Draw_cFUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawButton3D(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawButton3D__13dMeter2Draw_cFUc.s"
}
#pragma pop

/* 80217954-802179C0 212294 006C+00 1/1 1/1 0/0 .text            drawButtonC__13dMeter2Draw_cFUcb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawButtonC(u8 param_0, bool param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawButtonC__13dMeter2Draw_cFUcb.s"
}
#pragma pop

/* 802179C0-80217A10 212300 0050+00 1/1 1/1 0/0 .text            drawButtonS__13dMeter2Draw_cFUc */
void dMeter2Draw_c::drawButtonS(u8 param_0) {
    getActionString(param_0, 1, &field_0x767);
    if (param_0 != 0) {
        field_0x767 = 7;
    }
}

/* 80217A10-80217AB4 212350 00A4+00 0/0 1/1 0/0 .text            drawButtonBin__13dMeter2Draw_cFUc
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawButtonBin(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawButtonBin__13dMeter2Draw_cFUc.s"
}
#pragma pop

/* ############################################################################################## */
/* 803988A8-803988B8 024F08 0010+00 1/1 0/0 0/0 .rodata          tag$7361 */
SECTION_RODATA static u8 const tag_7361[16] = {
    0x69, 0x74, 0x65, 0x6D, 0x5F, 0x78, 0x5F, 0x6E, 0x69, 0x74, 0x65, 0x6D, 0x5F, 0x79, 0x5F, 0x6E,
};
COMPILER_STRIP_GATE(0x803988A8, &tag_7361);

/* 80217AB4-80218238 2123F4 0784+00 1/1 1/1 0/0 .text drawButtonXY__13dMeter2Draw_cFiUcUcbb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawButtonXY(int param_0, u8 param_1, u8 param_2, bool param_3,
                                     bool param_4) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawButtonXY__13dMeter2Draw_cFiUcUcbb.s"
}
#pragma pop

/* 80218238-80218254 212B78 001C+00 0/0 1/1 0/0 .text
 * getButtonCrossParentInitTransY__13dMeter2Draw_cFv            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm f32 dMeter2Draw_c::getButtonCrossParentInitTransY() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/getButtonCrossParentInitTransY__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80218254-80218338 212B94 00E4+00 1/1 1/1 0/0 .text            drawButtonCross__13dMeter2Draw_cFff
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawButtonCross(f32 param_0, f32 param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawButtonCross__13dMeter2Draw_cFff.s"
}
#pragma pop

/* 80218338-802183A8 212C78 0070+00 0/0 1/1 0/0 .text
 * setAlphaButtonCrossAnimeMin__13dMeter2Draw_cFv               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaButtonCrossAnimeMin() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaButtonCrossAnimeMin__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 802183A8-80218448 212CE8 00A0+00 0/0 1/1 0/0 .text
 * setAlphaButtonCrossAnimeMax__13dMeter2Draw_cFv               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaButtonCrossAnimeMax() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaButtonCrossAnimeMax__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80218448-80218524 212D88 00DC+00 2/2 0/0 0/0 .text
 * setAlphaButtonCrossItemAnimeMin__13dMeter2Draw_cFv           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaButtonCrossItemAnimeMin() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaButtonCrossItemAnimeMin__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80218524-802185E8 212E64 00C4+00 1/1 0/0 0/0 .text
 * setAlphaButtonCrossItemAnimeMax__13dMeter2Draw_cFv           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaButtonCrossItemAnimeMax() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaButtonCrossItemAnimeMax__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 802185E8-802186C4 212F28 00DC+00 2/2 0/0 0/0 .text
 * setAlphaButtonCrossMapAnimeMin__13dMeter2Draw_cFv            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaButtonCrossMapAnimeMin() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaButtonCrossMapAnimeMin__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 802186C4-80218788 213004 00C4+00 1/1 0/0 0/0 .text
 * setAlphaButtonCrossMapAnimeMax__13dMeter2Draw_cFv            */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaButtonCrossMapAnimeMax() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaButtonCrossMapAnimeMax__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80218788-8021901C 2130C8 0894+00 1/1 1/1 0/0 .text setAlphaButtonChange__13dMeter2Draw_cFb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaButtonChange(bool param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaButtonChange__13dMeter2Draw_cFb.s"
}
#pragma pop

/* 8021901C-802190A8 21395C 008C+00 0/0 1/1 0/0 .text setAlphaButtonAnimeMin__13dMeter2Draw_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaButtonAnimeMin() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaButtonAnimeMin__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 802190A8-80219174 2139E8 00CC+00 0/0 1/1 0/0 .text setAlphaButtonAnimeMax__13dMeter2Draw_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaButtonAnimeMax() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaButtonAnimeMax__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80219174-80219258 213AB4 00E4+00 0/0 1/1 0/0 .text setAlphaButtonAAnimeMin__13dMeter2Draw_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaButtonAAnimeMin() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaButtonAAnimeMin__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80219258-80219324 213B98 00CC+00 0/0 1/1 0/0 .text setAlphaButtonAAnimeMax__13dMeter2Draw_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaButtonAAnimeMax() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaButtonAAnimeMax__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80219324-80219474 213C64 0150+00 0/0 1/1 0/0 .text setAlphaButtonBAnimeMin__13dMeter2Draw_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaButtonBAnimeMin() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaButtonBAnimeMin__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 80219474-802195A4 213DB4 0130+00 0/0 1/1 0/0 .text setAlphaButtonBAnimeMax__13dMeter2Draw_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaButtonBAnimeMax() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaButtonBAnimeMax__13dMeter2Draw_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 804548CC-804548D0 002ECC 0004+00 5/5 0/0 0/0 .sdata2          @8207 */
SECTION_SDATA2 static f32 lit_8207 = 255.0f;

/* 802195A4-80219788 213EE4 01E4+00 0/0 1/1 0/0 .text setButtonIconAAlpha__13dMeter2Draw_cFUcUlb
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setButtonIconAAlpha(u8 param_0, u32 param_1, bool param_2) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setButtonIconAAlpha__13dMeter2Draw_cFUcUlb.s"
}
#pragma pop

/* 80219788-80219A84 2140C8 02FC+00 0/0 1/1 0/0 .text setButtonIconBAlpha__13dMeter2Draw_cFUcUlb
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setButtonIconBAlpha(u8 param_0, u32 param_1, bool param_2) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setButtonIconBAlpha__13dMeter2Draw_cFUcUlb.s"
}
#pragma pop

/* ############################################################################################## */
/* 804548D0-804548D4 002ED0 0004+00 1/1 0/0 0/0 .sdata2          @8359 */
SECTION_SDATA2 static f32 lit_8359 = 2.0f / 5.0f;

/* 804548D4-804548D8 002ED4 0004+00 1/1 0/0 0/0 .sdata2          @8360 */
SECTION_SDATA2 static f32 lit_8360 = 1.0f / 10.0f;

/* 80219A84-80219E98 2143C4 0414+00 0/0 1/1 0/0 .text setButtonIconMidonaAlpha__13dMeter2Draw_cFUl
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setButtonIconMidonaAlpha(u32 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setButtonIconMidonaAlpha__13dMeter2Draw_cFUl.s"
}
#pragma pop

/* 80219E98-8021A29C 2147D8 0404+00 0/0 1/1 0/0 .text setButtonIconAlpha__13dMeter2Draw_cFiUcUlb
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setButtonIconAlpha(int param_0, u8 param_1, u32 param_2, bool param_3) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setButtonIconAlpha__13dMeter2Draw_cFiUcUlb.s"
}
#pragma pop

/* 8021A29C-8021A2F4 214BDC 0058+00 1/1 0/0 0/0 .text            getNumberTexture__13dMeter2Draw_cFi
 */
ResTIMG* dMeter2Draw_c::getNumberTexture(int i) {
    return (ResTIMG*)dComIfGp_getMain2DArchive()->getResource('TIMG',
                                                              dMeter2Info_getNumberTextureName(i));
}

/* ############################################################################################## */
/* 80430158-80430178 05CE78 0020+00 1/1 0/0 0/0 .bss             i_text_buf$8454 */
static u8 i_text_buf[32];

/* 8021A2F4-8021A468 214C34 0174+00 9/9 1/1 0/0 .text getActionString__13dMeter2Draw_cFUcUcPUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm char* dMeter2Draw_c::getActionString(u8 param_0, u8 param_1, u8* param_2) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/getActionString__13dMeter2Draw_cFUcUcPUc.s"
}
#pragma pop

/* ############################################################################################## */
/* 804548D8-804548DC 002ED8 0004+00 2/2 0/0 0/0 .sdata2          @8548 */
SECTION_SDATA2 static f32 lit_8548 = 100.0f;

/* 804548DC-804548E0 002EDC 0004+00 2/2 0/0 0/0 .sdata2          @8549 */
SECTION_SDATA2 static f32 lit_8549 = 48.0f;

/* 8021A468-8021A71C 214DA8 02B4+00 2/2 0/0 0/0 .text changeTextureItemB__13dMeter2Draw_cFUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::changeTextureItemB(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/changeTextureItemB__13dMeter2Draw_cFUc.s"
}
#pragma pop

/* 8021A71C-8021A9C8 21505C 02AC+00 1/1 0/0 0/0 .text changeTextureItemXY__13dMeter2Draw_cFiUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::changeTextureItemXY(int param_0, u8 param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/changeTextureItemXY__13dMeter2Draw_cFiUc.s"
}
#pragma pop

/* 8021A9C8-8021AAA4 215308 00DC+00 10/10 2/2 0/0 .text
 * setAlphaAnimeMin__13dMeter2Draw_cFP13CPaneMgrAlphas          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaAnimeMin(CPaneMgrAlpha* param_0, s16 param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaAnimeMin__13dMeter2Draw_cFP13CPaneMgrAlphas.s"
}
#pragma pop

/* 8021AAA4-8021AB84 2153E4 00E0+00 10/10 23/23 0/0 .text
 * setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas          */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setAlphaAnimeMax(CPaneMgrAlpha* param_0, s16 param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setAlphaAnimeMax__13dMeter2Draw_cFP13CPaneMgrAlphas.s"
}
#pragma pop

/* 8021AB84-8021AEC8 2154C4 0344+00 0/0 6/6 0/0 .text            setItemNum__13dMeter2Draw_cFUcUcUc
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setItemNum(u8 param_0, u8 param_1, u8 param_2) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setItemNum__13dMeter2Draw_cFUcUcUc.s"
}
#pragma pop

/* 8021AEC8-8021AF78 215808 00B0+00 0/0 1/1 0/0 .text            drawItemNum__13dMeter2Draw_cFUcf */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawItemNum(u8 param_0, f32 param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawItemNum__13dMeter2Draw_cFUcf.s"
}
#pragma pop

/* ############################################################################################## */
/* 804548E0-804548E4 002EE0 0004+00 1/1 0/0 0/0 .sdata2          @8774 */
SECTION_SDATA2 static f32 lit_8774 = 9.0f;

/* 804548E4-804548E8 002EE4 0004+00 1/1 0/0 0/0 .sdata2          @8775 */
SECTION_SDATA2 static f32 lit_8775 = 3.0f / 5.0f;

/* 80456B90-80456B94 000030 0004+00 1/1 0/0 0/0 .sbss2           @8746 */
SECTION_SBSS2 static u8 lit_8746[4];

/* 80456B94-80456B98 000034 0004+00 1/1 0/0 0/0 .sbss2           None */
SECTION_SBSS2 static u8 data_80456B94[4];

/* 80456B98-80456B9C 000038 0004+00 1/1 0/0 0/0 .sbss2           @8747 */
SECTION_SBSS2 static u8 lit_8747[4];

/* 80456B9C-80456BA0 00003C 0004+00 1/1 0/0 0/0 .sbss2           None */
SECTION_SBSS2 static u8 data_80456B9C[4];

/* 8021AF78-8021B0C8 2158B8 0150+00 0/0 1/1 0/0 .text drawKanteraMeter__13dMeter2Draw_cFUcf */
#ifdef NONMATCHING
void dMeter2Draw_c::drawKanteraMeter(u8 i_button, f32 i_alphaRate) {
    CPaneMgr* pane = mpItemXY[i_button];
    f32 local_74[2] = {0.0f};
    f32 local_68[2] = {0.0f};

    if (i_alphaRate == 1.0f) {
        i_alphaRate = pane->getAlphaRate();
    }

    JGeometry::TVec3<f32> vtx1 = pane->getPanePtr()->getGlbVtx(0);
    JGeometry::TVec3<f32> vtx2 = pane->getPanePtr()->getGlbVtx(3);

    mpKanteraMeter[i_button]->setPos((vtx1.x + vtx2.x) * 0.5f + 9.0f + local_74[i_button],
                                     vtx2.y + local_68[i_button]);
    mpKanteraMeter[i_button]->setScale(0.6f, 0.6f);
    mpKanteraMeter[i_button]->setNowGauge(dComIfGs_getMaxOil(), dComIfGs_getOil());
    mpKanteraMeter[i_button]->setAlphaRate(i_alphaRate);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::drawKanteraMeter(u8 param_0, f32 param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/drawKanteraMeter__13dMeter2Draw_cFUcf.s"
}
#pragma pop
#endif

/* 8021B0C8-8021B104 215A08 003C+00 0/0 3/3 0/0 .text            isButtonVisible__13dMeter2Draw_cFv
 */
u8 dMeter2Draw_c::isButtonVisible() {
    return (mpButtonParent->getAlphaRate() == FLOAT_LABEL(lit_4182)) ^ 1;
}

/* ############################################################################################## */
/* 804548E8-804548EC 002EE8 0004+00 2/2 0/0 0/0 .sdata2          @8992 */
SECTION_SDATA2 static f32 lit_8992 = 4.0f;

/* 804548EC-804548F0 002EEC 0004+00 1/1 0/0 0/0 .sdata2          @8993 */
SECTION_SDATA2 static f32 lit_8993 = -11.0f;

/* 804548F0-804548F4 002EF0 0004+00 4/4 0/0 0/0 .sdata2          @8994 */
SECTION_SDATA2 static f32 lit_8994 = 17.0f / 10.0f;

/* 804548F4-804548F8 002EF4 0004+00 3/3 0/0 0/0 .sdata2          @8995 */
SECTION_SDATA2 static f32 lit_8995 = -4.0f;

/* 804548F8-804548FC 002EF8 0004+00 2/2 0/0 0/0 .sdata2          @8996 */
SECTION_SDATA2 static f32 lit_8996 = -46.0f / 5.0f;

/* 804548FC-80454900 002EFC 0004+00 2/2 0/0 0/0 .sdata2          @8997 */
SECTION_SDATA2 static f32 lit_8997 = 19.0f / 20.0f;

/* 80454900-80454904 002F00 0004+00 2/2 0/0 0/0 .sdata2          @8998 */
SECTION_SDATA2 static f32 lit_8998 = 46.0f / 5.0f;

/* 80454904-80454908 002F04 0004+00 1/1 0/0 0/0 .sdata2          @8999 */
SECTION_SDATA2 static f32 lit_8999 = -14.0f;

/* 80454908-8045490C 002F08 0004+00 2/2 0/0 0/0 .sdata2          @9000 */
SECTION_SDATA2 static f32 lit_9000 = 2.0f;

/* 8045490C-80454910 002F0C 0004+00 2/2 0/0 0/0 .sdata2          @9001 */
SECTION_SDATA2 static f32 lit_9001 = 1.5f;

/* 80454910-80454914 002F10 0004+00 2/2 0/0 0/0 .sdata2          @9002 */
SECTION_SDATA2 static f32 lit_9002 = 350.0f;

/* 80454914-80454918 002F14 0004+00 1/1 0/0 0/0 .sdata2          @9003 */
SECTION_SDATA2 static f32 lit_9003 = -2.0f;

/* 80454918-8045491C 002F18 0004+00 1/1 0/0 0/0 .sdata2          @9004 */
SECTION_SDATA2 static f32 lit_9004 = -15.0f;

/* 8045491C-80454920 002F1C 0004+00 3/3 0/0 0/0 .sdata2          @9005 */
SECTION_SDATA2 static f32 lit_9005 = -13.0f / 10.0f;

/* 80454920-80454924 002F20 0004+00 2/2 0/0 0/0 .sdata2          @9006 */
SECTION_SDATA2 static f32 lit_9006 = -16.0f;

/* 80454924-80454928 002F24 0004+00 3/3 0/0 0/0 .sdata2          @9007 */
SECTION_SDATA2 static f32 lit_9007 = 1.888888955116272f;

/* 8021B104-8021B364 215A44 0260+00 3/2 0/0 0/0 .text            setItemParamX__13dMeter2Draw_cFUc
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setItemParamX(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setItemParamX__13dMeter2Draw_cFUc.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454928-8045492C 002F28 0004+00 3/3 0/0 0/0 .sdata2          @9025 */
SECTION_SDATA2 static f32 lit_9025 = 14.0f;

/* 8045492C-80454930 002F2C 0004+00 2/2 0/0 0/0 .sdata2          @9026 */
SECTION_SDATA2 static f32 lit_9026 = 13.0f / 10.0f;

/* 80454930-80454934 002F30 0004+00 2/2 0/0 0/0 .sdata2          @9027 */
SECTION_SDATA2 static f32 lit_9027 = -33.0f / 5.0f;

/* 80454934-80454938 002F34 0004+00 2/2 0/0 0/0 .sdata2          @9028 */
SECTION_SDATA2 static f32 lit_9028 = 33.0f / 5.0f;

/* 80454938-8045493C 002F38 0004+00 1/1 0/0 0/0 .sdata2          @9029 */
SECTION_SDATA2 static f32 lit_9029 = -9.0f / 5.0f;

/* 8021B364-8021B5B0 215CA4 024C+00 3/2 0/0 0/0 .text            setItemParamY__13dMeter2Draw_cFUc
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setItemParamY(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setItemParamY__13dMeter2Draw_cFUc.s"
}
#pragma pop

/* ############################################################################################## */
/* 8045493C-80454940 002F3C 0004+00 2/2 0/0 0/0 .sdata2          @9047 */
SECTION_SDATA2 static f32 lit_9047 = 11.0f / 5.0f;

/* 80454940-80454944 002F40 0004+00 2/2 0/0 0/0 .sdata2          @9048 */
SECTION_SDATA2 static f32 lit_9048 = -30.0f;

/* 80454944-80454948 002F44 0004+00 2/2 0/0 0/0 .sdata2          @9049 */
SECTION_SDATA2 static f32 lit_9049 = 0.75f;

/* 80454948-8045494C 002F48 0004+00 2/2 0/0 0/0 .sdata2          @9050 */
SECTION_SDATA2 static f32 lit_9050 = 4.0f / 5.0f;

/* 8045494C-80454950 002F4C 0004+00 2/2 0/0 0/0 .sdata2          @9051 */
SECTION_SDATA2 static f32 lit_9051 = 7.0f / 5.0f;

/* 80454950-80454954 002F50 0004+00 1/1 0/0 0/0 .sdata2          @9052 */
SECTION_SDATA2 static f32 lit_9052 = -3.5f;

/* 8021B5B0-8021B810 215EF0 0260+00 3/2 0/0 0/0 .text            setItemParamZ__13dMeter2Draw_cFUc
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setItemParamZ(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setItemParamZ__13dMeter2Draw_cFUc.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454954-80454958 002F54 0004+00 1/1 0/0 0/0 .sdata2          @9089 */
SECTION_SDATA2 static f32 lit_9089 = 17.299999237060547f;

/* 80454958-8045495C 002F58 0004+00 1/1 0/0 0/0 .sdata2          @9090 */
SECTION_SDATA2 static f32 lit_9090 = -46.79999923706055f;

/* 8045495C-80454960 002F5C 0004+00 1/1 0/0 0/0 .sdata2          @9091 */
SECTION_SDATA2 static f32 lit_9091 = 26.0f;

/* 80454960-80454964 002F60 0004+00 1/1 0/0 0/0 .sdata2          @9092 */
SECTION_SDATA2 static f32 lit_9092 = -54.70000076293945f;

/* 80454964-80454968 002F64 0004+00 1/1 0/0 0/0 .sdata2          @9093 */
SECTION_SDATA2 static f32 lit_9093 = 20.700000762939453f;

/* 80454968-8045496C 002F68 0004+00 1/1 0/0 0/0 .sdata2          @9094 */
SECTION_SDATA2 static f32 lit_9094 = -55.70000076293945f;

/* 8045496C-80454970 002F6C 0004+00 1/1 0/0 0/0 .sdata2          @9095 */
SECTION_SDATA2 static f32 lit_9095 = 77.0f / 5.0f;

/* 80454970-80454974 002F70 0004+00 1/1 0/0 0/0 .sdata2          @9096 */
SECTION_SDATA2 static f32 lit_9096 = -47.79999923706055f;

/* 80454974-80454978 002F74 0004+00 1/1 0/0 0/0 .sdata2          @9097 */
SECTION_SDATA2 static f32 lit_9097 = 23.299999237060547f;

/* 80454978-8045497C 002F78 0004+00 1/1 0/0 0/0 .sdata2          @9098 */
SECTION_SDATA2 static f32 lit_9098 = 29.299999237060547f;

/* 8045497C-80454980 002F7C 0004+00 1/1 0/0 0/0 .sdata2          @9099 */
SECTION_SDATA2 static f32 lit_9099 = 20.299999237060547f;

/* 80454980-80454984 002F80 0004+00 1/1 0/0 0/0 .sdata2          @9100 */
SECTION_SDATA2 static f32 lit_9100 = 12.0f;

/* 80454984-80454988 002F84 0004+00 1/1 0/0 0/0 .sdata2          @9101 */
SECTION_SDATA2 static f32 lit_9101 = -22.0f;

/* 80454988-8045498C 002F88 0004+00 1/1 0/0 0/0 .sdata2          @9102 */
SECTION_SDATA2 static f32 lit_9102 = 21.0f;

/* 8045498C-80454990 002F8C 0004+00 1/1 0/0 0/0 .sdata2          @9103 */
SECTION_SDATA2 static f32 lit_9103 = -46.70000076293945f;

/* 80454990-80454994 002F90 0004+00 1/1 0/0 0/0 .sdata2          @9104 */
SECTION_SDATA2 static f32 lit_9104 = 19.0f;

/* 80454994-80454998 002F94 0004+00 1/1 0/0 0/0 .sdata2          @9105 */
SECTION_SDATA2 static f32 lit_9105 = -45.0f;

/* 8021B810-8021BB6C 216150 035C+00 3/2 0/0 0/0 .text            setItemParamB__13dMeter2Draw_cFUc
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Draw_c::setItemParamB(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/setItemParamB__13dMeter2Draw_cFUc.s"
}
#pragma pop

/* 8021BB6C-8021BBB4 2164AC 0048+00 1/1 0/0 0/0 .text            getFishingType__13dMeter2Draw_cFv
 */
bool dMeter2Draw_c::getFishingType() {
    if (dMeter2Info_isGameStatus(1) && getCanoeFishing()) {
        return true;
    } else {
        return false;
    }
}

/* ############################################################################################## */
/* 803988D0-803988D0 024F30 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80398A2F = "tt_heart_00.bti";
SECTION_DEAD static char const* const stringBase_80398A3F = "tt_heart_01.bti";
SECTION_DEAD static char const* const stringBase_80398A4F = "tt_heart_02.bti";
SECTION_DEAD static char const* const stringBase_80398A5F = "tt_heart_03.bti";
SECTION_DEAD static char const* const stringBase_80398A6F = "F_SP127";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_80398A77 = "";
#pragma pop

/* 8021BBB4-8021BC24 2164F4 0070+00 2/2 1/1 0/0 .text            getCanoeFishing__13dMeter2Draw_cFv
 */
bool dMeter2Draw_c::getCanoeFishing() {
    if (!strcmp(dComIfGp_getStartStageName(), "F_SP127") &&
        g_dComIfG_gameInfo.play.mPlayer[0]->checkCanoeRide())
    {
        return TRUE;
    } else {
        return FALSE;
    }
}

/* 8021BC24-8021BC54 216564 0030+00 0/0 1/1 0/0 .text            getCameraSubject__13dMeter2Draw_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm bool dMeter2Draw_c::getCameraSubject() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/getCameraSubject__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 8021BC54-8021BCAC 216594 0058+00 0/0 1/1 0/0 .text            getItemSubject__13dMeter2Draw_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm bool dMeter2Draw_c::getItemSubject() {
    nofralloc
#include "asm/d/meter/d_meter2_draw/getItemSubject__13dMeter2Draw_cFv.s"
}
#pragma pop

/* 8021BCAC-8021BCC0 2165EC 0014+00 0/0 1/1 0/0 .text            getPlayerSubject__13dMeter2Draw_cFv
 */
bool dMeter2Draw_c::getPlayerSubject() {
    return i_dComIfGp_checkPlayerStatus0(0, 0x8000000);
}

/* 8021BCC0-8021BDD0 216600 0110+00 2/2 2/2 0/0 .text            isBButtonShow__13dMeter2Draw_cFb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm bool dMeter2Draw_c::isBButtonShow(bool param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_draw/isBButtonShow__13dMeter2Draw_cFb.s"
}
#pragma pop

/* 8021BDD0-8021BDDC 216710 000C+00 0/0 1/1 0/0 .text            getButtonTimer__13dMeter2Draw_cFv
 */
s16 dMeter2Draw_c::getButtonTimer() {
    return mpButtonParent->getAlphaTimer();
}

/* ############################################################################################## */
/* 803988B8-803988D0 024F18 0018+00 0/0 0/0 0/0 .rodata          tag$7759 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const tag_7759[24] = {
    0x69, 0x74, 0x65, 0x6D, 0x5F, 0x78, 0x5F, 0x6E, 0x69, 0x74, 0x65, 0x6D,
    0x5F, 0x79, 0x5F, 0x6E, 0x69, 0x74, 0x65, 0x6D, 0x5F, 0x6A, 0x5F, 0x6E,
};
COMPILER_STRIP_GATE(0x803988B8, &tag_7759);
#pragma pop

/* 803988D0-803988D0 024F30 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
