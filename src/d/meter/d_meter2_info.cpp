//
// Generated By: dol2asm
// Translation Unit: d/meter/d_meter2_info
//

#include "d/meter/d_meter2_info.h"
#include "d/save/d_save.h"
#include "dol2asm.h"
#include "dolphin/types.h"
#include "msl_c/string.h"

//
// Forward References:
//

extern "C" void __ct__13dMeter2Info_cFv();
extern "C" void __dt__13dMeter2Info_cFv();
extern "C" void init__13dMeter2Info_cFv();
extern "C" void setFloatingMessage__13dMeter2Info_cFUssb();
extern "C" void setFloatingFlow__13dMeter2Info_cFUssb();
extern "C" void isFloatingMessageVisible__13dMeter2Info_cFv();
extern "C" void decFloatingMessageTimer__13dMeter2Info_cFv();
extern "C" void resetFloatingMessage__13dMeter2Info_cFv();
extern "C" void decMsgKeyWaitTimer__13dMeter2Info_cFv();
extern "C" void getString__13dMeter2Info_cFUlPcP14JMSMesgEntry_c();
extern "C" void getStringKana__13dMeter2Info_cFUlPcP14JMSMesgEntry_c();
extern "C" void getStringKanji__13dMeter2Info_cFUlPcP14JMSMesgEntry_c();
extern "C" void getStringLength__13dMeter2Info_cFP10J2DTextBoxPc();
extern "C" void getFont__10J2DTextBoxCFv();
extern "C" void getStringLength__13dMeter2Info_cFP7JUTFontffPc();
extern "C" void onDirectUseItem__13dMeter2Info_cFi();
extern "C" void isDirectUseItem__13dMeter2Info_cFi();
extern "C" void setMeterString__13dMeter2Info_cFl();
extern "C" void resetWarpStatus__13dMeter2Info_cFv();
extern "C" void warpInProc__13dMeter2Info_cFv();
extern "C" void warpOutProc__13dMeter2Info_cFv();
extern "C" void resetMeterString__13dMeter2Info_cFv();
extern "C" void setWarpInfo__13dMeter2Info_cFPCcRC4cXyzsUcUcUc();
extern "C" void getItemType__13dMeter2Info_cFUc();
extern "C" void
readItemTexture__13dMeter2Info_cFUcPvP10J2DPicturePvP10J2DPicturePvP10J2DPicturePvP10J2DPicturei();
extern "C" void
setItemColor__13dMeter2Info_cFUcP10J2DPictureP10J2DPictureP10J2DPictureP10J2DPicture();
extern "C" void get2ndTexture__13dMeter2Info_cFUc();
extern "C" void get3rdTexture__13dMeter2Info_cFUc();
extern "C" void get4thTexture__13dMeter2Info_cFUc();
extern "C" void set1stColor__13dMeter2Info_cFUcP10J2DPicture();
extern "C" void set2ndColor__13dMeter2Info_cFUcP10J2DPicture();
extern "C" void set3rdColor__13dMeter2Info_cFUcP10J2DPicture();
extern "C" void set4thColor__13dMeter2Info_cFUcP10J2DPicture();
extern "C" void setHotSpringTimer__13dMeter2Info_cFUc();
extern "C" void decHotSpringTimer__13dMeter2Info_cFv();
extern "C" void changeWater__13dMeter2Info_cFUc();
extern "C" void setMiniGameItem__13dMeter2Info_cFUc();
extern "C" void resetMiniGameItem__13dMeter2Info_cFb();
extern "C" void setMiniGameCount__13dMeter2Info_cFSc();
extern "C" void setSaveStageName__13dMeter2Info_cFPCc();
extern "C" void dMeter2Info_getNowLifeGauge__Fv();
extern "C" void dMeter2Info_getNumberTextureName__Fi();
extern "C" void dMeter2Info_getPlusTextureName__Fv();
extern "C" void dMeter2Info_getPixel__FffffffPC7ResTIMG();
extern "C" void dMeter2Info_setCloth__FUcb();
extern "C" void dMeter2Info_setSword__FUcb();
extern "C" void dMeter2Info_setShield__FUcb();
extern "C" bool dMeter2Info_is2DActiveTouchArea__Fv();
extern "C" void dMeter2Info_isMapOpenCheck__Fv();
extern "C" void dMeter2Info_isItemOpenCheck__Fv();
extern "C" void dMeter2Info_getRecieveLetterNum__Fv();
extern "C" void dMeter2Info_getNewLetterNum__Fv();
extern "C" void dMeter2Info_setNewLetterSender__Fv();
extern "C" void dMeter2Info_recieveLetter__Fv();
extern "C" void dMeter2Info_set2DVibration__Fv();
extern "C" void dMeter2Info_set2DVibrationM__Fv();
extern "C" void __sinit_d_meter2_info_cpp();
extern "C" extern char const* const d_meter_d_meter2_info__stringBase0;
extern "C" u8 letter_data__12dMenu_Letter[512];

//
// External References:
//

extern "C" void dComIfGs_setSelectItemIndex__FiUc();
extern "C" void dComIfGs_setMixItemIndex__FiUc();
extern "C" void dComIfGs_getMixItemIndex__Fi();
extern "C" void dComIfGp_setSelectItem__Fi();
extern "C" void dComIfGs_setSelectEquipClothes__FUc();
extern "C" void dComIfGs_setSelectEquipSword__FUc();
extern "C" void dComIfGs_setSelectEquipShield__FUc();
extern "C" void dComIfGs_setWarpItemData__FPCc4cXyzsScUcUc();
extern "C" void dComIfGs_setWarpMarkFlag__FUc();
extern "C" void getSelectItemIndex__21dSv_player_status_a_cCFi();
extern "C" void setItem__17dSv_player_item_cFiUc();
extern "C" void getItem__17dSv_player_item_cCFib();
extern "C" void offFirstBit__21dSv_player_get_item_cFUc();
extern "C" void setBombNum__24dSv_player_item_record_cFUcUc();
extern "C" void getBombNum__24dSv_player_item_record_cCFUc();
extern "C" void isLightDropGetFlag__16dSv_light_drop_cCFUc();
extern "C" void onLetterGetFlag__17dSv_letter_info_cFi();
extern "C" void isLetterGetFlag__17dSv_letter_info_cCFi();
extern "C" void isEventBit__11dSv_event_cCFUs();
extern "C" void daNpcF_getPlayerInfoFromPlayerList__FiiR4cXyzR5csXyz();
extern "C" void isMapOpenCheck__11dMeterMap_cFv();
extern "C" void setLetterNameID__12dMsgObject_cFUs();
extern "C" void __ct__10dMsgFlow_cFv();
extern "C" void __dt__10dMsgFlow_cFv();
extern "C" void init__10dMsgFlow_cFP10fopAc_ac_ciiPP10fopAc_ac_c();
extern "C" void doFlow__10dMsgFlow_cFP10fopAc_ac_cPP10fopAc_ac_ci();
extern "C" void getMsgNo__10dMsgFlow_cFv();
extern "C" void __ct__5csXyzFsss();
extern "C" void __dl__FPv();
extern "C" void getGlbResource__10JKRArchiveFUlPCcP10JKRArchive();
extern "C" void readIdxResource__10JKRArchiveFPvUlUl();
extern "C" void DCStoreRangeNoSync();
extern "C" void __register_global_object();
extern "C" void __cvt_fp2unsigned();
extern "C" void _savegpr_19();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_19();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" u8 saveBitLabels__16dSv_event_flag_c[1644 + 4 /* padding */];
extern "C" void* item_resource__10dItem_data[1530];
extern "C" extern u8 g_dComIfG_gameInfo[122384];

//
// Declarations:
//

/* ############################################################################################## */
/* 80399168-80399168 0257C8 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80399168 = "";
SECTION_DEAD static char const* const stringBase_80399169 = "zel_00.bmg";
SECTION_DEAD static char const* const stringBase_80399174 = "D_MN01";
SECTION_DEAD static char const* const stringBase_8039917B = "D_MN07";
SECTION_DEAD static char const* const stringBase_80399182 =
    "im_font_number_32_32_ganshinkyo_0_02.bti";
SECTION_DEAD static char const* const stringBase_803991AB =
    "im_font_number_32_32_ganshinkyo_1_02.bti";
SECTION_DEAD static char const* const stringBase_803991D4 =
    "im_font_number_32_32_ganshinkyo_2_02.bti";
SECTION_DEAD static char const* const stringBase_803991FD =
    "im_font_number_32_32_ganshinkyo_3_02.bti";
SECTION_DEAD static char const* const stringBase_80399226 =
    "im_font_number_32_32_ganshinkyo_4_03.bti";
SECTION_DEAD static char const* const stringBase_8039924F =
    "im_font_number_32_32_ganshinkyo_5_02.bti";
SECTION_DEAD static char const* const stringBase_80399278 =
    "im_font_number_32_32_ganshinkyo_6_02.bti";
SECTION_DEAD static char const* const stringBase_803992A1 =
    "im_font_number_32_32_ganshinkyo_7_02.bti";
SECTION_DEAD static char const* const stringBase_803992CA =
    "im_font_number_32_32_ganshinkyo_8_02.bti";
SECTION_DEAD static char const* const stringBase_803992F3 =
    "im_font_number_32_32_ganshinkyo_9_02.bti";
#pragma pop

/* 803BF760-803BF7F4 -00001 0094+00 1/1 0/0 0/0 .data            @4572 */
SECTION_DATA static void* lit_4572[37] = {
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x64),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x24),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x24),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x24),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x24),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x24),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x24),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x24),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x34),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x3C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x44),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x4C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x2C),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x64),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x54),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x54),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x54),
    (void*)(((char*)get2ndTexture__13dMeter2Info_cFUc) + 0x5C),
};

/* 803BF7F4-803BF81C -00001 0028+00 1/1 0/0 0/0 .data            tex_name$5183 */
SECTION_DATA static char* tex_name_5183[10] = {
    (char*)(((char*)&d_meter_d_meter2_info__stringBase0) + 0x1A),
    (char*)(((char*)&d_meter_d_meter2_info__stringBase0) + 0x43),
    (char*)(((char*)&d_meter_d_meter2_info__stringBase0) + 0x6C),
    (char*)(((char*)&d_meter_d_meter2_info__stringBase0) + 0x95),
    (char*)(((char*)&d_meter_d_meter2_info__stringBase0) + 0xBE),
    (char*)(((char*)&d_meter_d_meter2_info__stringBase0) + 0xE7),
    (char*)(((char*)&d_meter_d_meter2_info__stringBase0) + 0x110),
    (char*)(((char*)&d_meter_d_meter2_info__stringBase0) + 0x139),
    (char*)(((char*)&d_meter_d_meter2_info__stringBase0) + 0x162),
    (char*)(((char*)&d_meter_d_meter2_info__stringBase0) + 0x18B),
};

/* 803BF81C-803BFA1C 01C93C 0200+00 3/3 6/6 0/0 .data            letter_data__12dMenu_Letter */
SECTION_DATA u8 dMenu_Letter::letter_data[512] = {
    0x09, 0xC5, 0x0A, 0x29, 0x0A, 0x8D, 0x01, 0x0B, 0x09, 0xC6, 0x0A, 0x2A, 0x0A, 0x8E, 0x02, 0x37,
    0x09, 0xC7, 0x0A, 0x2B, 0x0A, 0x8F, 0x02, 0x36, 0x09, 0xC8, 0x0A, 0x2C, 0x0A, 0x90, 0x00, 0x37,
    0x09, 0xC9, 0x0A, 0x2D, 0x0A, 0x91, 0x00, 0x39, 0x09, 0xCA, 0x0A, 0x2E, 0x0A, 0x92, 0x00, 0x67,
    0x09, 0xCB, 0x0A, 0x2F, 0x0A, 0x93, 0x01, 0x09, 0x09, 0xCC, 0x0A, 0x30, 0x0A, 0x94, 0x00, 0x4D,
    0x09, 0xCD, 0x0A, 0x31, 0x0A, 0x95, 0x01, 0x19, 0x09, 0xCE, 0x0A, 0x32, 0x0A, 0x96, 0x01, 0x08,
    0x09, 0xCF, 0x0A, 0x33, 0x0A, 0x97, 0x01, 0x0C, 0x09, 0xD4, 0x0A, 0x38, 0x0A, 0x9E, 0x01, 0x0C,
    0x09, 0xD1, 0x0A, 0x35, 0x0A, 0x9B, 0x00, 0xB6, 0x09, 0xD2, 0x0A, 0x36, 0x0A, 0x9C, 0x00, 0x67,
    0x09, 0xD5, 0x0A, 0x39, 0x0A, 0xA0, 0x03, 0x1C, 0x09, 0xD6, 0x0A, 0x3A, 0x0A, 0xA1, 0x01, 0x0A,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 803BFA1C-803BFA28 01CB3C 000C+00 2/2 0/0 0/0 .data            __vt__13dMeter2Info_c */
SECTION_DATA extern void* __vt__13dMeter2Info_c[3] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__13dMeter2Info_cFv,
};

/* 8021BDDC-8021BE20 21671C 0044+00 1/1 0/0 0/0 .text            __ct__13dMeter2Info_cFv */
dMeter2Info_c::dMeter2Info_c() {
    init();
    mTempBits = 0;
}

/* 8021BE20-8021BE68 216760 0048+00 2/1 0/0 0/0 .text            __dt__13dMeter2Info_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMeter2Info_c::~dMeter2Info_c() {
    nofralloc
#include "asm/d/meter/d_meter2_info/__dt__13dMeter2Info_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454998-8045499C 002F98 0004+00 4/4 0/0 0/0 .sdata2          @3916 */
SECTION_SDATA2 static u8 lit_3916[4] = {
    0x00,
    0x00,
    0x00,
    0x00,
};

/* 8045499C-804549A0 002F9C 0004+00 1/1 0/0 0/0 .sdata2          @3917 */
SECTION_SDATA2 static f32 lit_3917 = 1.0f;

/* 804549A0-804549A4 002FA0 0004+00 1/1 0/0 0/0 .sdata2          @3918 */
SECTION_SDATA2 static f32 lit_3918 = 30.0f;

/* 804549A4-804549A8 002FA4 0004+00 1/1 0/0 0/0 .sdata2          @3919 */
SECTION_SDATA2 static f32 lit_3919 = 304.0f;

/* 804549A8-804549AC 002FA8 0004+00 1/1 0/0 0/0 .sdata2          @3920 */
SECTION_SDATA2 static f32 lit_3920 = 224.0f;

/* 804549AC-804549B0 002FAC 0004+00 1/1 0/0 0/0 .sdata2          @3921 */
SECTION_SDATA2 static f32 lit_3921 = 608.0f;

/* 804549B0-804549B8 002FB0 0004+04 1/1 0/0 0/0 .sdata2          @3922 */
SECTION_SDATA2 static f32 lit_3922[1 + 1 /* padding */] = {
    448.0f,
    /* padding */
    0.0f,
};

/* 8021BE68-8021C0E0 2167A8 0278+00 1/1 1/1 0/0 .text            init__13dMeter2Info_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::init() {
    nofralloc
#include "asm/d/meter/d_meter2_info/init__13dMeter2Info_cFv.s"
}
#pragma pop

/* 8021C0E0-8021C11C 216A20 003C+00 0/0 1/1 2/2 .text setFloatingMessage__13dMeter2Info_cFUssb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::setFloatingMessage(u16 param_0, s16 param_1, bool param_2) {
    nofralloc
#include "asm/d/meter/d_meter2_info/setFloatingMessage__13dMeter2Info_cFUssb.s"
}
#pragma pop

/* 8021C11C-8021C1DC 216A5C 00C0+00 0/0 0/0 1/1 .text setFloatingFlow__13dMeter2Info_cFUssb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::setFloatingFlow(u16 param_0, s16 param_1, bool param_2) {
    nofralloc
#include "asm/d/meter/d_meter2_info/setFloatingFlow__13dMeter2Info_cFUssb.s"
}
#pragma pop

/* 8021C1DC-8021C1F0 216B1C 0014+00 0/0 4/4 0/0 .text isFloatingMessageVisible__13dMeter2Info_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm int dMeter2Info_c::isFloatingMessageVisible() {
    nofralloc
#include "asm/d/meter/d_meter2_info/isFloatingMessageVisible__13dMeter2Info_cFv.s"
}
#pragma pop

/* 8021C1F0-8021C218 216B30 0028+00 0/0 1/1 0/0 .text decFloatingMessageTimer__13dMeter2Info_cFv
 */
int dMeter2Info_c::decFloatingMessageTimer() {
    if (mFloatingMessageTimer > 0) {
        mFloatingMessageTimer--;
    } else {
        mFloatingMessageTimer = 0;
    }
    return mFloatingMessageTimer;
}

/* 8021C218-8021C238 216B58 0020+00 0/0 3/3 0/0 .text resetFloatingMessage__13dMeter2Info_cFv */
void dMeter2Info_c::resetFloatingMessage() {
    mFloatingFlowID = -1;
    mFloatingMessageID = -1;
    mFloatingMessageTimer = 0;
    mFloatingMessageWakuVisible = 0;
}

/* 8021C238-8021C250 216B78 0018+00 0/0 2/2 0/0 .text decMsgKeyWaitTimer__13dMeter2Info_cFv */
void dMeter2Info_c::decMsgKeyWaitTimer() {
    if (mMsgKeyWaitTimer <= 0) {
        return;
    }

    mMsgKeyWaitTimer--;
}

/* 8021C250-8021C370 216B90 0120+00 0/0 16/16 0/0 .text
 * getString__13dMeter2Info_cFUlPcP14JMSMesgEntry_c             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::getString(u32 param_0, char* param_1, JMSMesgEntry_c* param_2) {
    nofralloc
#include "asm/d/meter/d_meter2_info/getString__13dMeter2Info_cFUlPcP14JMSMesgEntry_c.s"
}
#pragma pop

/* 8021C370-8021C544 216CB0 01D4+00 0/0 1/1 0/0 .text
 * getStringKana__13dMeter2Info_cFUlPcP14JMSMesgEntry_c         */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::getStringKana(u32 param_0, char* param_1, JMSMesgEntry_c* param_2) {
    nofralloc
#include "asm/d/meter/d_meter2_info/getStringKana__13dMeter2Info_cFUlPcP14JMSMesgEntry_c.s"
}
#pragma pop

/* 8021C544-8021C6A4 216E84 0160+00 0/0 32/32 1/1 .text
 * getStringKanji__13dMeter2Info_cFUlPcP14JMSMesgEntry_c        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::getStringKanji(u32 param_0, char* param_1, JMSMesgEntry_c* param_2) {
    nofralloc
#include "asm/d/meter/d_meter2_info/getStringKanji__13dMeter2Info_cFUlPcP14JMSMesgEntry_c.s"
}
#pragma pop

/* ############################################################################################## */
/* 804549B8-804549C0 002FB8 0008+00 2/2 0/0 0/0 .sdata2          @4108 */
SECTION_SDATA2 static f64 lit_4108 = 4503601774854144.0 /* cast s32 to float */;

/* 8021C6A4-8021C7F4 216FE4 0150+00 0/0 1/1 0/0 .text
 * getStringLength__13dMeter2Info_cFP10J2DTextBoxPc             */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm double dMeter2Info_c::getStringLength(J2DTextBox* param_0, char* param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_info/getStringLength__13dMeter2Info_cFP10J2DTextBoxPc.s"
}
#pragma pop

/* 8021C7F4-8021C7FC 217134 0008+00 0/0 1/0 0/0 .text            getFont__10J2DTextBoxCFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DTextBox::getFont() const {
    nofralloc
#include "asm/d/meter/d_meter2_info/getFont__10J2DTextBoxCFv.s"
}
#pragma pop

/* 8021C7FC-8021C934 21713C 0138+00 0/0 3/3 0/0 .text
 * getStringLength__13dMeter2Info_cFP7JUTFontffPc               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMeter2Info_c* dMeter2Info_c::getStringLength(JUTFont* param_0, f32 param_1, f32 param_2,
                                                  char* param_3) {
    nofralloc
#include "asm/d/meter/d_meter2_info/getStringLength__13dMeter2Info_cFP7JUTFontffPc.s"
}
#pragma pop

/* 8021C934-8021C950 217274 001C+00 0/0 2/2 0/0 .text            onDirectUseItem__13dMeter2Info_cFi
 */
void dMeter2Info_c::onDirectUseItem(int param_0) {
    mDirectUseItem |= (u8)(1 << param_0);
}

/* 8021C950-8021C970 217290 0020+00 0/0 4/4 0/0 .text            isDirectUseItem__13dMeter2Info_cFi
 */
bool dMeter2Info_c::isDirectUseItem(int param_0) {
    return (mDirectUseItem & (u8)(1 << param_0)) != 0;
}

/* 80430188-80430280 05CEA8 00F8+00 4/4 267/267 70/70 .bss             g_meter2_info */
dMeter2Info_c g_meter2_info;

/* 8021C970-8021C9DC 2172B0 006C+00 0/0 0/0 5/5 .text            setMeterString__13dMeter2Info_cFl
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm int dMeter2Info_c::setMeterString(s32 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_info/setMeterString__13dMeter2Info_cFl.s"
}
#pragma pop

/* 8021C9DC-8021CA04 21731C 0028+00 1/1 3/3 0/0 .text            resetWarpStatus__13dMeter2Info_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::resetWarpStatus() {
    nofralloc
#include "asm/d/meter/d_meter2_info/resetWarpStatus__13dMeter2Info_cFv.s"
}
#pragma pop

/* 8021CA04-8021CA70 217344 006C+00 0/0 2/2 3/3 .text            warpInProc__13dMeter2Info_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::warpInProc() {
    nofralloc
#include "asm/d/meter/d_meter2_info/warpInProc__13dMeter2Info_cFv.s"
}
#pragma pop

/* 8021CA70-8021CC00 2173B0 0190+00 0/0 1/1 0/0 .text            warpOutProc__13dMeter2Info_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::warpOutProc() {
    nofralloc
#include "asm/d/meter/d_meter2_info/warpOutProc__13dMeter2Info_cFv.s"
}
#pragma pop

/* 8021CC00-8021CC0C 217540 000C+00 0/0 1/1 1/1 .text            resetMeterString__13dMeter2Info_cFv
 */
void dMeter2Info_c::resetMeterString() {
    mMeterString = 0;
}

/* 8021CC0C-8021CC80 21754C 0074+00 1/1 1/1 0/0 .text
 * setWarpInfo__13dMeter2Info_cFPCcRC4cXyzsUcUcUc               */
void dMeter2Info_c::setWarpInfo(const char* i_stageName, const cXyz& i_position, s16 i_angle,
                                u8 i_roomNo, u8 p5, u8 i_warpPlayerNo) {
    strcpy(mWarpInfo.mStageName, i_stageName);
    mWarpInfo.mPosition = i_position;
    mWarpInfo.mAngle = i_angle;
    mWarpInfo.mRoomNo = i_roomNo;
    mWarpInfo.unk79 = p5;
    mWarpInfo.mWarpPlayerNo = i_warpPlayerNo;
}

/* 8021CC80-8021CF08 2175C0 0288+00 2/2 0/0 0/0 .text            getItemType__13dMeter2Info_cFUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm u8 dMeter2Info_c::getItemType(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_info/getItemType__13dMeter2Info_cFUc.s"
}
#pragma pop

/* 8021CF08-8021D36C 217848 0464+00 0/0 9/9 0/0 .text
 * readItemTexture__13dMeter2Info_cFUcPvP10J2DPicturePvP10J2DPicturePvP10J2DPicturePvP10J2DPicturei
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm u8 dMeter2Info_c::readItemTexture(u8 param_0, void* param_1, J2DPicture* param_2, void* param_3,
                                      J2DPicture* param_4, void* param_5, J2DPicture* param_6,
                                      void* param_7, J2DPicture* param_8, int param_9) {
    nofralloc
#include "asm/d/meter/d_meter2_info/func_8021CF08.s"
}
#pragma pop

/* 8021D36C-8021D44C 217CAC 00E0+00 0/0 2/2 0/0 .text
 * setItemColor__13dMeter2Info_cFUcP10J2DPictureP10J2DPictureP10J2DPictureP10J2DPicture */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::setItemColor(u8 param_0, J2DPicture* param_1, J2DPicture* param_2,
                                     J2DPicture* param_3, J2DPicture* param_4) {
    nofralloc
#include "asm/d/meter/d_meter2_info/setItemColor__13dMeter2Info_cFUcP10J2DPictureP10J2DPictureP10J2DPictureP10J2DPicture.s"
}
#pragma pop

/* 8021D44C-8021D4B8 217D8C 006C+00 2/1 0/0 0/0 .text            get2ndTexture__13dMeter2Info_cFUc
 */
// switch label weirdness
#ifdef NONMATCHING
s8 dMeter2Info_c::get2ndTexture(u8 param_0) {
    switch (param_0) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
        return 0x2e;
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 31:
        return 0xe;
    case 27:
        return 0x14;
    case 28:
        return 0x27;
    case 29:
        return 0xf;
    case 30:
        return 0x10;
    case 33:
    case 34:
    case 35:
        return 0x69;
    case 36:
        return 0x2a;
    case 32:
    default:
        return -1;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm s8 dMeter2Info_c::get2ndTexture(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_info/get2ndTexture__13dMeter2Info_cFUc.s"
}
#pragma pop
#endif

/* 8021D4B8-8021D4FC 217DF8 0044+00 1/1 0/0 0/0 .text            get3rdTexture__13dMeter2Info_cFUc
 */
// one instruction off
#ifdef NONMATCHING
s8 dMeter2Info_c::get3rdTexture(u8 p1) {
    switch (p1) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
        return 0x2e;
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 31:
        return 0x0e;
    default:
        return -1;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm s8 dMeter2Info_c::get3rdTexture(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_info/get3rdTexture__13dMeter2Info_cFUc.s"
}
#pragma pop
#endif

/* 8021D4FC-8021D524 217E3C 0028+00 1/1 0/0 0/0 .text            get4thTexture__13dMeter2Info_cFUc
 */
s8 dMeter2Info_c::get4thTexture(u8 p1) {
    switch (p1) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
        return 0x2e;
    default:
        return -1;
    }
}

struct TColor {
    u8 r;
    u8 g;
    u8 b;
    u8 a;
};

/* ############################################################################################## */
/* 80398A78-80398B0C 0250D8 0094+00 2/2 0/0 0/0 .rodata          black_color$4634 */
SECTION_RODATA static TColor const black_color_4634[37] = {
    {0x00, 0x00, 0x00, 0x00}, {0x00, 0x60, 0x00, 0x00}, {0x00, 0x00, 0xC0, 0x00},
    {0xA0, 0x60, 0x00, 0x00}, {0xA0, 0x00, 0x00, 0x00}, {0x40, 0x00, 0x60, 0x00},
    {0xE0, 0x00, 0x00, 0x00}, {0x40, 0x40, 0x40, 0x00}, {0x6E, 0x6E, 0x64, 0x00},
    {0x32, 0x00, 0x00, 0x00}, {0x00, 0x7F, 0x00, 0x00}, {0x00, 0x00, 0x7F, 0x00},
    {0xAF, 0x9B, 0x6E, 0x00}, {0xAA, 0x9B, 0x6E, 0x00}, {0x55, 0x37, 0x14, 0x00},
    {0x6E, 0x6E, 0x6E, 0x00}, {0x6E, 0x6E, 0x6E, 0x00}, {0xFF, 0x58, 0x00, 0x00},
    {0x6C, 0x3E, 0x00, 0x00}, {0x00, 0x00, 0x00, 0x00}, {0x32, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x7F, 0x00}, {0x00, 0x7F, 0x00, 0x00}, {0x55, 0x37, 0x14, 0x00},
    {0x00, 0x00, 0x22, 0x00}, {0x2B, 0x18, 0x22, 0x00}, {0x00, 0x00, 0x00, 0x00},
    {0x46, 0x46, 0x41, 0x00}, {0x46, 0x46, 0x41, 0x00}, {0x46, 0x46, 0x41, 0x00},
    {0x46, 0x46, 0x41, 0x00}, {0x00, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00},
};
COMPILER_STRIP_GATE(0x80398A78, &black_color_4634);

/* 80398B0C-80398BA0 02516C 0094+00 0/1 0/0 0/0 .rodata          white_color$4635 */
#pragma push
#pragma force_active on
SECTION_RODATA static TColor const white_color_4635[37] = {
    {0xFF, 0xFF, 0xFF, 0xFF}, {0x60, 0xFF, 0x00, 0xFF}, {0x00, 0xFF, 0xFF, 0xFF},
    {0xFF, 0xFF, 0x00, 0xFF}, {0xFF, 0x80, 0x80, 0xFF}, {0xBE, 0x40, 0xFF, 0xFF},
    {0xFF, 0xC0, 0x00, 0xFF}, {0xC0, 0xC0, 0xC0, 0xFF}, {0xF5, 0xF5, 0xFF, 0xFF},
    {0xFF, 0xD2, 0xAA, 0xFF}, {0xEF, 0xF5, 0xC9, 0xFF}, {0xB0, 0xFF, 0xFF, 0xFF},
    {0xFF, 0xFF, 0xF0, 0xFF}, {0xFF, 0xFF, 0xF0, 0xFF}, {0xFF, 0xFF, 0xD7, 0xFF},
    {0xF5, 0xF5, 0xFF, 0xFF}, {0xF5, 0xF5, 0xFF, 0xFF}, {0xFF, 0xFF, 0xC2, 0xFF},
    {0xFF, 0x9D, 0x00, 0xFF}, {0xC8, 0xC8, 0xC8, 0xFF}, {0xFF, 0xD2, 0xAA, 0xFF},
    {0xB0, 0xFF, 0xFF, 0xFF}, {0xEF, 0xF5, 0xC9, 0xFF}, {0xFF, 0xFF, 0xD7, 0xFF},
    {0xD7, 0xCF, 0xF5, 0xFF}, {0xFF, 0xFF, 0x33, 0xFF}, {0xC8, 0xC8, 0xC8, 0xFF},
    {0xF5, 0xF5, 0xFF, 0xFF}, {0xF5, 0xF5, 0xFF, 0xFF}, {0xF5, 0xF5, 0xFF, 0xFF},
    {0xF5, 0xF5, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF},
    {0xFF, 0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF},
    {0xFF, 0xFF, 0xFF, 0xFF},
};
COMPILER_STRIP_GATE(0x80398B0C, &white_color_4635);
#pragma pop

/* 80398BA0-80398C34 025200 0094+00 0/1 0/0 0/0 .rodata          vertex_color_lu$4636 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const vertex_color_lu_4636[148] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x78, 0xAF, 0xFF, 0x5C, 0xB4, 0x16, 0xFF, 0xA4,
    0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0xAF, 0xFF, 0xA4, 0xFF, 0x00, 0xFF, 0x5C, 0xB4,
    0x16, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xC9, 0xB4, 0xFF, 0xFF, 0x3C, 0x0A, 0x00, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
    0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xA0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
COMPILER_STRIP_GATE(0x80398BA0, &vertex_color_lu_4636);
#pragma pop

/* 80398C34-80398CC8 025294 0094+00 0/1 0/0 0/0 .rodata          vertex_color_ru$4637 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const vertex_color_ru_4637[148] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x73, 0xFF, 0xFF, 0xFF, 0x2A, 0xFF, 0x98,
    0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x73, 0xFF, 0x98, 0xFF, 0x00, 0xFF, 0xFF, 0xFF,
    0x2A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x39, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
    0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xA0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
COMPILER_STRIP_GATE(0x80398C34, &vertex_color_ru_4637);
#pragma pop

/* 80398CC8-80398D5C 025328 0094+00 0/1 0/0 0/0 .rodata          vertex_color_ld$4638 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const vertex_color_ld_4638[148] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0x78, 0x6E, 0x3C, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0x3C, 0x32, 0x50, 0xFF, 0x00,
    0x00, 0x74, 0xFF, 0xFA, 0xC8, 0x9B, 0xFF, 0xFA, 0xC8, 0x9B, 0xFF, 0x46, 0x87, 0x00, 0xFF,
    0x5A, 0xB4, 0xB4, 0xFF, 0x5A, 0xB4, 0xB4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x74, 0xFF, 0x3C, 0x32,
    0x50, 0xFF, 0x46, 0x87, 0x00, 0xFF, 0x3C, 0x32, 0x50, 0x49, 0xFF, 0xFF, 0x00, 0xFF, 0x00,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0x00, 0xFF, 0xE0, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
COMPILER_STRIP_GATE(0x80398CC8, &vertex_color_ld_4638);
#pragma pop

/* 80398D5C-80398DF0 0253BC 0094+00 0/1 0/0 0/0 .rodata          vertex_color_rd$4639 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const vertex_color_rd_4639[148] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0x78, 0x6E, 0x3C, 0xFF, 0xFF, 0x96, 0x00, 0xFF, 0x55, 0x42, 0x00, 0xFF, 0x61,
    0x48, 0xFF, 0xFF, 0xFF, 0xFF, 0xAA, 0xFF, 0xFF, 0xFF, 0xAA, 0xFF, 0xAF, 0x91, 0x23, 0xFF,
    0xE6, 0xFA, 0xFF, 0xFF, 0xE6, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x96, 0x00, 0xFF, 0x61, 0x48, 0xFF, 0xFF, 0x55, 0x42,
    0x00, 0xFF, 0xAF, 0x91, 0x23, 0xFF, 0x3C, 0x09, 0x4E, 0xFF, 0xBA, 0x98, 0x00, 0xFF, 0x00,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0x00, 0xFF, 0xE0, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
COMPILER_STRIP_GATE(0x80398D5C, &vertex_color_rd_4639);
#pragma pop

/* 8021D524-8021D644 217E64 0120+00 2/2 0/0 0/0 .text set1stColor__13dMeter2Info_cFUcP10J2DPicture
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::set1stColor(u8 param_0, J2DPicture* param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_info/set1stColor__13dMeter2Info_cFUcP10J2DPicture.s"
}
#pragma pop

/* ############################################################################################## */
/* 80398DF0-80398E84 025450 0094+00 0/1 0/0 0/0 .rodata          black_color$4675 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const black_color_4675[148] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x86, 0xD4, 0x00, 0xE6, 0x1E, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x80398DF0, &black_color_4675);
#pragma pop

/* 80398E84-80398F18 0254E4 0094+00 0/1 0/0 0/0 .rodata          white_color$4676 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const white_color_4676[148] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xF5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
COMPILER_STRIP_GATE(0x80398E84, &white_color_4676);
#pragma pop

/* 80398F18-80398FAC 025578 0094+00 0/1 0/0 0/0 .rodata          vertex_color_lu$4677 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const vertex_color_lu_4677[148] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
COMPILER_STRIP_GATE(0x80398F18, &vertex_color_lu_4677);
#pragma pop

/* 80398FAC-80399040 02560C 0094+00 0/1 0/0 0/0 .rodata          vertex_color_ru$4678 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const vertex_color_ru_4678[148] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x58, 0xFF, 0xFF, 0xFF, 0x58, 0xFF, 0xFF, 0xFF, 0x58,
    0xFF, 0xFF, 0xFF, 0x58, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
COMPILER_STRIP_GATE(0x80398FAC, &vertex_color_ru_4678);
#pragma pop

/* 80399040-803990D4 0256A0 0094+00 0/1 0/0 0/0 .rodata          vertex_color_ld$4679 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const vertex_color_ld_4679[148] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
COMPILER_STRIP_GATE(0x80399040, &vertex_color_ld_4679);
#pragma pop

/* 803990D4-80399168 025734 0094+00 0/1 0/0 0/0 .rodata          vertex_color_rd$4680 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const vertex_color_rd_4680[148] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCD, 0xFF, 0xFF, 0xFF, 0xCD, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
COMPILER_STRIP_GATE(0x803990D4, &vertex_color_rd_4680);
#pragma pop

/* 8021D644-8021D764 217F84 0120+00 2/2 0/0 0/0 .text set2ndColor__13dMeter2Info_cFUcP10J2DPicture
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::set2ndColor(u8 param_0, J2DPicture* param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_info/set2ndColor__13dMeter2Info_cFUcP10J2DPicture.s"
}
#pragma pop

/* 8021D764-8021DB64 2180A4 0400+00 2/2 0/0 0/0 .text set3rdColor__13dMeter2Info_cFUcP10J2DPicture
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::set3rdColor(u8 param_0, J2DPicture* param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_info/set3rdColor__13dMeter2Info_cFUcP10J2DPicture.s"
}
#pragma pop

/* 8021DB64-8021DCC4 2184A4 0160+00 2/2 0/0 0/0 .text set4thColor__13dMeter2Info_cFUcP10J2DPicture
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::set4thColor(u8 param_0, J2DPicture* param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_info/set4thColor__13dMeter2Info_cFUcP10J2DPicture.s"
}
#pragma pop

/* 8021DCC4-8021DCE0 218604 001C+00 0/0 2/2 0/0 .text setHotSpringTimer__13dMeter2Info_cFUc */
void dMeter2Info_c::setHotSpringTimer(u8 p1) {
    int i_bottleIdx = p1 - 11;
    mHotSpringTimer[i_bottleIdx] = 900;
}

/* 8021DCE0-8021DD5C 218620 007C+00 0/0 1/1 0/0 .text decHotSpringTimer__13dMeter2Info_cFv */
void dMeter2Info_c::decHotSpringTimer() {
    for (int i = 0; i < 4; i++) {
        if (mHotSpringTimer[i] != 0) {
            mHotSpringTimer[i]--;
            if (mHotSpringTimer[i] == 0) {
                changeWater(i + 11);
            }
        }
    }
}

/* 8021DD5C-8021DE18 21869C 00BC+00 2/2 1/1 0/0 .text            changeWater__13dMeter2Info_cFUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::changeWater(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_info/changeWater__13dMeter2Info_cFUc.s"
}
#pragma pop

/* 8021DE18-8021E0C4 218758 02AC+00 0/0 3/3 3/3 .text            setMiniGameItem__13dMeter2Info_cFUc
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::setMiniGameItem(u8 param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_info/setMiniGameItem__13dMeter2Info_cFUc.s"
}
#pragma pop

/* 8021E0C4-8021E268 218A04 01A4+00 0/0 3/3 4/4 .text resetMiniGameItem__13dMeter2Info_cFb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_c::resetMiniGameItem(bool param_0) {
    nofralloc
#include "asm/d/meter/d_meter2_info/resetMiniGameItem__13dMeter2Info_cFb.s"
}
#pragma pop

/* 8021E268-8021E290 218BA8 0028+00 0/0 0/0 5/5 .text setMiniGameCount__13dMeter2Info_cFSc */
void dMeter2Info_c::setMiniGameCount(s8 pCount) {
    if (pCount < -99) {
        pCount = -99;
    }
    if (pCount > 99) {
        pCount = 99;
    }
    mMiniGameCount = pCount;
}

/* 8021E290-8021E2B4 218BD0 0024+00 1/1 2/2 0/0 .text setSaveStageName__13dMeter2Info_cFPCc */
void dMeter2Info_c::setSaveStageName(const char* i_stageName) {
    strcpy(mSaveStageName, i_stageName);
}

/* 8021E2B4-8021E2C8 218BF4 0014+00 0/0 0/0 1/1 .text            dMeter2Info_getNowLifeGauge__Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_getNowLifeGauge() {
    nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_getNowLifeGauge__Fv.s"
}
#pragma pop

/* 8021E2C8-8021E2DC 218C08 0014+00 0/0 11/11 3/3 .text dMeter2Info_getNumberTextureName__Fi */
char* dMeter2Info_getNumberTextureName(int pIndex) {
    return tex_name_5183[pIndex];
}  //

/* 804510B8-804510BC 0005B8 0004+00 1/1 0/0 0/0 .sbss            tex_name$5188 */
static char* tex_name_5188;

/* 804510BC-804510C0 0005BC 0004+00 1/1 0/0 0/0 .sbss            None */
static s8 data_804510BC;

char* dMeter2Info_getPlusTextureName() {
    if (data_804510BC == 0) {
        tex_name_5188 = "im_plus_metal_24ｘ24_00.bti";
        data_804510BC = 1;
    }
    return tex_name_5188;
}

/* ############################################################################################## */
/* 804549C0-804549C8 002FC0 0008+00 1/1 0/0 0/0 .sdata2          @5206 */
SECTION_SDATA2 static f64 lit_5206 = 4503599627370496.0 /* cast u32 to float */;

/* 8021E308-8021E4B0 218C48 01A8+00 0/0 3/3 0/0 .text dMeter2Info_getPixel__FffffffPC7ResTIMG */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_getPixel(f32 param_0, f32 param_1, f32 param_2, f32 param_3, f32 param_4,
                              f32 param_5, ResTIMG const* param_6) {
    nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_getPixel__FffffffPC7ResTIMG.s"
}
#pragma pop

/* 8021E4B0-8021E530 218DF0 0080+00 0/0 2/2 1/1 .text            dMeter2Info_setCloth__FUcb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_setCloth(u8 param_0, bool param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_setCloth__FUcb.s"
}
#pragma pop

/* 8021E530-8021E5D4 218E70 00A4+00 0/0 3/3 3/3 .text            dMeter2Info_setSword__FUcb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_setSword(u8 param_0, bool param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_setSword__FUcb.s"
}
#pragma pop

/* 8021E5D4-8021E660 218F14 008C+00 0/0 3/3 0/0 .text            dMeter2Info_setShield__FUcb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_setShield(u8 param_0, bool param_1) {
    nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_setShield__FUcb.s"
}
#pragma pop

/* 8021E660-8021E668 218FA0 0008+00 0/0 1/1 0/0 .text            dMeter2Info_is2DActiveTouchArea__Fv
 */
bool dMeter2Info_is2DActiveTouchArea() {
    return false;
}

/* 8021E668-8021E688 218FA8 0020+00 0/0 1/1 0/0 .text            dMeter2Info_isMapOpenCheck__Fv */
#ifdef NONMATCHING
bool dMeter2Info_isMapOpenCheck() {
    return dMeter2Info_getMeterMapClass()->isMapOpenCheck();
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_isMapOpenCheck() {
    nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_isMapOpenCheck__Fv.s"
}
#pragma pop
#endif

/* 8021E688-8021E6E4 218FC8 005C+00 0/0 2/2 0/0 .text            dMeter2Info_isItemOpenCheck__Fv */
#ifdef NONMATCHING
bool dMeter2Info_isItemOpenCheck() {
    if (!daPy_getPlayerActorClass()->checkCanoeSlider()) {
        if (!daPy_getPlayerActorClass()->getSumouMode() && !dMeter2Info_isSub2DStatus(1)) {
            return true;
        }
    }
    return false;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_isItemOpenCheck() {
    nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_isItemOpenCheck__Fv.s"
}
#pragma pop
#endif

/* 8021E6E4-8021E754 219024 0070+00 1/1 2/2 0/0 .text            dMeter2Info_getRecieveLetterNum__Fv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_getRecieveLetterNum() {
    nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_getRecieveLetterNum__Fv.s"
}
#pragma pop

/* 8021E754-8021E804 219094 00B0+00 0/0 4/4 2/2 .text            dMeter2Info_getNewLetterNum__Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_getNewLetterNum() {
    nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_getNewLetterNum__Fv.s"
}
#pragma pop

/* 8021E804-8021E8DC 219144 00D8+00 0/0 1/1 0/0 .text            dMeter2Info_setNewLetterSender__Fv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_setNewLetterSender() {
    nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_setNewLetterSender__Fv.s"
}
#pragma pop

/* 8021E8DC-8021E9D0 21921C 00F4+00 0/0 1/1 0/0 .text            dMeter2Info_recieveLetter__Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMeter2Info_recieveLetter() {
    nofralloc
#include "asm/d/meter/d_meter2_info/dMeter2Info_recieveLetter__Fv.s"
}
#pragma pop

/* 8021E9D0-8021E9D4 219310 0004+00 0/0 33/33 0/0 .text            dMeter2Info_set2DVibration__Fv */
void dMeter2Info_set2DVibration() {}

/* 8021E9D4-8021E9D8 219314 0004+00 0/0 12/12 0/0 .text            dMeter2Info_set2DVibrationM__Fv
 */
void dMeter2Info_set2DVibrationM() {}

/* 80399168-80399168 0257C8 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
