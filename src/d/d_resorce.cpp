//
// Generated By: dol2asm
// Translation Unit: d/d_resorce
//

#include "d/d_resorce.h"
#include "JSystem/JKernel/JKRSolidHeap.h"
#include "dol2asm.h"
#include "dolphin/mtx/mtx.h"
#include "dolphin/types.h"

//
// Types:
//

struct mDoMtx_stack_c {
    static u8 now[48];
};

struct mDoGph_gInf_c {
    static u8 mFrameBufferTimg[4];
    static u8 mZbufferTimg[4];
};

struct mDoExt_transAnmBas {
    /* 8003C784 */ ~mDoExt_transAnmBas();
};

struct mDoDvdThd_mountArchive_c {
    /* 80015E14 */ void create(char const*, u8, JKRHeap*);
};

struct dRes_control_c {
    /* 8003BFB0 */ ~dRes_control_c();
    /* 8003C078 */ void setRes(char const*, dRes_info_c*, int, char const*, u8, JKRHeap*);
    /* 8003C160 */ void syncRes(char const*, dRes_info_c*, int);
    /* 8003C194 */ void deleteRes(char const*, dRes_info_c*, int);
    /* 8003C1E4 */ void getResInfo(char const*, dRes_info_c*, int);
    /* 8003C260 */ void newResInfo(dRes_info_c*, int);
    /* 8003C288 */ void getResInfoLoaded(char const*, dRes_info_c*, int);
    /* 8003C2EC */ void getRes(char const*, s32, dRes_info_c*, int);
    /* 8003C37C */ void getRes(char const*, char const*, dRes_info_c*, int);
    /* 8003C400 */ void getIDRes(char const*, u16, dRes_info_c*, int);
    /* 8003C470 */ void syncAllRes(dRes_info_c*, int);
    /* 8003C4E4 */ void setObjectRes(char const*, void*, u32, JKRHeap*);
    /* 8003C5BC */ void setStageRes(char const*, JKRHeap*);
    /* 8003C638 */ void dump();
    /* 8003C6B8 */ void getObjectResName2Index(char const*, char const*);
};

struct dBgWKCol {
    /* 8007E7D0 */ void initKCollision(void*);
};

struct cBgS {
    /* 80074578 */ void ConvDzb(void*);
};

struct _GXAttr {};

struct ResTIMG {};

struct JUTNameTab {
    /* 802DEAF8 */ void getName(u16) const;
};

struct JKRMemBreakFlag {};

struct JKRMemArchive {
    /* 802D6A6C */ JKRMemArchive(void*, u32, JKRMemBreakFlag);
};

struct J3DTransformInfo {};

struct J3DTexture {
    /* 8031221C */ void addResTIMG(u16, ResTIMG const*);
};

struct J3DTexNoAnm {
    /* 8003B1F8 */ ~J3DTexNoAnm();
    /* 8003B240 */ J3DTexNoAnm();
    /* 8003C82C */ void calc(u16*) const;
};

struct J3DTexMtxInfo {
    /* 80325718 */ void operator=(J3DTexMtxInfo const&);
};

struct J3DTexMtxAnm {
    /* 8003B264 */ ~J3DTexMtxAnm();
    /* 8003B2A0 */ J3DTexMtxAnm();
};

struct J3DTexMtx {};

struct J3DTexGenBlock {
    /* 8003AB2C */ void setTexMtx(u32, J3DTexMtx*);
};

struct J3DTevStageInfo {};

struct J3DTevStage {
    /* 8000E298 */ void setTevStageInfo(J3DTevStageInfo const&);
    /* 8003AACC */ J3DTevStage(J3DTevStageInfo const&);
};

struct J3DTevKColorAnm {
    /* 8003B150 */ ~J3DTevKColorAnm();
    /* 8003B18C */ J3DTevKColorAnm();
};

struct J3DTevColorAnm {
    /* 8003B1A4 */ ~J3DTevColorAnm();
    /* 8003B1E0 */ J3DTevColorAnm();
};

struct J3DShape {
    /* 80314BB8 */ void addTexMtxIndexInDL(_GXAttr, u32);
    /* 80314CBC */ void addTexMtxIndexInVcd(_GXAttr);
};

struct J3DModelLoaderDataBase {
    /* 803346BC */ void load(void const*, u32);
};

struct J3DMaterialAnm {
    /* 8032C320 */ void initialize();
};

struct J3DMatColorAnm {
    /* 8003B2B8 */ ~J3DMatColorAnm();
    /* 8003B2F4 */ J3DMatColorAnm();
};

struct J3DClusterLoaderDataBase {
    /* 80334130 */ void load(void const*);
};

struct J3DAnmTransformKey {
    /* 8003B8D0 */ ~J3DAnmTransformKey();
    /* 8003C800 */ s32 getKind() const;
    /* 8003C808 */ void getTransform(u16, J3DTransformInfo*) const;
    /* 80329A34 */ void calcTransform(f32, u16, J3DTransformInfo*) const;
};

struct J3DAnmLoaderDataBaseFlag {};

struct J3DAnmLoaderDataBase {
    /* 80337B40 */ void load(void const*, J3DAnmLoaderDataBaseFlag);
    /* 80338134 */ void setResource(J3DAnmBase*, void const*);
};

//
// Forward References:
//

extern "C" void __ct__11dRes_info_cFv();
extern "C" void __dt__11dRes_info_cFv();
extern "C" void set__11dRes_info_cFPCcPCcUcP7JKRHeap();
extern "C" static void setAlpha__FP16J3DMaterialTable();
extern "C" static void setIndirectTex__FP12J3DModelData();
extern "C" static void setAlpha__FP12J3DModelData();
extern "C" static void addWarpMaterial__FP12J3DModelData();
extern "C" void __ct__11J3DTevStageFRC15J3DTevStageInfo();
extern "C" void setTexMtx__14J3DTexGenBlockFUlP9J3DTexMtx();
extern "C" void onWarpMaterial__11dRes_info_cFP12J3DModelData();
extern "C" void offWarpMaterial__11dRes_info_cFP12J3DModelData();
extern "C" void setWarpSRT__11dRes_info_cFP12J3DModelDataRC4cXyzff();
extern "C" void loaderBasicBmd__11dRes_info_cFUlPv();
extern "C" void __dt__15J3DTevKColorAnmFv();
extern "C" void __ct__15J3DTevKColorAnmFv();
extern "C" void __dt__14J3DTevColorAnmFv();
extern "C" void __ct__14J3DTevColorAnmFv();
extern "C" void __dt__11J3DTexNoAnmFv();
extern "C" void __ct__11J3DTexNoAnmFv();
extern "C" void __dt__12J3DTexMtxAnmFv();
extern "C" void __ct__12J3DTexMtxAnmFv();
extern "C" void __dt__14J3DMatColorAnmFv();
extern "C" void __ct__14J3DMatColorAnmFv();
extern "C" void loadResource__11dRes_info_cFv();
extern "C" void __dt__18J3DAnmTransformKeyFv();
extern "C" void __dt__15J3DAnmTransformFv();
extern "C" void deleteArchiveRes__11dRes_info_cFv();
extern "C" static void getArcHeader__FP10JKRArchive();
extern "C" void setRes__11dRes_info_cFP10JKRArchiveP7JKRHeap();
extern "C" void setRes__11dRes_info_cFv();
extern "C" static void myGetMemBlockSize__FPv();
extern "C" static void myGetMemBlockSize0__FPv();
extern "C" void dump_long__11dRes_info_cFP11dRes_info_ci();
extern "C" void dump__11dRes_info_cFP11dRes_info_ci();
extern "C" void __dt__14dRes_control_cFv();
extern "C" void setRes__14dRes_control_cFPCcP11dRes_info_ciPCcUcP7JKRHeap();
extern "C" void syncRes__14dRes_control_cFPCcP11dRes_info_ci();
extern "C" void deleteRes__14dRes_control_cFPCcP11dRes_info_ci();
extern "C" void getResInfo__14dRes_control_cFPCcP11dRes_info_ci();
extern "C" void newResInfo__14dRes_control_cFP11dRes_info_ci();
extern "C" void getResInfoLoaded__14dRes_control_cFPCcP11dRes_info_ci();
extern "C" void getRes__14dRes_control_cFPCclP11dRes_info_ci();
extern "C" void getRes__14dRes_control_cFPCcPCcP11dRes_info_ci();
extern "C" void getIDRes__14dRes_control_cFPCcUsP11dRes_info_ci();
extern "C" void syncAllRes__14dRes_control_cFP11dRes_info_ci();
extern "C" void setObjectRes__14dRes_control_cFPCcPvUlP7JKRHeap();
extern "C" void setStageRes__14dRes_control_cFPCcP7JKRHeap();
extern "C" void dump__14dRes_control_cFv();
extern "C" void getObjectResName2Index__14dRes_control_cFPCcPCc();
extern "C" void __dt__10J3DAnmBaseFv();
extern "C" bool getKind__15J3DAnmTransformCFv();
extern "C" void __dt__18mDoExt_transAnmBasFv();
extern "C" s32 getKind__18J3DAnmTransformKeyCFv();
extern "C" void getTransform__18J3DAnmTransformKeyCFUsP16J3DTransformInfo();
extern "C" void calc__11J3DTexNoAnmCFPUs();
extern "C" extern char const* const d_d_resorce__stringBase0;

//
// External References:
//

extern "C" void mDoMtx_YrotM__FPA4_fs();
extern "C" void setTevStageInfo__11J3DTevStageFRC15J3DTevStageInfo();
extern "C" void mDoExt_getGameHeap__Fv();
extern "C" void mDoExt_createSolidHeapToCurrent__FUlP7JKRHeapUl();
extern "C" void mDoExt_createSolidHeapFromGameToCurrent__FUlUl();
extern "C" void mDoExt_adjustSolidHeap__FP12JKRSolidHeap();
extern "C" void mDoExt_destroySolidHeap__FP12JKRSolidHeap();
extern "C" void mDoExt_restoreCurrentHeap__Fv();
extern "C" void mDoExt_resIDToIndex__FP10JKRArchiveUs();
extern "C" void create__24mDoDvdThd_mountArchive_cFPCcUcP7JKRHeap();
extern "C" void ConvDzb__4cBgSFPv();
extern "C" void initKCollision__8dBgWKColFPv();
extern "C" void getSize__7JKRHeapFPvP7JKRHeap();
extern "C" void findFromRoot__7JKRHeapFPv();
extern "C" void* __nw__FUl();
extern "C" void* __nwa__FUl();
extern "C" void __dl__FPv();
extern "C" void getIdxResource__10JKRArchiveFUl();
extern "C" void getFileAttribute__10JKRArchiveCFUl();
extern "C" void findIdxResource__10JKRArchiveCFUl();
extern "C" void findNameResource__10JKRArchiveCFPCc();
extern "C" void __ct__13JKRMemArchiveFPvUl15JKRMemBreakFlag();
extern "C" void getName__10JUTNameTabCFUs();
extern "C" void JUTReportConsole_f();
extern "C" void addResTIMG__10J3DTextureFUsPC7ResTIMG();
extern "C" void addTexMtxIndexInDL__8J3DShapeF7_GXAttrUl();
extern "C" void addTexMtxIndexInVcd__8J3DShapeF7_GXAttr();
extern "C" void __as__13J3DTexMtxInfoFRC13J3DTexMtxInfo();
extern "C" void newSharedDisplayList__12J3DModelDataFUl();
extern "C" void makeSharedDL__12J3DModelDataFv();
extern "C" void simpleCalcMaterial__12J3DModelDataFUsPA4_f();
extern "C" void __ct__15J3DAnmTransformFsPfPsPf();
extern "C" void calcTransform__18J3DAnmTransformKeyCFfUsP16J3DTransformInfo();
extern "C" void getTexNo__16J3DAnmTexPatternCFUsPUs();
extern "C" void initialize__14J3DMaterialAnmFv();
extern "C" void load__24J3DClusterLoaderDataBaseFPCv();
extern "C" void load__22J3DModelLoaderDataBaseFPCvUl();
extern "C" void load__20J3DAnmLoaderDataBaseFPCv24J3DAnmLoaderDataBaseFlag();
extern "C" void setResource__20J3DAnmLoaderDataBaseFP10J3DAnmBasePCv();
extern "C" void DCStoreRangeNoSync();
extern "C" void __destroy_arr();
extern "C" void __construct_array();
extern "C" void _savegpr_20();
extern "C" void _savegpr_24();
extern "C" void _savegpr_25();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_20();
extern "C" void _restgpr_24();
extern "C" void _restgpr_25();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" void memcmp();
extern "C" void snprintf();
extern "C" void strncpy();
extern "C" void strlen();
extern "C" void stricmp();
extern "C" extern u8 const j3dDefaultMtx[48];
extern "C" extern void* __vt__14J3DMaterialAnm[4];
extern "C" u8 now__14mDoMtx_stack_c[48];
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 g_env_light[4880];
extern "C" u8 mFrameBufferTimg__13mDoGph_gInf_c[4];
extern "C" u8 mZbufferTimg__13mDoGph_gInf_c[4];
extern "C" u8 sCurrentHeap__7JKRHeap[4];
extern "C" extern u8 j3dDefaultTevSwapMode[4];

//
// Declarations:
//

/* 8003A260-8003A280 034BA0 0020+00 0/0 1/1 0/0 .text            __ct__11dRes_info_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dRes_info_c::dRes_info_c() {
    nofralloc
#include "asm/d/d_resorce/__ct__11dRes_info_cFv.s"
}
#pragma pop

/* 8003A280-8003A348 034BC0 00C8+00 3/3 1/1 0/0 .text            __dt__11dRes_info_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dRes_info_c::~dRes_info_c() {
    nofralloc
#include "asm/d/d_resorce/__dt__11dRes_info_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_803798B8 = "%s%s.arc";
#pragma pop

/* 8003A348-8003A3F0 034C88 00A8+00 1/1 0/0 0/0 .text set__11dRes_info_cFPCcPCcUcP7JKRHeap */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_info_c::set(char const* param_0, char const* param_1, u8 param_2, JKRHeap* param_3) {
    nofralloc
#include "asm/d/d_resorce/set__11dRes_info_cFPCcPCcUcP7JKRHeap.s"
}
#pragma pop

/* 8003A3F0-8003A490 034D30 00A0+00 1/1 0/0 0/0 .text            setAlpha__FP16J3DMaterialTable */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void setAlpha(J3DMaterialTable* param_0) {
    nofralloc
#include "asm/d/d_resorce/setAlpha__FP16J3DMaterialTable.s"
}
#pragma pop

/* ############################################################################################## */
/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_803798C1 = "fbtex_dummy";
SECTION_DEAD static char const* const stringBase_803798CD = "dummy";
SECTION_DEAD static char const* const stringBase_803798D3 = "Zbuffer";
#pragma pop

/* 8003A490-8003A81C 034DD0 038C+00 1/1 0/0 0/0 .text            setIndirectTex__FP12J3DModelData */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void setIndirectTex(J3DModelData* param_0) {
    nofralloc
#include "asm/d/d_resorce/setIndirectTex__FP12J3DModelData.s"
}
#pragma pop

/* 8003A81C-8003A840 03515C 0024+00 1/1 0/0 0/0 .text            setAlpha__FP12J3DModelData */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void setAlpha(J3DModelData* param_0) {
    nofralloc
#include "asm/d/d_resorce/setAlpha__FP12J3DModelData.s"
}
#pragma pop

/* ############################################################################################## */
/* 80379840-803798A4 005EA0 0064+00 2/2 0/0 0/0 .rodata          l_texMtxInfo */
SECTION_RODATA static u8 const l_texMtxInfo[100] = {
    0x00, 0x08, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x3D, 0xCC, 0xCC, 0xCD, 0x3D, 0xCC, 0xCC, 0xCD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x80379840, &l_texMtxInfo);

/* 803798A4-803798B8 005F04 0014+00 1/1 0/0 0/0 .rodata          l_tevStageInfo$3774 */
SECTION_RODATA static u8 const l_tevStageInfo[20] = {
    0x05, 0x0F, 0x08, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x07, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x803798A4, &l_tevStageInfo);

/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_803798DB = "Always";
#pragma pop

/* 80450628-8045062C 0000A8 0004+00 1/1 0/0 0/0 .sdata           l_texCoordInfo$3772 */
SECTION_SDATA static u8 l_texCoordInfo[4] = {
    0x00,
    0x00,
    0x27,
    0x00,
};

/* 8045062C-80450630 0000AC 0004+00 1/1 0/0 0/0 .sdata           l_tevOrderInfo$3773 */
SECTION_SDATA static u8 l_tevOrderInfo[4] = {
    0x00,
    0x03,
    0xFF,
    0x00,
};

/* 80451DF0-80451DF8 0003F0 0008+00 1/1 0/0 0/0 .sdata2          l_alphaCompInfo$3775 */
SECTION_SDATA2 static u8 l_alphaCompInfo[8] = {
    0x04, 0x80, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x00,
};

/* 8003A840-8003AACC 035180 028C+00 1/1 0/0 0/0 .text            addWarpMaterial__FP12J3DModelData
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void addWarpMaterial(J3DModelData* param_0) {
    nofralloc
#include "asm/d/d_resorce/addWarpMaterial__FP12J3DModelData.s"
}
#pragma pop

/* 8003AACC-8003AB2C 03540C 0060+00 1/1 2/2 0/0 .text __ct__11J3DTevStageFRC15J3DTevStageInfo */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DTevStage::J3DTevStage(J3DTevStageInfo const& param_0) {
    nofralloc
#include "asm/d/d_resorce/__ct__11J3DTevStageFRC15J3DTevStageInfo.s"
}
#pragma pop

/* 8003AB2C-8003AB30 03546C 0004+00 0/0 2/0 0/0 .text setTexMtx__14J3DTexGenBlockFUlP9J3DTexMtx */
void J3DTexGenBlock::setTexMtx(u32 param_0, J3DTexMtx* param_1) {
    /* empty function */
}

/* 8003AB30-8003AC1C 035470 00EC+00 0/0 2/1 0/0 .text
 * onWarpMaterial__11dRes_info_cFP12J3DModelData                */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_info_c::onWarpMaterial(J3DModelData* param_0) {
    nofralloc
#include "asm/d/d_resorce/onWarpMaterial__11dRes_info_cFP12J3DModelData.s"
}
#pragma pop

/* 8003AC1C-8003AD08 03555C 00EC+00 0/0 2/1 0/0 .text
 * offWarpMaterial__11dRes_info_cFP12J3DModelData               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_info_c::offWarpMaterial(J3DModelData* param_0) {
    nofralloc
#include "asm/d/d_resorce/offWarpMaterial__11dRes_info_cFP12J3DModelData.s"
}
#pragma pop

/* 8003AD08-8003AE14 035648 010C+00 0/0 1/1 0/0 .text
 * setWarpSRT__11dRes_info_cFP12J3DModelDataRC4cXyzff           */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_info_c::setWarpSRT(J3DModelData* param_0, cXyz const& param_1, f32 param_2,
                                 f32 param_3) {
    nofralloc
#include "asm/d/d_resorce/setWarpSRT__11dRes_info_cFP12J3DModelDataRC4cXyzff.s"
}
#pragma pop

/* ############################################################################################## */
/* 803A7C18-803A7C38 -00001 0020+00 1/1 0/0 0/0 .data            @4017 */
SECTION_DATA static void* lit_4017[8] = {
    (void*)(((char*)loaderBasicBmd__11dRes_info_cFUlPv) + 0x180),
    (void*)(((char*)loaderBasicBmd__11dRes_info_cFUlPv) + 0x130),
    (void*)(((char*)loaderBasicBmd__11dRes_info_cFUlPv) + 0x13C),
    (void*)(((char*)loaderBasicBmd__11dRes_info_cFUlPv) + 0x148),
    (void*)(((char*)loaderBasicBmd__11dRes_info_cFUlPv) + 0x154),
    (void*)(((char*)loaderBasicBmd__11dRes_info_cFUlPv) + 0x160),
    (void*)(((char*)loaderBasicBmd__11dRes_info_cFUlPv) + 0x16C),
    (void*)(((char*)loaderBasicBmd__11dRes_info_cFUlPv) + 0x178),
};

/* 8003AE14-8003B150 035754 033C+00 2/1 1/1 0/0 .text            loaderBasicBmd__11dRes_info_cFUlPv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_info_c::loaderBasicBmd(u32 param_0, void* param_1) {
    nofralloc
#include "asm/d/d_resorce/loaderBasicBmd__11dRes_info_cFUlPv.s"
}
#pragma pop

/* 8003B150-8003B18C 035A90 003C+00 2/2 8/8 0/0 .text            __dt__15J3DTevKColorAnmFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DTevKColorAnm::~J3DTevKColorAnm() {
    nofralloc
#include "asm/d/d_resorce/__dt__15J3DTevKColorAnmFv.s"
}
#pragma pop

/* 8003B18C-8003B1A4 035ACC 0018+00 2/2 3/3 0/0 .text            __ct__15J3DTevKColorAnmFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DTevKColorAnm::J3DTevKColorAnm() {
    nofralloc
#include "asm/d/d_resorce/__ct__15J3DTevKColorAnmFv.s"
}
#pragma pop

/* 8003B1A4-8003B1E0 035AE4 003C+00 2/2 8/8 0/0 .text            __dt__14J3DTevColorAnmFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DTevColorAnm::~J3DTevColorAnm() {
    nofralloc
#include "asm/d/d_resorce/__dt__14J3DTevColorAnmFv.s"
}
#pragma pop

/* 8003B1E0-8003B1F8 035B20 0018+00 2/2 3/3 0/0 .text            __ct__14J3DTevColorAnmFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DTevColorAnm::J3DTevColorAnm() {
    nofralloc
#include "asm/d/d_resorce/__ct__14J3DTevColorAnmFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 803A7C38-803A7C48 004D58 0010+00 4/4 22/22 0/0 .data            __vt__10J3DAnmBase */
SECTION_DATA extern void* __vt__10J3DAnmBase[4] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__10J3DAnmBaseFv,
    (void*)NULL,
};

/* 803A7C48-803A7C5C 004D68 0014+00 3/3 3/3 0/0 .data            __vt__15J3DAnmTransform */
SECTION_DATA extern void* __vt__15J3DAnmTransform[5] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__15J3DAnmTransformFv,
    (void*)getKind__15J3DAnmTransformCFv,
    (void*)NULL,
};

/* 803A7C5C-803A7C70 004D7C 0014+00 2/2 1/1 0/0 .data            __vt__18mDoExt_transAnmBas */
SECTION_DATA extern void* __vt__18mDoExt_transAnmBas[5] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__18mDoExt_transAnmBasFv,
    (void*)getKind__18J3DAnmTransformKeyCFv,
    (void*)getTransform__18J3DAnmTransformKeyCFUsP16J3DTransformInfo,
};

/* 803A7C70-803A7C84 004D90 0014+00 3/3 2/2 0/0 .data            __vt__18J3DAnmTransformKey */
SECTION_DATA extern void* __vt__18J3DAnmTransformKey[5] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__18J3DAnmTransformKeyFv,
    (void*)getKind__18J3DAnmTransformKeyCFv,
    (void*)getTransform__18J3DAnmTransformKeyCFUsP16J3DTransformInfo,
};

/* 803A7C84-803A7C90 004DA4 000C+00 2/2 1/1 0/0 .data            __vt__11J3DTexNoAnm */
SECTION_DATA extern void* __vt__11J3DTexNoAnm[3] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)calc__11J3DTexNoAnmCFPUs,
};

/* 8003B1F8-8003B240 035B38 0048+00 2/2 8/8 0/0 .text            __dt__11J3DTexNoAnmFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DTexNoAnm::~J3DTexNoAnm() {
    nofralloc
#include "asm/d/d_resorce/__dt__11J3DTexNoAnmFv.s"
}
#pragma pop

/* 8003B240-8003B264 035B80 0024+00 2/2 3/3 0/0 .text            __ct__11J3DTexNoAnmFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DTexNoAnm::J3DTexNoAnm() {
    nofralloc
#include "asm/d/d_resorce/__ct__11J3DTexNoAnmFv.s"
}
#pragma pop

/* 8003B264-8003B2A0 035BA4 003C+00 2/2 8/8 0/0 .text            __dt__12J3DTexMtxAnmFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DTexMtxAnm::~J3DTexMtxAnm() {
    nofralloc
#include "asm/d/d_resorce/__dt__12J3DTexMtxAnmFv.s"
}
#pragma pop

/* 8003B2A0-8003B2B8 035BE0 0018+00 2/2 3/3 0/0 .text            __ct__12J3DTexMtxAnmFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DTexMtxAnm::J3DTexMtxAnm() {
    nofralloc
#include "asm/d/d_resorce/__ct__12J3DTexMtxAnmFv.s"
}
#pragma pop

/* 8003B2B8-8003B2F4 035BF8 003C+00 2/2 8/8 0/0 .text            __dt__14J3DMatColorAnmFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DMatColorAnm::~J3DMatColorAnm() {
    nofralloc
#include "asm/d/d_resorce/__dt__14J3DMatColorAnmFv.s"
}
#pragma pop

/* 8003B2F4-8003B30C 035C34 0018+00 2/2 3/3 0/0 .text            __ct__14J3DMatColorAnmFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DMatColorAnm::J3DMatColorAnm() {
    nofralloc
#include "asm/d/d_resorce/__ct__14J3DMatColorAnmFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_803798E2 =
    "<%s.arc> setRes: res pointer buffer nothing !!\n";
SECTION_DEAD static char const* const stringBase_80379912 = "<%s> res == NULL !!\n";
#pragma pop

/* 8003B30C-8003B8D0 035C4C 05C4+00 2/2 0/0 0/0 .text            loadResource__11dRes_info_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_info_c::loadResource() {
    nofralloc
#include "asm/d/d_resorce/loadResource__11dRes_info_cFv.s"
}
#pragma pop

/* 8003B8D0-8003B93C 036210 006C+00 1/0 0/0 0/0 .text            __dt__18J3DAnmTransformKeyFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DAnmTransformKey::~J3DAnmTransformKey() {
    nofralloc
#include "asm/d/d_resorce/__dt__18J3DAnmTransformKeyFv.s"
}
#pragma pop

/* 8003B93C-8003B998 03627C 005C+00 1/0 0/0 0/0 .text            __dt__15J3DAnmTransformFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DAnmTransform::~J3DAnmTransform() {
    nofralloc
#include "asm/d/d_resorce/__dt__15J3DAnmTransformFv.s"
}
#pragma pop

/* 8003B998-8003BA9C 0362D8 0104+00 1/1 0/0 0/0 .text            deleteArchiveRes__11dRes_info_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_info_c::deleteArchiveRes() {
    nofralloc
#include "asm/d/d_resorce/deleteArchiveRes__11dRes_info_cFv.s"
}
#pragma pop

/* 8003BA9C-8003BAC4 0363DC 0028+00 2/2 0/0 0/0 .text            getArcHeader__FP10JKRArchive */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void getArcHeader(JKRArchive* param_0) {
    nofralloc
#include "asm/d/d_resorce/getArcHeader__FP10JKRArchive.s"
}
#pragma pop

/* 8003BAC4-8003BAF8 036404 0034+00 1/1 0/0 0/0 .text setRes__11dRes_info_cFP10JKRArchiveP7JKRHeap
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_info_c::setRes(JKRArchive* param_0, JKRHeap* param_1) {
    nofralloc
#include "asm/d/d_resorce/setRes__11dRes_info_cFP10JKRArchiveP7JKRHeap.s"
}
#pragma pop

/* ############################################################################################## */
/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80379927 =
    "<%s.arc> setRes: archive mount error !!\n";
SECTION_DEAD static char const* const stringBase_80379950 =
    "<%s.arc> mDMCommandsetRes: can't alloc memory\n";
#pragma pop

/* 8003BAF8-8003BC98 036438 01A0+00 2/2 0/0 0/0 .text            setRes__11dRes_info_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_info_c::setRes() {
    nofralloc
#include "asm/d/d_resorce/setRes__11dRes_info_cFv.s"
}
#pragma pop

/* 8003BC98-8003BD00 0365D8 0068+00 1/1 0/0 0/0 .text            myGetMemBlockSize__FPv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void myGetMemBlockSize(void* param_0) {
    nofralloc
#include "asm/d/d_resorce/myGetMemBlockSize__FPv.s"
}
#pragma pop

/* 8003BD00-8003BD2C 036640 002C+00 1/1 0/0 0/0 .text            myGetMemBlockSize0__FPv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void myGetMemBlockSize0(void* param_0) {
    nofralloc
#include "asm/d/d_resorce/myGetMemBlockSize0__FPv.s"
}
#pragma pop

/* ############################################################################################## */
/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037997F = "%5.1f %5x %5.1f %5x %3d %s\n";
SECTION_DEAD static char const* const stringBase_8037999B = "dRes_info_c::dump_long %08x %d\n";
SECTION_DEAD static char const* const stringBase_803799BB =
    "No Command Archive  ArcHeader(size) SolidHeap(si"
    "ze) Resource Cnt ArchiveName\n";
SECTION_DEAD static char const* const stringBase_80379A09 =
    "%2d %08x %08x %08x(%6x) %08x(%5x) %08x %3d %s\n";
#pragma pop

/* 8003BD2C-8003BE38 03666C 010C+00 1/1 0/0 0/0 .text dump_long__11dRes_info_cFP11dRes_info_ci */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_info_c::dump_long(dRes_info_c* param_0, int param_1) {
    nofralloc
#include "asm/d/d_resorce/dump_long__11dRes_info_cFP11dRes_info_ci.s"
}
#pragma pop

/* ############################################################################################## */
/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80379A38 = "dRes_info_c::dump %08x %d\n";
SECTION_DEAD static char const* const stringBase_80379A53 =
    "No ArchiveSize(KB) SolidHeapSize(KB) Cnt Archive"
    "Name\n";
SECTION_DEAD static char const* const stringBase_80379A89 = "%2d %6.1f %6x %6.1f %6x %3d %s\n";
SECTION_DEAD static char const* const stringBase_80379AA9 =
    "----------------------------------------------\n "
    "  %6.1f %6x %6.1f %6x   Total\n\n";
#pragma pop

/* 80451DF8-80451E00 0003F8 0008+00 1/1 0/0 0/0 .sdata2          @4277 */
SECTION_SDATA2 static f64 lit_4277 = 4503601774854144.0 /* cast s32 to float */;

/* 80451E00-80451E08 000400 0004+04 1/1 0/0 0/0 .sdata2          @4333 */
SECTION_SDATA2 static f32 lit_4333[1 + 1 /* padding */] = {
    0.0009765625f,
    /* padding */
    0.0f,
};

/* 8003BE38-8003BFB0 036778 0178+00 1/1 0/0 0/0 .text            dump__11dRes_info_cFP11dRes_info_ci
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_info_c::dump(dRes_info_c* param_0, int param_1) {
    nofralloc
#include "asm/d/d_resorce/dump__11dRes_info_cFP11dRes_info_ci.s"
}
#pragma pop

/* 8003BFB0-8003C078 0368F0 00C8+00 0/0 1/1 0/0 .text            __dt__14dRes_control_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dRes_control_c::~dRes_control_c() {
    nofralloc
#include "asm/d/d_resorce/__dt__14dRes_control_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
// MWCC ignores mapping of some japanese characters using the
// byte 0x5C (ASCII '\'). This is why this string is hex-encoded.
SECTION_DEAD static char const* const stringBase_80379AF9 =
    "\x3C\x25\x73\x2E\x61\x72\x63\x3E\x20\x64\x52\x65\x73\x5F\x63\x6F\x6E\x74\x72\x6F\x6C\x5F\x63"
    "\x3A\x3A\x73\x65\x74\x52\x65\x73\x3A\x20\x8B\xF3\x82\xAB\x83\x8A\x83\x5C\x81\x5B\x83\x58\x8F"
    "\xEE\x95"
    "\xF1\x83\x7C\x83\x43\x83\x93\x83\x5E\x82\xAA\x82\xA0\x82\xE8\x82\xDC\x82\xB9\x82\xF1\x0A";
SECTION_DEAD static char const* const stringBase_80379B40 =
    "<%s.arc> dRes_control_c::setRes: res info set er"
    "ror !!\n";
#pragma pop

/* 8003C078-8003C160 0369B8 00E8+00 2/2 8/8 0/0 .text
 * setRes__14dRes_control_cFPCcP11dRes_info_ciPCcUcP7JKRHeap    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::setRes(char const* param_0, dRes_info_c* param_1, int param_2,
                                char const* param_3, u8 param_4, JKRHeap* param_5) {
    nofralloc
#include "asm/d/d_resorce/setRes__14dRes_control_cFPCcP11dRes_info_ciPCcUcP7JKRHeap.s"
}
#pragma pop

/* 8003C160-8003C194 036AA0 0034+00 0/0 10/10 1/1 .text
 * syncRes__14dRes_control_cFPCcP11dRes_info_ci                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::syncRes(char const* param_0, dRes_info_c* param_1, int param_2) {
    nofralloc
#include "asm/d/d_resorce/syncRes__14dRes_control_cFPCcP11dRes_info_ci.s"
}
#pragma pop

/* 8003C194-8003C1E4 036AD4 0050+00 1/1 7/7 0/0 .text
 * deleteRes__14dRes_control_cFPCcP11dRes_info_ci               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::deleteRes(char const* param_0, dRes_info_c* param_1, int param_2) {
    nofralloc
#include "asm/d/d_resorce/deleteRes__14dRes_control_cFPCcP11dRes_info_ci.s"
}
#pragma pop

/* 8003C1E4-8003C260 036B24 007C+00 5/5 5/5 3/3 .text
 * getResInfo__14dRes_control_cFPCcP11dRes_info_ci              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::getResInfo(char const* param_0, dRes_info_c* param_1, int param_2) {
    nofralloc
#include "asm/d/d_resorce/getResInfo__14dRes_control_cFPCcP11dRes_info_ci.s"
}
#pragma pop

/* 8003C260-8003C288 036BA0 0028+00 1/1 0/0 0/0 .text newResInfo__14dRes_control_cFP11dRes_info_ci
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::newResInfo(dRes_info_c* param_0, int param_1) {
    nofralloc
#include "asm/d/d_resorce/newResInfo__14dRes_control_cFP11dRes_info_ci.s"
}
#pragma pop

/* ############################################################################################## */
/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80379B78 =
    "<%s.arc> getRes: res during reading !!\n";
#pragma pop

/* 8003C288-8003C2EC 036BC8 0064+00 4/4 0/0 0/0 .text
 * getResInfoLoaded__14dRes_control_cFPCcP11dRes_info_ci        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::getResInfoLoaded(char const* param_0, dRes_info_c* param_1, int param_2) {
    nofralloc
#include "asm/d/d_resorce/getResInfoLoaded__14dRes_control_cFPCcP11dRes_info_ci.s"
}
#pragma pop

/* ############################################################################################## */
/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80379BA0 =
    "<%s.arc> getRes: res index over !! index=%d coun"
    "t=%d\n";
#pragma pop

/* 8003C2EC-8003C37C 036C2C 0090+00 1/1 54/54 894/894 .text
 * getRes__14dRes_control_cFPCclP11dRes_info_ci                 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::getRes(char const* param_0, s32 param_1, dRes_info_c* param_2,
                                int param_3) {
    nofralloc
#include "asm/d/d_resorce/getRes__14dRes_control_cFPCclP11dRes_info_ci.s"
}
#pragma pop

/* 8003C37C-8003C400 036CBC 0084+00 0/0 18/18 109/109 .text
 * getRes__14dRes_control_cFPCcPCcP11dRes_info_ci               */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::getRes(char const* param_0, char const* param_1, dRes_info_c* param_2,
                                int param_3) {
    nofralloc
#include "asm/d/d_resorce/getRes__14dRes_control_cFPCcPCcP11dRes_info_ci.s"
}
#pragma pop

/* 8003C400-8003C470 036D40 0070+00 0/0 7/7 4/4 .text
 * getIDRes__14dRes_control_cFPCcUsP11dRes_info_ci              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::getIDRes(char const* param_0, u16 param_1, dRes_info_c* param_2,
                                  int param_3) {
    nofralloc
#include "asm/d/d_resorce/getIDRes__14dRes_control_cFPCcUsP11dRes_info_ci.s"
}
#pragma pop

/* 8003C470-8003C4E4 036DB0 0074+00 0/0 3/3 0/0 .text syncAllRes__14dRes_control_cFP11dRes_info_ci
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::syncAllRes(dRes_info_c* param_0, int param_1) {
    nofralloc
#include "asm/d/d_resorce/syncAllRes__14dRes_control_cFP11dRes_info_ci.s"
}
#pragma pop

/* ############################################################################################## */
/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80379BD6 = "";
#pragma pop

/* 8003C4E4-8003C5BC 036E24 00D8+00 1/1 0/0 0/0 .text
 * setObjectRes__14dRes_control_cFPCcPvUlP7JKRHeap              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::setObjectRes(char const* param_0, void* param_1, u32 param_2,
                                      JKRHeap* param_3) {
    nofralloc
#include "asm/d/d_resorce/setObjectRes__14dRes_control_cFPCcPvUlP7JKRHeap.s"
}
#pragma pop

/* ############################################################################################## */
/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80379BD7 = "/res/Stage/%s/";
#pragma pop

/* 8003C5BC-8003C638 036EFC 007C+00 0/0 2/2 0/0 .text setStageRes__14dRes_control_cFPCcP7JKRHeap
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::setStageRes(char const* param_0, JKRHeap* param_1) {
    nofralloc
#include "asm/d/d_resorce/setStageRes__14dRes_control_cFPCcP7JKRHeap.s"
}
#pragma pop

/* ############################################################################################## */
/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80379BE6 = "\ndRes_control_c::dump mObjectInfo\n";
SECTION_DEAD static char const* const stringBase_80379C09 = "\ndRes_control_c::dump mStageInfo\n";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_80379C2B = "\0\0\0\0";
#pragma pop

/* 8003C638-8003C6B8 036F78 0080+00 0/0 2/2 0/0 .text            dump__14dRes_control_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::dump() {
    nofralloc
#include "asm/d/d_resorce/dump__14dRes_control_cFv.s"
}
#pragma pop

/* 8003C6B8-8003C734 036FF8 007C+00 0/0 0/0 32/32 .text
 * getObjectResName2Index__14dRes_control_cFPCcPCc              */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dRes_control_c::getObjectResName2Index(char const* param_0, char const* param_1) {
    nofralloc
#include "asm/d/d_resorce/getObjectResName2Index__14dRes_control_cFPCcPCc.s"
}
#pragma pop

/* 8003C734-8003C77C 037074 0048+00 1/0 0/0 0/0 .text            __dt__10J3DAnmBaseFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm J3DAnmBase::~J3DAnmBase() {
    nofralloc
#include "asm/d/d_resorce/__dt__10J3DAnmBaseFv.s"
}
#pragma pop

/* 8003C77C-8003C784 0370BC 0008+00 1/0 0/0 0/0 .text            getKind__15J3DAnmTransformCFv */
bool J3DAnmTransform::getKind() const {
    return false;
}

/* 8003C784-8003C800 0370C4 007C+00 1/0 0/0 0/0 .text            __dt__18mDoExt_transAnmBasFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm mDoExt_transAnmBas::~mDoExt_transAnmBas() {
    nofralloc
#include "asm/d/d_resorce/__dt__18mDoExt_transAnmBasFv.s"
}
#pragma pop

/* 8003C800-8003C808 037140 0008+00 2/0 0/0 0/0 .text            getKind__18J3DAnmTransformKeyCFv */
s32 J3DAnmTransformKey::getKind() const {
    return 8;
}

/* 8003C808-8003C82C 037148 0024+00 2/0 0/0 0/0 .text
 * getTransform__18J3DAnmTransformKeyCFUsP16J3DTransformInfo    */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J3DAnmTransformKey::getTransform(u16 param_0, J3DTransformInfo* param_1) const {
    nofralloc
#include "asm/d/d_resorce/getTransform__18J3DAnmTransformKeyCFUsP16J3DTransformInfo.s"
}
#pragma pop

/* 8003C82C-8003C85C 03716C 0030+00 1/0 0/0 0/0 .text            calc__11J3DTexNoAnmCFPUs */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J3DTexNoAnm::calc(u16* param_0) const {
    nofralloc
#include "asm/d/d_resorce/calc__11J3DTexNoAnmCFPUs.s"
}
#pragma pop

/* 803798B8-803798B8 005F18 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
