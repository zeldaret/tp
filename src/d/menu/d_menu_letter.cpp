//
// Generated By: dol2asm
// Translation Unit: d/menu/d_menu_letter
//

#include "d/menu/d_menu_letter.h"
#include "JSystem/J2DGraph/J2DTextBox.h"
#include "JSystem/JKernel/JKRHeap.h"
#include "JSystem/JKernel/JKRMemArchive.h"
#include "math.h"
#include "stdio.h"
#include "string.h"
#include "d/com/d_com_inf_game.h"
#include "d/d_lib.h"
#include "d/d_select_cursor.h"
#include "d/meter/d_meter2_info.h"
#include "d/meter/d_meter_HIO.h"
#include "d/msg/d_msg_class.h"
#include "d/msg/d_msg_string.h"
#include "dol2asm.h"
#include "dolphin/types.h"
#include "m_Do/m_Do_controller_pad.h"
#include "m_Do/m_Do_graphic.h"
#include "d/msg/d_msg_scrn_arrow.h"

extern "C" void __ct__14dMenu_Letter_cFP10JKRExpHeapP9STControlP10CSTControl();
extern "C" void __dt__14dMenu_Letter_cFv();
extern "C" void _create__14dMenu_Letter_cFv();
extern "C" void _move__14dMenu_Letter_cFv();
extern "C" void _draw__14dMenu_Letter_cFv();
extern "C" void isSync__14dMenu_Letter_cFv();
extern "C" void letter_init_calc__14dMenu_Letter_cFv();
extern "C" void init__14dMenu_Letter_cFv();
extern "C" void _open__14dMenu_Letter_cFv();
extern "C" void _close__14dMenu_Letter_cFv();
extern "C" void wait_init__14dMenu_Letter_cFv();
extern "C" void wait_move__14dMenu_Letter_cFv();
extern "C" void slide_right_init__14dMenu_Letter_cFv();
extern "C" void slide_right_move__14dMenu_Letter_cFv();
extern "C" void slide_left_init__14dMenu_Letter_cFv();
extern "C" void slide_left_move__14dMenu_Letter_cFv();
extern "C" void read_open_init__14dMenu_Letter_cFv();
extern "C" void read_open_move__14dMenu_Letter_cFv();
extern "C" void read_move_init__14dMenu_Letter_cFv();
extern "C" void read_move_move__14dMenu_Letter_cFv();
extern "C" void read_next_fadeout_init__14dMenu_Letter_cFv();
extern "C" void read_next_fadeout_move__14dMenu_Letter_cFv();
extern "C" void read_next_fadein_init__14dMenu_Letter_cFv();
extern "C" void read_next_fadein_move__14dMenu_Letter_cFv();
extern "C" void read_close_init__14dMenu_Letter_cFv();
extern "C" void read_close_move__14dMenu_Letter_cFv();
extern "C" void screenSetMenu__14dMenu_Letter_cFv();
extern "C" void getWhite__10J2DTextBoxCFv();
extern "C" void getBlack__10J2DTextBoxCFv();
extern "C" void getWhite__10J2DPictureCFv();
extern "C" void getBlack__10J2DPictureCFv();
extern "C" void screenSetBase__14dMenu_Letter_cFv();
extern "C" void screenSetShadow__14dMenu_Letter_cFv();
extern "C" void screenSetLetter__14dMenu_Letter_cFv();
extern "C" void screenSetDoIcon__14dMenu_Letter_cFv();
extern "C" void setCursorPos__14dMenu_Letter_cFv();
extern "C" void changeActiveColor__14dMenu_Letter_cFv();
extern "C" void changePageLight__14dMenu_Letter_cFv();
extern "C" void setPageText__14dMenu_Letter_cFv();
extern "C" void setDMYPageText__14dMenu_Letter_cFv();
extern "C" void copyDMYMenu__14dMenu_Letter_cFv();
extern "C" void setAButtonString__14dMenu_Letter_cFUs();
extern "C" void setBButtonString__14dMenu_Letter_cFUs();
extern "C" void getLetterNum__14dMenu_Letter_cFv();
extern "C" void setHIO__14dMenu_Letter_cFb();
extern "C" void
getStringPage__12dMsgString_cFUlUcUcP10J2DTextBoxP10J2DTextBoxP7JUTFontP10COutFont_cUc();
extern "C" void draw__14dMenu_Letter_cFv();
extern "C" void __sinit_d_menu_letter_cpp();
extern "C" extern char const* const d_menu_d_menu_letter__stringBase0;

//
// External References:
//

extern "C" void mDoExt_setCurrentHeap__FP7JKRHeap();
extern "C" void mDoExt_getMesgFont__Fv();
extern "C" void mDoExt_getSubFont__Fv();
extern "C" void create__24mDoDvdThd_mountArchive_cFPCcUcP7JKRHeap();
extern "C" void checkUpTrigger__9STControlFv();
extern "C" void checkDownTrigger__9STControlFv();
extern "C" void onLetterGetFlag__17dSv_letter_info_cFi();
extern "C" void onLetterReadFlag__17dSv_letter_info_cFi();
extern "C" void isLetterReadFlag__17dSv_letter_info_cCFi();
extern "C" void __ct__Q28JUtility6TColorFv();
extern "C" void __ct__16dSelect_cursor_cFUcfP10JKRArchive();
extern "C" void setPos__16dSelect_cursor_cFffP7J2DPaneb();
extern "C" void setParam__16dSelect_cursor_cFfffff();
extern "C" void setScale__16dSelect_cursor_cFf();
extern "C" void setAlphaRate__16dSelect_cursor_cFf();
extern "C" void getStringKanji__13dMeter2Info_cFUlPcP14JMSMesgEntry_c();
extern "C" void dMeter2Info_getRecieveLetterNum__Fv();
extern "C" void dMeter2Info_set2DVibration__Fv();
extern "C" void __ct__15dMsgScrnArrow_cFv();
extern "C" void draw__15dMsgScrnArrow_cFv();
extern "C" void setPos__15dMsgScrnArrow_cFff();
extern "C" void arwAnimeInit__15dMsgScrnArrow_cFv();
extern "C" void arwAnimeMove__15dMsgScrnArrow_cFv();
extern "C" void dotAnimeInit__15dMsgScrnArrow_cFv();
extern "C" void dotAnimeMove__15dMsgScrnArrow_cFv();
extern "C" void
getStringPageLocal__16dMsgStringBase_cFUlUcUcP10J2DTextBoxP10J2DTextBoxP7JUTFontP10COutFont_cUc();
extern "C" void getPageMax__16dMsgStringBase_cFi();
extern "C" void __ct__12dMsgString_cFv();
extern "C" void __dt__12dMsgString_cFv();
extern "C" void __ct__8CPaneMgrFv();
extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
extern "C" void __dt__8CPaneMgrFv();
extern "C" void paneTrans__8CPaneMgrFff();
extern "C" void getGlobalVtx__8CPaneMgrFP7J2DPanePA3_A4_fUcbs();
extern "C" void getGlobalVtxCenter__8CPaneMgrFP7J2DPanebs();
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
extern "C" void setAlphaRate__13CPaneMgrAlphaFf();
extern "C" void cLib_addCalc2__FPffff();
extern "C" void seStart__7Z2SeMgrF10JAISoundIDPC3VecUlScffffUc();
extern "C" void* __nw__FUl();
extern "C" void __dl__FPv();
extern "C" void func_802E90C0();
extern "C" void getBounds__7J2DPaneFv();
extern "C" void __ct__9J2DScreenFv();
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive();
extern "C" void draw__9J2DScreenFffPC14J2DGrafContext();
extern "C" void __ct__10J2DPictureFPC7ResTIMG();
extern "C" void getStringPtr__10J2DTextBoxCFv();
extern "C" void setString__10J2DTextBoxFsPCce();
extern "C" void __construct_array();
extern "C" void __ptmf_scall();
extern "C" void _savegpr_14();
extern "C" void _savegpr_24();
extern "C" void _savegpr_25();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_14();
extern "C" void _restgpr_24();
extern "C" void _restgpr_25();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" extern void* __vt__12dDlst_base_c[3];
extern "C" u8 letter_data__12dMenu_Letter[512];
extern "C" u8 m_cpadInfo__8mDoCPd_c[256];
extern "C" u8 mFader__13mDoGph_gInf_c[4];
extern "C" u8 mAudioMgrPtr__10Z2AudioMgr[4 + 4 /* padding */];

//
// Declarations:
//

/* ############################################################################################## */
/* 803BDA00-803BDA0C 01AB20 000C+00 1/1 0/0 0/0 .data            cNullVec__6Z2Calc */
static u8 cNullVec__6Z2Calc[12] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

typedef void (dMenu_Letter_c::*initFunc)();
static initFunc map_init_process[] = {
    &dMenu_Letter_c::wait_init,
    &dMenu_Letter_c::slide_right_init,
    &dMenu_Letter_c::slide_left_init,
    &dMenu_Letter_c::read_open_init,
    &dMenu_Letter_c::read_move_init,
    &dMenu_Letter_c::read_next_fadeout_init,
    &dMenu_Letter_c::read_next_fadein_init,
    &dMenu_Letter_c::read_close_init,
};

typedef void (dMenu_Letter_c::*moveFunc)();
static moveFunc map_move_process[] = {
    &dMenu_Letter_c::wait_move,
    &dMenu_Letter_c::slide_right_move,
    &dMenu_Letter_c::slide_left_move,
    &dMenu_Letter_c::read_open_move,
    &dMenu_Letter_c::read_move_move,
    &dMenu_Letter_c::read_next_fadeout_move,
    &dMenu_Letter_c::read_next_fadein_move,
    &dMenu_Letter_c::read_close_move,
};

/* 803BDB8C-803BDBA8 01ACAC 0010+0C 2/2 0/0 0/0 .data            __vt__14dMenu_Letter_c */
SECTION_DATA extern void* __vt__14dMenu_Letter_c[4 + 3 /* padding */] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)draw__14dMenu_Letter_cFv,
    (void*)__dt__14dMenu_Letter_cFv,
    /* padding */
    NULL,
    NULL,
    NULL,
};

/* 804542E0-804542E4 0028E0 0004+00 13/13 0/0 0/0 .sdata2          @3827 */
SECTION_SDATA2 static u8 lit_3827[4] = {
    0x00,
    0x00,
    0x00,
    0x00,
};

/* 804542E4-804542E8 0028E4 0004+00 10/10 0/0 0/0 .sdata2          @3828 */
SECTION_SDATA2 static f32 lit_3828 = 1.0f;

/* 801DCDC0-801DCF34 1D7700 0174+00 0/0 2/2 0/0 .text
 * __ct__14dMenu_Letter_cFP10JKRExpHeapP9STControlP10CSTControl */
#ifdef NONMATCHING
// Matches with literals
dMenu_Letter_c::dMenu_Letter_c(JKRExpHeap* i_heap, STControl* i_stick, CSTControl* i_cstick) {
    mpHeap = i_heap;
    mpMount = NULL;
    mpArchive = NULL;
    mpStick = i_stick;
    mpCStick = i_cstick;
    mStatus = 1;
    mProcess = 0;
    field_0x368 = 0;
    field_0x36a = 0;
    mIndex = 0;
    field_0x36f = 0;
    field_0x372 = 0;
    field_0x3e2 = 0;
    field_0x3e3 = 0;
    field_0x3e4 = 0;
    field_0x370 = 0xff;
    field_0x371 = 0xff;
    letter_init_calc();
    field_0x358 = 0.0f;
    field_0x35c = 0.0f;
    field_0x364 = 1.0f;
    field_0x360 = 1.0f;
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 6; j++) {
            field_0x376[i][j] = 0;
        }
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMenu_Letter_c::dMenu_Letter_c(JKRExpHeap* param_0, STControl* param_1, CSTControl* param_2) {
    nofralloc
#include "asm/d/menu/d_menu_letter/__ct__14dMenu_Letter_cFP10JKRExpHeapP9STControlP10CSTControl.s"
}
#pragma pop
#endif

/* 801DCF34-801DD36C 1D7874 0438+00 1/0 0/0 0/0 .text            __dt__14dMenu_Letter_cFv */
dMenu_Letter_c::~dMenu_Letter_c() {
    delete mpDrawCursor;
    mpDrawCursor = NULL;

    delete mpArrow;
    mpArrow = NULL;

    delete mpString;
    mpString = NULL;

    delete mpMenuScreen;
    mpMenuScreen = NULL;

    delete mpMenuDMYScreen;
    mpMenuDMYScreen = NULL;

    delete mpMenuBaseScreen;
    mpMenuBaseScreen = NULL;

    delete mpSdwScreen;
    mpSdwScreen = NULL;

    for (int i = 0; i < 2; i++) {
        delete mpLetterScreen[i];
        mpLetterScreen[i] = NULL;

        delete field_0x2ec[i];
        field_0x2ec[i] = NULL;

        if (field_0x2f4[i] != NULL) {
            delete field_0x2f4[i];
            field_0x2f4[i] = NULL;
        }

        delete mpTextParent[i];
        mpTextParent[i] = NULL;
    }

    delete mpLineParent;
    mpLineParent = NULL;

    delete mpBlackTex;
    mpBlackTex = NULL;

    for (int i = 0; i < 3; i++) {
        delete mpParent[i];
        mpParent[i] = NULL;
    }

    for (int i = 0; i < 6; i++) {
        delete mpLetterParent[i];
        mpLetterParent[i] = NULL;
    }

    delete mpDMYParent;
    mpDMYParent = NULL;

    delete mpIconScreen;
    mpIconScreen = NULL;

    for (int i = 0; i < 2; i++) {
        if (mpButtonAB[i] != NULL) {
            delete mpButtonAB[i];
            mpButtonAB[i] = NULL;
        }

        if (mpButtonText[i] != NULL) {
            delete mpButtonText[i];
            mpButtonText[i] = NULL;
        }
    }

    if (mpMount != NULL) {
        mpMount->getArchive()->unmount();
        delete mpMount;
        mpMount = NULL;
    }

    if (mpArchive != NULL) {
        mpArchive->unmount();
        mpArchive = NULL;
    }
    dComIfGp_getMsgArchive(0)->removeResourceAll();
}

/* ############################################################################################## */
/* 804542E8-804542EC 0028E8 0004+00 1/1 0/0 0/0 .sdata2          @3964 */
SECTION_SDATA2 static f32 lit_3964 = 53.0f / 50.0f;

/* 804542EC-804542F0 0028EC 0004+00 1/1 0/0 0/0 .sdata2          @3965 */
SECTION_SDATA2 static f32 lit_3965 = 9.0f / 10.0f;

/* 804542F0-804542F4 0028F0 0004+00 1/1 0/0 0/0 .sdata2          @3966 */
SECTION_SDATA2 static f32 lit_3966 = 1.0f / 50.0f;

/* 804542F4-804542F8 0028F4 0004+00 1/1 0/0 0/0 .sdata2          @3967 */
SECTION_SDATA2 static f32 lit_3967 = 2.0f / 5.0f;

/* 801DD36C-801DD474 1D7CAC 0108+00 1/1 0/0 0/0 .text            _create__14dMenu_Letter_cFv */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::_create() {
    mpDrawCursor = new dSelect_cursor_c(2, 1.0f, NULL);
    mpDrawCursor->setParam(1.06f, 0.9f, 0.02f, 0.4f, 0.4f);
    mpDrawCursor->setAlphaRate(0.0f);
    mpDrawCursor->setScale(0.0f);
    mpDrawCursor->offPlayAnime(0);

    mpString = new dMsgString_c();

    mpArrow = new dMsgScrnArrow_c();

    screenSetMenu();
    screenSetBase();
    screenSetShadow();
    screenSetLetter();
    screenSetDoIcon();
    setHIO(true);
    init();
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::_create() {
    nofralloc
#include "asm/d/menu/d_menu_letter/_create__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* 801DD474-801DD50C 1D7DB4 0098+00 0/0 2/2 0/0 .text            _move__14dMenu_Letter_cFv */
void dMenu_Letter_c::_move() {
    JKRHeap* heap = mDoExt_setCurrentHeap((JKRHeap*)mpHeap);
    u8 process = mProcess;
    (this->*map_move_process[mProcess])();
    if (process != mProcess) {
        (this->*map_init_process[mProcess])();
    }
    setHIO(false);
    mDoExt_setCurrentHeap(heap);
}

/* ############################################################################################## */
/* 804542F8-804542FC 0028F8 0004+00 1/1 0/0 0/0 .sdata2          @4054 */
SECTION_SDATA2 static f32 lit_4054 = 608.0f;

/* 804542FC-80454300 0028FC 0004+00 1/1 0/0 0/0 .sdata2          @4055 */
SECTION_SDATA2 static f32 lit_4055 = 448.0f;

/* 80454300-80454308 002900 0004+04 3/3 0/0 0/0 .sdata2          @4056 */
SECTION_SDATA2 static f32 lit_4056[1 + 1 /* padding */] = {
    -1.0f,
    /* padding */
    0.0f,
};

/* 80454308-80454310 002908 0008+00 3/3 0/0 0/0 .sdata2          @4058 */
SECTION_SDATA2 static f64 lit_4058 = 4503599627370496.0 /* cast u32 to float */;

/* 801DD50C-801DD934 1D7E4C 0428+00 1/1 1/1 0/0 .text            _draw__14dMenu_Letter_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::_draw() {
    nofralloc
#include "asm/d/menu/d_menu_letter/_draw__14dMenu_Letter_cFv.s"
}
#pragma pop

/* 801DD934-801DD95C 1D8274 0028+00 0/0 2/2 0/0 .text            isSync__14dMenu_Letter_cFv */
bool dMenu_Letter_c::isSync() {
    if (mpMount != NULL && mpMount->sync() == false) {
        return 0;
    }
    return 1;
}

/* 801DD95C-801DDA20 1D829C 00C4+00 1/1 0/0 0/0 .text letter_init_calc__14dMenu_Letter_cFv */
void dMenu_Letter_c::letter_init_calc() {
    m_letter_num = getLetterNum();
    for (int i = 0; i < 54; i++) {
        if (i < m_letter_num) {
            field_0x3ac[i] = dComIfGs_getGetNumber(m_letter_num - i - 1);
        } else {
            field_0x3ac[i] = 0xff;
        }
    }
    if (m_letter_num < 6) {
        field_0x373 = m_letter_num;
    } else {
        field_0x373 = 6;
    }
    if (m_letter_num % 6 == 0) {
        field_0x374 = m_letter_num / 6;
    } else {
        field_0x374 = m_letter_num / 6 + 1;
    }
}

/* 801DDA20-801DDA74 1D8360 0054+00 1/1 0/0 0/0 .text            init__14dMenu_Letter_cFv */
void dMenu_Letter_c::init() {
    setPageText();
    changeActiveColor();
    (this->*map_init_process[mProcess])();
}

/* ############################################################################################## */
/* 80396DC0-80396DC0 023420 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80396DC0 = "/res/Layout/letres.arc";
#pragma pop

/* 80454310-80454318 002910 0008+00 7/7 0/0 0/0 .sdata2          @4171 */
SECTION_SDATA2 static f64 lit_4171 = 4503601774854144.0 /* cast s32 to float */;

/* 801DDA74-801DDC98 1D83B4 0224+00 0/0 2/2 0/0 .text            _open__14dMenu_Letter_cFv */
#ifdef NONMATCHING
// Matches with literals
int dMenu_Letter_c::_open() {
    if (mpMount == NULL) {
        mpMount = mDoDvdThd_mountArchive_c::create("/res/Layout/letres.arc", 0, NULL);
    }
    if (!mpArchive) {
        if (mpMount->sync() != 0) {
            if (!mpArchive) {
                mpArchive = (JKRArchive*)mpMount->getArchive();
                delete mpMount;
                mpMount = NULL;
                _create();
            }
        } else {
            return 0;
        }
    }

    s16 openWindowFrame =
        g_drawHIO.mLetterSelectScreen.mOpenFrame[dMeter_drawLetterHIO_c::WINDOW_FRAME];
    s16 closeWindowFrame =
        g_drawHIO.mLetterSelectScreen.mCloseFrame[dMeter_drawLetterHIO_c::WINDOW_FRAME];
    field_0x368 = g_drawHIO.mLetterSelectScreen.mOpenFrame[dMeter_drawLetterHIO_c::WINDOW_FRAME];
    if (field_0x368 >= openWindowFrame) {
        field_0x368 = closeWindowFrame;
        mStatus = 2;
        for (int i = 0; i < 3; i++) {
            mpParent[i]->scale(g_drawHIO.mLetterSelectScreen.mWindowScale,
                               g_drawHIO.mLetterSelectScreen.mWindowScale);
            mpParent[i]->setAlphaRate(1.0f);
        }
        setCursorPos();
        mpDrawCursor->setAlphaRate(1.0f);
        mpDrawCursor->setScale(1.0f);
        mpDrawCursor->onPlayAnime(0);
        return 1;
    } else {
        f32 div = (f32)field_0x368 / (f32)openWindowFrame;
        for (int i = 0; i < 3; i++) {
            mpParent[i]->scale(g_drawHIO.mLetterSelectScreen.mWindowScale * div,
                               g_drawHIO.mLetterSelectScreen.mWindowScale * div);
            mpParent[i]->setAlphaRate(div);
        }
        setCursorPos();
        mpDrawCursor->setAlphaRate(div);
        mpDrawCursor->setScale(div);
        return 0;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm int dMenu_Letter_c::_open() {
    nofralloc
#include "asm/d/menu/d_menu_letter/_open__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* 801DDC98-801DDE18 1D85D8 0180+00 0/0 1/1 0/0 .text            _close__14dMenu_Letter_cFv */
#ifdef NONMATCHING
// Matches with literals
int dMenu_Letter_c::_close() {
    s16 closeWindowFrame =
        g_drawHIO.mLetterSelectScreen.mCloseFrame[dMeter_drawLetterHIO_c::WINDOW_FRAME];
    field_0x368 = 0;
    if (field_0x368 <= 0) {
        field_0x368 = 0;
        mStatus = 0;
        for (int i = 0; i < 3; i++) {
            mpParent[i]->scale(0.0f, 0.0f);
            mpParent[i]->setAlphaRate(0.0f);
        }
        setCursorPos();
        mpDrawCursor->setAlphaRate(0.0f);
        mpDrawCursor->setScale(0.0f);
        return 1;
    } else {
        f32 div = (f32)field_0x368 / (f32)closeWindowFrame;
        for (int i = 0; i < 3; i++) {
            mpParent[i]->scale(g_drawHIO.mLetterSelectScreen.mWindowScale * div,
                               g_drawHIO.mLetterSelectScreen.mWindowScale * div);
            mpParent[i]->setAlphaRate(div);
        }
        setCursorPos();
        mpDrawCursor->setAlphaRate(div);
        mpDrawCursor->setScale(div);
        return 0;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm int dMenu_Letter_c::_close() {
    nofralloc
#include "asm/d/menu/d_menu_letter/_close__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* 801DDE18-801DDE54 1D8758 003C+00 1/0 0/0 0/0 .text            wait_init__14dMenu_Letter_cFv */
void dMenu_Letter_c::wait_init() {
    setAButtonString(0x40c);
    setBButtonString(0x3f9);
}

/* 801DDE54-801DE164 1D8794 0310+00 1/0 0/0 0/0 .text            wait_move__14dMenu_Letter_cFv */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::wait_move() {
    u8 oldIndex = mIndex;
    if (mDoGph_gInf_c::getFader()->getStatus() == 1) {
        if (mDoCPd_c::getTrigB(PAD_1) != 0) {
            mpDrawCursor->offPlayAnime(0);
            mStatus = 3;
        } else if (mDoCPd_c::getTrigA(PAD_1)) {
            mProcess = 3;
            Z2GetAudioMgr()->seStart(Z2SE_SY_LETTER_OPEN, NULL, 0, 0, 1.0f, 1.0f, -1.0f, -1.0f, 0);
            dMeter2Info_set2DVibration();
        } else if (mpStick->checkUpTrigger()) {
            if (mIndex) {
                mIndex--;
                Z2GetAudioMgr()->seStart(Z2SE_SY_CURSOR_ITEM, NULL, 0, 0, 1.0f, 1.0f, -1.0f, -1.0f,
                                         0);
            }

        } else if (mpStick->checkDownTrigger()) {
            if (mIndex < field_0x373 - 1) {
                mIndex++;
                Z2GetAudioMgr()->seStart(Z2SE_SY_CURSOR_ITEM, NULL, 0, 0, 1.0f, 1.0f, -1.0f, -1.0f,
                                         0);
            }
        } else if (mDoCPd_c::getTrigR(PAD_1)) {
            if (field_0x36f < field_0x374 - 1) {
                field_0x372 = field_0x36f;
                field_0x36f++;
                mProcess = 2;
                Z2GetAudioMgr()->seStart(Z2SE_SY_MENU_SUB_NEXT, NULL, 0, 0, 1.0f, 1.0f, -1.0f,
                                         -1.0f, 0);
            }
        } else if (mDoCPd_c::getTrigL(PAD_1)) {
            if (field_0x36f) {
                field_0x372 = field_0x36f;
                field_0x36f--;
                mProcess = 1;
                Z2GetAudioMgr()->seStart(Z2SE_SY_MENU_SUB_NEXT, NULL, 0, 0, 1.0f, 1.0f, -1.0f,
                                         -1.0f, 0);
            }
        }

        if (mProcess == 1 || mProcess == 2) {
            J2DTextBox* textBox = (J2DTextBox*)mpMenuBaseScreen->search('f_t_00');
            mpMenuBaseScreen->search('t_t00')->hide();
            dComIfGp_setMessageCountNumber(field_0x374 + (field_0x36f + 1) * 100);
            mpString->getString(0x4d6, textBox, NULL, NULL, NULL, 0);
        }
        if (oldIndex != mIndex) {
            changeActiveColor();
        }
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::wait_move() {
    nofralloc
#include "asm/d/menu/d_menu_letter/wait_move__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* 801DE164-801DE1E8 1D8AA4 0084+00 1/0 0/0 0/0 .text slide_right_init__14dMenu_Letter_cFv */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::slide_right_init() {
    field_0x358 = -field_0x1ec->getWidth() * mDoGph_gInf_c::getInvScale();
    field_0x35c = field_0x1ec->getWidth() * mDoGph_gInf_c::getInvScale();
    changePageLight();
    copyDMYMenu();
    setAButtonString(0);
    setBButtonString(0);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::slide_right_init() {
    nofralloc
#include "asm/d/menu/d_menu_letter/slide_right_init__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* ############################################################################################## */
/* 80454318-8045431C 002918 0004+00 3/3 0/0 0/0 .sdata2          @4308 */
SECTION_SDATA2 static f32 lit_4308 = 0.5f;

/* 8045431C-80454320 00291C 0004+00 2/2 0/0 0/0 .sdata2          @4309 */
SECTION_SDATA2 static f32 lit_4309 = 50.0f;

/* 80454320-80454328 002920 0004+04 2/2 0/0 0/0 .sdata2          @4310 */
SECTION_SDATA2 static f32 lit_4310[1 + 1 /* padding */] = {
    1.0f / 10.0f,
    /* padding */
    0.0f,
};

/* 801DE1E8-801DE24C 1D8B28 0064+00 1/0 0/0 0/0 .text slide_right_move__14dMenu_Letter_cFv */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::slide_right_move() {
    cLib_addCalc2(&field_0x358, 0.0f, 0.5f, 50.0f);
    if (fabsf(field_0x358) < 0.1f) {
        field_0x358 = 0.0f;
        mProcess = 0;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::slide_right_move() {
    nofralloc
#include "asm/d/menu/d_menu_letter/slide_right_move__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* 801DE24C-801DE2D0 1D8B8C 0084+00 1/0 0/0 0/0 .text            slide_left_init__14dMenu_Letter_cFv
 */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::slide_left_init() {
    field_0x358 = field_0x1ec->getWidth() * mDoGph_gInf_c::getInvScale();
    field_0x35c = -field_0x1ec->getWidth() * mDoGph_gInf_c::getInvScale();
    changePageLight();
    copyDMYMenu();
    setAButtonString(0);
    setBButtonString(0);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::slide_left_init() {
    nofralloc
#include "asm/d/menu/d_menu_letter/slide_left_init__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* 801DE2D0-801DE334 1D8C10 0064+00 1/0 0/0 0/0 .text            slide_left_move__14dMenu_Letter_cFv
 */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::slide_left_move() {
    cLib_addCalc2(&field_0x358, 0.0f, 0.5f, 50.0f);
    if (fabsf(field_0x358) < 0.1f) {
        field_0x358 = 0.0f;
        mProcess = 0;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::slide_left_move() {
    nofralloc
#include "asm/d/menu/d_menu_letter/slide_left_move__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* ############################################################################################## */
/* 80396DC0-80396DC0 023420 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80396DD7 = "%d/%d";
#pragma pop

/* 801DE334-801DE564 1D8C74 0230+00 1/0 0/0 0/0 .text            read_open_init__14dMenu_Letter_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::read_open_init() {
    nofralloc
#include "asm/d/menu/d_menu_letter/read_open_init__14dMenu_Letter_cFv.s"
}
#pragma pop

/* 801DE564-801DE70C 1D8EA4 01A8+00 1/0 0/0 0/0 .text            read_open_move__14dMenu_Letter_cFv
 */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::read_open_move() {
    s16 openLetterFrame =
        g_drawHIO.mLetterSelectScreen.mOpenFrame[dMeter_drawLetterHIO_c::LETTER_FRAME];
    field_0x36a++;
    if (field_0x36a >= openLetterFrame) {
        mProcess = 4;
        for (int i = 0; i < 2; i++) {
            mpTextParent[i]->scale(g_drawHIO.mLetterSelectScreen.mLetterWindowScale,
                                   g_drawHIO.mLetterSelectScreen.mLetterWindowScale);
            mpTextParent[i]->setAlphaRate(1.0f);
        }
        mpBlackTex->setAlpha(g_drawHIO.mLetterSelectScreen.mWindowBGAlpha);
    } else {
        f32 div = (f32)field_0x36a / (f32)openLetterFrame;
        for (int i = 0; i < 2; i++) {
            mpTextParent[i]->scale(g_drawHIO.mLetterSelectScreen.mLetterWindowScale * div,
                                   g_drawHIO.mLetterSelectScreen.mLetterWindowScale * div);
            mpTextParent[i]->setAlphaRate(div);
        }
        mpBlackTex->setAlpha(g_drawHIO.mLetterSelectScreen.mWindowBGAlpha * div);
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::read_open_move() {
    nofralloc
#include "asm/d/menu/d_menu_letter/read_open_move__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* 801DE70C-801DE824 1D904C 0118+00 1/0 0/0 0/0 .text            read_move_init__14dMenu_Letter_cFv
 */
void dMenu_Letter_c::read_move_init() {
    mpArrow->arwAnimeInit();
    mpArrow->dotAnimeInit();
    if (field_0x3e2 > 1) {
        if (field_0x3e3 == field_0x3e2) {
            setAButtonString(0);
            setBButtonString(0x3f9);
        } else {
            setAButtonString(0x408);
            setBButtonString(0x3f9);
        }
        CPaneMgr paneMgr;
        J2DPane* pane = mpLetterScreen[0]->search('set_ya_n');
        Vec pos = paneMgr.getGlobalVtxCenter(pane, false, 0);
        mpArrow->setPos(pos.x, pos.y);
    } else {
        setAButtonString(0);
        setBButtonString(0x3f9);
    }
}

/* 801DE824-801DEA48 1D9164 0224+00 1/0 0/0 0/0 .text            read_move_move__14dMenu_Letter_cFv
 */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::read_move_move() {
    if (mDoCPd_c::getTrigA(PAD_1) != 0) {
        if (field_0x3e3 == field_0x3e2) {
            Z2GetAudioMgr()->seStart(Z2SE_SY_LETTER_CLOSE, NULL, 0, 0, 1.0f, 1.0f, -1.0f, -1.0f, 0);
            dMeter2Info_set2DVibration();
            mProcess = 7;
        } else {
            mProcess = 5;
            Z2GetAudioMgr()->seStart(Z2SE_SY_LETTER_NEXT_PAGE, NULL, 0, 0, 1.0f, 1.0f, -1.0f, -1.0f,
                                     0);
            dMeter2Info_set2DVibration();
            field_0x3e4 = 1;
        }
    } else if (mDoCPd_c::getTrigB(PAD_1) != 0) {
        if (field_0x3e3 <= 1) {
            mProcess = 7;
            Z2GetAudioMgr()->seStart(Z2SE_SY_LETTER_CLOSE, NULL, 0, 0, 1.0f, 1.0f, -1.0f, -1.0f, 0);
            dMeter2Info_set2DVibration();
        } else {
            mProcess = 5;
            Z2GetAudioMgr()->seStart(Z2SE_SY_LETTER_NEXT_PAGE, NULL, 0, 0, 1.0f, 1.0f, -1.0f, -1.0f,
                                     0);
            dMeter2Info_set2DVibration();
            field_0x3e4 = 0;
        }
    } else if (field_0x3e2 > 1) {
        if (field_0x3e3 == field_0x3e2) {
            mpArrow->dotAnimeMove();
        } else {
            mpArrow->arwAnimeMove();
        }
        CPaneMgr paneMgr;
        J2DPane* pane = mpLetterScreen[0]->search('set_ya_n');
        Vec pos = paneMgr.getGlobalVtxCenter(pane, false, 0);
        mpArrow->setPos(pos.x, pos.y);
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::read_move_move() {
    nofralloc
#include "asm/d/menu/d_menu_letter/read_move_move__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* 801DEA48-801DEA94 1D9388 004C+00 1/0 0/0 0/0 .text read_next_fadeout_init__14dMenu_Letter_cFv
 */
void dMenu_Letter_c::read_next_fadeout_init() {
    field_0x36a = g_drawHIO.mLetterSelectScreen.mCloseFrame[dMeter_drawLetterHIO_c::LETTER_FRAME];
    setAButtonString(0);
    setBButtonString(0);
}

/* 801DEA94-801DEBD8 1D93D4 0144+00 1/0 0/0 0/0 .text read_next_fadeout_move__14dMenu_Letter_cFv
 */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::read_next_fadeout_move() {
    s16 closeWindowFrame =
        g_drawHIO.mLetterSelectScreen.mCloseFrame[dMeter_drawLetterHIO_c::WINDOW_FRAME];
    field_0x36a--;
    if (field_0x36a <= 0) {
        mProcess = 6;
        for (int i = 0; i < 2; i++) {
            field_0x2ec[i]->setAlphaRate(0.0f);

            if (field_0x2f4[i] != NULL) {
                field_0x2f4[i]->setAlphaRate(0.0f);
            }
        }
        if (field_0x3e4 != 0) {
            field_0x3e3++;
        } else {
            field_0x3e3--;
        }
    } else {
        f32 div = (f32)field_0x36a / (f32)closeWindowFrame;
        for (int i = 0; i < 2; i++) {
            field_0x2ec[i]->setAlphaRate(div);
            if (field_0x2f4[i]) {
                field_0x2f4[i]->setAlphaRate(div);
            }
        }
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::read_next_fadeout_move() {
    nofralloc
#include "asm/d/menu/d_menu_letter/read_next_fadeout_move__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* 801DEBD8-801DED04 1D9518 012C+00 1/0 0/0 0/0 .text read_next_fadein_init__14dMenu_Letter_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::read_next_fadein_init() {
    nofralloc
#include "asm/d/menu/d_menu_letter/read_next_fadein_init__14dMenu_Letter_cFv.s"
}
#pragma pop

/* 801DED04-801DEE20 1D9644 011C+00 1/0 0/0 0/0 .text read_next_fadein_move__14dMenu_Letter_cFv */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::read_next_fadein_move() {
    s16 openLetterFrame =
        g_drawHIO.mLetterSelectScreen.mOpenFrame[dMeter_drawLetterHIO_c::LETTER_FRAME];
    field_0x36a++;
    if (field_0x36a >= openLetterFrame) {
        mProcess = 4;
        for (int i = 0; i < 2; i++) {
            field_0x2ec[i]->setAlphaRate(1.0f);
            if (field_0x2f4[i] != NULL) {
                field_0x2f4[i]->setAlphaRate(1.0f);
            }
        }
    } else {
        f32 div = (f32)field_0x36a / (f32)openLetterFrame;
        for (int i = 0; i < 2; i++) {
            field_0x2ec[i]->setAlphaRate(div);
            if (field_0x2f4[i] != NULL) {
                field_0x2f4[i]->setAlphaRate(div);
            }
        }
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::read_next_fadein_move() {
    nofralloc
#include "asm/d/menu/d_menu_letter/read_next_fadein_move__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* 801DEE20-801DEE6C 1D9760 004C+00 1/0 0/0 0/0 .text            read_close_init__14dMenu_Letter_cFv
 */
void dMenu_Letter_c::read_close_init() {
    field_0x36a = g_drawHIO.mLetterSelectScreen.mCloseFrame[dMeter_drawLetterHIO_c::LETTER_FRAME];
    setAButtonString(0);
    setBButtonString(0);
}

/* 801DEE6C-801DF010 1D97AC 01A4+00 1/0 0/0 0/0 .text            read_close_move__14dMenu_Letter_cFv
 */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::read_close_move() {
    s16 closeLetterFrame =
        g_drawHIO.mLetterSelectScreen.mCloseFrame[dMeter_drawLetterHIO_c::LETTER_FRAME];
    field_0x36a--;
    if (field_0x36a <= 0) {
        mProcess = 0;
        for (int i = 0; i < 2; i++) {
            mpTextParent[i]->scale(0.0f, 0.0f);
            mpTextParent[i]->setAlphaRate(0.0f);
        }
        mpBlackTex->setAlpha(g_drawHIO.mLetterSelectScreen.mWindowBGAlpha);
    } else {
        f32 div = (f32)field_0x36a / (f32)closeLetterFrame;
        for (int i = 0; i < 2; i++) {
            mpTextParent[i]->scale(g_drawHIO.mLetterSelectScreen.mLetterWindowScale * div,
                                   g_drawHIO.mLetterSelectScreen.mLetterWindowScale * div);
            mpTextParent[i]->setAlphaRate(div);
        }
        mpBlackTex->setAlpha(g_drawHIO.mLetterSelectScreen.mWindowBGAlpha * div);
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::read_close_move() {
    nofralloc
#include "asm/d/menu/d_menu_letter/read_close_move__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* 803969C8-803969F8 023028 0030+00 2/2 0/0 0/0 .rodata          tag_sub0$4610 */
static const u64 tag_sub0[6] = {
    'menu_t0s', 'menu_t1s', 'menu_t2s', 'menu_t3s', 'menu_t4s', 'menu_t5s',
};

/* 803969F8-80396A28 023058 0030+00 0/1 0/0 0/0 .rodata          tag_sub1$4611 */
#pragma push
#pragma force_active on
static const u64 tag_sub1[6] = {
    'menu_t0', 'menu_t1', 'menu_t2', 'menu_t3', 'menu_t4', 'menu_t5',
};
#pragma pop

/* 80396A28-80396A58 023088 0030+00 0/1 0/0 0/0 .rodata          tag_name0$4612 */
#pragma push
#pragma force_active on
static const u64 tag_name0[6] = {
    'menu_t6s', 'menu_f7s', 'menu_f8s', 'menu_t9s', 'menu_10s', 'menu_11s',
};
#pragma pop

/* 80396A58-80396A88 0230B8 0030+00 0/1 0/0 0/0 .rodata          tag_name1$4613 */
#pragma push
#pragma force_active on
static const u64 tag_name1[6] = {
    'menu_f6', 'menu_f7', 'menu_t8', 'menu_t9', 'menu_t10', 'menu_t11',
};
#pragma pop

/* 80396A88-80396AB8 0230E8 0030+00 0/1 0/0 0/0 .rodata          ftag_sub0$4614 */
#pragma push
#pragma force_active on
static const u64 ftag_sub0[6] = {
    'fenu_t0s', 'fenu_t1s', 'fenu_t2s', 'fenu_t3s', 'fenu_t4s', 'fenu_t5s',
};
#pragma pop

/* 80396AB8-80396AE8 023118 0030+00 0/1 0/0 0/0 .rodata          ftag_sub1$4615 */
#pragma push
#pragma force_active on
static const u64 ftag_sub1[6] = {
    'fenu_t0', 'fenu_t1', 'fenu_t2', 'fenu_t3', 'fenu_t4', 'fenu_t5',
};
#pragma pop

/* 80396AE8-80396B18 023148 0030+00 0/1 0/0 0/0 .rodata          ftag_name0$4616 */
#pragma push
#pragma force_active on
static const u64 ftag_name0[6] = {
    'fenu_t6s', 'fenu_t7s', 'fenu_f8s', 'fenu_t9s', 'fenu_10s', 'fenu_11s',
};
#pragma pop

/* 80396B18-80396B48 023178 0030+00 0/1 0/0 0/0 .rodata          ftag_name1$4617 */
#pragma push
#pragma force_active on
static const u64 ftag_name1[6] = {
    'fenu_t6', 'fenu_t7', 'fenu_t8', 'fenu_t9', 'fenu_t10', 'fenu_t11',
};
#pragma pop

/* 80396B48-80396B78 0231A8 0030+00 0/1 0/0 0/0 .rodata          tag_letter$4628 */
#pragma push
#pragma force_active on
static const u64 tag_letter[6] = {
    'let_00_n', 'let_01_n', 'let_02_n', 'let_03_n', 'let_04_n', 'let_05_n',
};
#pragma pop

/* 80396B78-80396BA8 0231D8 0030+00 0/1 0/0 0/0 .rodata          tag_frame$4635 */
#pragma push
#pragma force_active on
static const u64 tag_frame[6] = {
    'flame_00', 'flame_01', 'flame_02', 'flame_03', 'flame_04', 'flame_05',
};
#pragma pop

/* 80396BA8-80396BD8 023208 0030+00 0/1 0/0 0/0 .rodata          tag_menu0$4636 */
#pragma push
#pragma force_active on
static const u64 tag_menu0[6] = {
    'fenu_t0', 'fenu_t1', 'fenu_t2', 'fenu_t3', 'fenu_t4', 'fenu_t5',
};
#pragma pop

/* 80396BD8-80396C08 023238 0030+00 0/1 0/0 0/0 .rodata          tag_menu1$4637 */
#pragma push
#pragma force_active on
static const u64 tag_menu1[6] = {
    'fenu_t6', 'fenu_t7', 'fenu_t8', 'fenu_t9', 'fenu_t10', 'fenu_t11',
};
#pragma pop

/* 80396C08-80396C38 023268 0030+00 0/1 0/0 0/0 .rodata          tag_midoku$4638 */
#pragma push
#pragma force_active on
static const u64 tag_midoku[6] = {
    'midoku_0', 'midoku_1', 'midoku_2', 'midoku_3', 'midoku_4', 'midoku_5',
};
#pragma pop

/* 80396DC0-80396DC0 023420 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80396DDD = "zelda_letter_select_6menu.blo";
SECTION_DEAD static char const* const stringBase_80396DFB = "";
#pragma pop

/* 801DF010-801DFA28 1D9950 0A18+00 1/1 0/0 0/0 .text            screenSetMenu__14dMenu_Letter_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::screenSetMenu() {
    nofralloc
#include "asm/d/menu/d_menu_letter/screenSetMenu__14dMenu_Letter_cFv.s"
}
#pragma pop

/* 801DFA28-801DFA34 1DA368 000C+00 0/0 1/0 0/0 .text            getWhite__10J2DTextBoxCFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JUtility::TColor J2DTextBox::getWhite() const {
    nofralloc
#include "asm/d/menu/d_menu_letter/getWhite__10J2DTextBoxCFv.s"
}
#pragma pop

/* 801DFA34-801DFA40 1DA374 000C+00 0/0 1/0 0/0 .text            getBlack__10J2DTextBoxCFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JUtility::TColor J2DTextBox::getBlack() const {
    nofralloc
#include "asm/d/menu/d_menu_letter/getBlack__10J2DTextBoxCFv.s"
}
#pragma pop

/* 801DFA40-801DFA4C 1DA380 000C+00 0/0 1/0 0/0 .text            getWhite__10J2DPictureCFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JUtility::TColor J2DPicture::getWhite() const {
    nofralloc
#include "asm/d/menu/d_menu_letter/getWhite__10J2DPictureCFv.s"
}
#pragma pop

/* 801DFA4C-801DFA58 1DA38C 000C+00 0/0 1/0 0/0 .text            getBlack__10J2DPictureCFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm JUtility::TColor J2DPicture::getBlack() const {
    nofralloc
#include "asm/d/menu/d_menu_letter/getBlack__10J2DPictureCFv.s"
}
#pragma pop

//* 80396C38-80396C80 023298 0048+00 0/1 0/0 0/0 .rodata          tag_pip$4827 */
#pragma push
#pragma force_active on
static const u64 tag_pip[9] = {
    'pi_00_n', 'pi_01_n', 'pi_02_n', 'pi_03_n', 'pi_04_n',
    'pi_05_n', 'pi_06_n', 'pi_07_n', 'pi_08_n',
};
#pragma pop

/* 80396C80-80396CC8 0232E0 0048+00 0/1 0/0 0/0 .rodata          tag_pil$4828 */
#pragma push
#pragma force_active on
static const u64 tag_pil[9] = {
    'pi_l_00', 'pi_l_01', 'pi_l_02', 'pi_l_03', 'pi_l_04',
    'pi_l_05', 'pi_l_06', 'pi_l_07', 'pi_l_08',
};
#pragma pop

/* 80396CC8-80396D10 023328 0048+00 0/1 0/0 0/0 .rodata          tag_pii$4829 */
#pragma push
#pragma force_active on
static const u64 tag_pii[9] = {
    'pi_00', 'pi_01', 'pi_02', 'pi_03', 'pi_04', 'pi_05', 'pi_06', 'pi_07', 'pi_08',
};
#pragma pop

/* 80396DC0-80396DC0 023420 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80396DFC = "zelda_letter_select_base.blo";
#pragma pop

/* 801DFA58-801E0330 1DA398 08D8+00 1/1 0/0 0/0 .text            screenSetBase__14dMenu_Letter_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::screenSetBase() {
    nofralloc
#include "asm/d/menu/d_menu_letter/screenSetBase__14dMenu_Letter_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 80396DC0-80396DC0 023420 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80396E19 = "zelda_letter_select_shadow.blo";
#pragma pop

/* 801E0330-801E03D8 1DAC70 00A8+00 1/1 0/0 0/0 .text            screenSetShadow__14dMenu_Letter_cFv
 */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::screenSetShadow() {
    mpSdwScreen = new J2DScreen();
    mpSdwScreen->setPriority("zelda_letter_select_shadow.blo", 0x20000, mpArchive);
    dPaneClass_showNullPane(mpSdwScreen);
    mpParent[2] = new CPaneMgr(mpSdwScreen, 'n_all', 2, NULL);
    mpParent[2]->setAlphaRate(0.0f);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::screenSetShadow() {
    nofralloc
#include "asm/d/menu/d_menu_letter/screenSetShadow__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* ############################################################################################## */
/* 80396D10-80396D70 023370 0060+00 1/1 0/0 0/0 .rodata          line_tag$4914 */
SECTION_RODATA static u8 const line_tag4914[96] = {
    // in-function static
    0x00, 0x00, 0x6C, 0x69, 0x6E, 0x65, 0x30, 0x39, 0x00, 0x00, 0x6C, 0x69, 0x6E, 0x65, 0x31, 0x30,
    0x00, 0x00, 0x6C, 0x69, 0x6E, 0x65, 0x31, 0x31, 0x00, 0x00, 0x6C, 0x69, 0x6E, 0x65, 0x31, 0x32,
    0x00, 0x00, 0x6C, 0x69, 0x6E, 0x65, 0x31, 0x33, 0x00, 0x00, 0x6C, 0x69, 0x6E, 0x65, 0x31, 0x34,
    0x00, 0x00, 0x6C, 0x69, 0x6E, 0x65, 0x31, 0x35, 0x00, 0x00, 0x6C, 0x69, 0x6E, 0x65, 0x31, 0x36,
    0x00, 0x00, 0x6C, 0x69, 0x6E, 0x65, 0x31, 0x37, 0x00, 0x00, 0x6C, 0x69, 0x6E, 0x65, 0x31, 0x38,
    0x00, 0x00, 0x6C, 0x69, 0x6E, 0x65, 0x31, 0x39, 0x00, 0x00, 0x6C, 0x69, 0x6E, 0x65, 0x32, 0x30,
};
COMPILER_STRIP_GATE(0x80396D10, &line_tag4914);

/* 80396DC0-80396DC0 023420 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80396E38 = "zelda_letter_window_base.blo";
SECTION_DEAD static char const* const stringBase_80396E55 = "zelda_letter_window_spot.blo";
SECTION_DEAD static char const* const stringBase_80396E72 = "tt_block8x8.bti";
#pragma pop

/* 801E03D8-801E09A8 1DAD18 05D0+00 1/1 0/0 0/0 .text            screenSetLetter__14dMenu_Letter_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::screenSetLetter() {
    nofralloc
#include "asm/d/menu/d_menu_letter/screenSetLetter__14dMenu_Letter_cFv.s"
}
#pragma pop

/* 80396D70-80396D98 0233D0 0028+00 1/1 0/0 0/0 .rodata          text_a_tag$5024 */
static const u64 text_a_tag[5] = {
    'atext1_1', 'atext1_2', 'atext1_3', 'atext1_4', 'atext1_5',
};

/* 80396D98-80396DC0 0233F8 0028+00 1/1 0/0 0/0 .rodata          text_b_tag$5025 */
static const u64 text_b_tag[5] = {
    'btext1_1', 'btext1_2', 'btext1_3', 'btext1_4', 'btext1_5',
};

/* 80396DC0-80396DC0 023420 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80396E82 = "zelda_collect_soubi_do_icon_parts.blo";
#pragma pop

/* 801E09A8-801E0B24 1DB2E8 017C+00 1/1 0/0 0/0 .text            screenSetDoIcon__14dMenu_Letter_cFv
 */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::screenSetDoIcon() {
    mpIconScreen = new J2DScreen();
    mpIconScreen->setPriority("zelda_collect_soubi_do_icon_parts.blo", 0x20000, mpArchive);
    for (int i = 0; i < 2; i++) {
        mpButtonAB[i] = NULL;
        mpButtonText[i] = NULL;
    }
    dPaneClass_showNullPane(mpIconScreen);
    for (int i = 0; i < 5; i++) {
        mpAButtonString[i] = (J2DTextBox*)mpIconScreen->search(text_a_tag[i]);
        mpBButtonString[i] = (J2DTextBox*)mpIconScreen->search(text_b_tag[i]);
        mpAButtonString[i]->setFont(mDoExt_getMesgFont());
        mpBButtonString[i]->setFont(mDoExt_getMesgFont());
        mpAButtonString[i]->setString(0x20, "");
        mpBButtonString[i]->setString(0x20, "");
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::screenSetDoIcon() {
    nofralloc
#include "asm/d/menu/d_menu_letter/screenSetDoIcon__14dMenu_Letter_cFv.s"
}
#pragma pop
#endif

/* 801E0B24-801E0BB0 1DB464 008C+00 3/3 0/0 0/0 .text            setCursorPos__14dMenu_Letter_cFv */
void dMenu_Letter_c::setCursorPos() {
    Vec pos = mpLetterParent[mIndex]->getGlobalVtxCenter(mpLetterParent[mIndex]->mPane, false, 0);
    mpDrawCursor->setPos(pos.x, pos.y, mpLetterParent[mIndex]->getPanePtr(), false);
}

/* 801E0BB0-801E0E34 1DB4F0 0284+00 3/3 0/0 0/0 .text changeActiveColor__14dMenu_Letter_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::changeActiveColor() {
    nofralloc
#include "asm/d/menu/d_menu_letter/changeActiveColor__14dMenu_Letter_cFv.s"
}
#pragma pop

/* 801E0E34-801E0E84 1DB774 0050+00 2/2 0/0 0/0 .text            changePageLight__14dMenu_Letter_cFv
 */
void dMenu_Letter_c::changePageLight() {
    for (int i = 0; i < 9; i++) {
        if (i == field_0x36f) {
            mpPageLight[i]->show();
        } else {
            mpPageLight[i]->hide();
        }
    }
}

/* 801E0E84-801E1038 1DB7C4 01B4+00 2/2 0/0 0/0 .text            setPageText__14dMenu_Letter_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::setPageText() {
    nofralloc
#include "asm/d/menu/d_menu_letter/setPageText__14dMenu_Letter_cFv.s"
}
#pragma pop

/* 801E1038-801E11EC 1DB978 01B4+00 1/1 0/0 0/0 .text            setDMYPageText__14dMenu_Letter_cFv
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::setDMYPageText() {
    nofralloc
#include "asm/d/menu/d_menu_letter/setDMYPageText__14dMenu_Letter_cFv.s"
}
#pragma pop

/* 801E11EC-801E1518 1DBB2C 032C+00 2/2 0/0 0/0 .text            copyDMYMenu__14dMenu_Letter_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::copyDMYMenu() {
    nofralloc
#include "asm/d/menu/d_menu_letter/copyDMYMenu__14dMenu_Letter_cFv.s"
}
#pragma pop

/* 801E1518-801E15C8 1DBE58 00B0+00 7/7 0/0 0/0 .text setAButtonString__14dMenu_Letter_cFUs */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::setAButtonString(u16 i_stringID) {
    if (i_stringID == 0) {
        for (int i = 0; i < 5; i++) {
            strcpy(mpAButtonString[i]->getStringPtr(), "");
        }
    } else {
        for (int i = 0; i < 5; i++) {
            dMeter2Info_getStringKanji(i_stringID, mpAButtonString[i]->getStringPtr(), NULL);
        }
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::setAButtonString(u16 i_stringID) {
    nofralloc
#include "asm/d/menu/d_menu_letter/setAButtonString__14dMenu_Letter_cFUs.s"
}
#pragma pop
#endif

/* 801E15C8-801E1678 1DBF08 00B0+00 7/7 0/0 0/0 .text setBButtonString__14dMenu_Letter_cFUs */
#ifdef NONMATCHING
// Matches with literals
void dMenu_Letter_c::setBButtonString(u16 i_stringID) {
    if (i_stringID == 0) {
        for (int i = 0; i < 5; i++) {
            strcpy(mpBButtonString[i]->getStringPtr(), "");
        }
    } else {
        for (int i = 0; i < 5; i++) {
            dMeter2Info_getStringKanji(i_stringID, mpBButtonString[i]->getStringPtr(), NULL);
        }
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::setBButtonString(u16 i_stringID) {
    nofralloc
#include "asm/d/menu/d_menu_letter/setBButtonString__14dMenu_Letter_cFUs.s"
}
#pragma pop
#endif

/* 801E1678-801E1748 1DBFB8 00D0+00 1/1 0/0 0/0 .text            getLetterNum__14dMenu_Letter_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm u8 dMenu_Letter_c::getLetterNum() {
    nofralloc
#include "asm/d/menu/d_menu_letter/getLetterNum__14dMenu_Letter_cFv.s"
}
#pragma pop

/* 801E1748-801E1D10 1DC088 05C8+00 2/2 0/0 0/0 .text            setHIO__14dMenu_Letter_cFb */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMenu_Letter_c::setHIO(bool i_useHIO) {
    nofralloc
#include "asm/d/menu/d_menu_letter/setHIO__14dMenu_Letter_cFb.s"
}
#pragma pop

/* 801E1D10-801E1D5C 1DC650 004C+00 0/0 1/0 0/0 .text
 * getStringPage__12dMsgString_cFUlUcUcP10J2DTextBoxP10J2DTextBoxP7JUTFontP10COutFont_cUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMsgString_c::getStringPage(u32 param_0, u8 param_1, u8 param_2, J2DTextBox* param_3,
                                     J2DTextBox* param_4, JUTFont* param_5, COutFont_c* param_6,
                                     u8 param_7) {
    nofralloc
#include "asm/d/menu/d_menu_letter/getStringPage__12dMsgString_cFUlUcUcP10J2DTextBoxP10J2DTextBoxP7JUTFontP10COutFont_cUc.s"
}
#pragma pop

/* 801E1D5C-801E1D7C 1DC69C 0020+00 1/0 0/0 0/0 .text            draw__14dMenu_Letter_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// asm void dMenu_Letter_c::draw() {
extern "C" asm void draw__14dMenu_Letter_cFv() {
    nofralloc
#include "asm/d/menu/d_menu_letter/draw__14dMenu_Letter_cFv.s"
}
#pragma pop
