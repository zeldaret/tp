//
// Generated By: dol2asm
// Translation Unit: d/d_lib
//

#include "d/d_lib.h"
#include "dol2asm.h"
#include "dolphin/types.h"
#include "f_op/f_op_actor.h"
#include "m_Do/m_Do_controller_pad.h"

//
// Types:
//

struct mDoMtx_stack_c {
    static u8 now[48];
};

struct dEvt_control_c {
    /* 800434D8 */ void searchMapEventData(u8);
};

struct JKRHeap {};

struct JKRExpandSwitch {};

struct JKRArchive {
    /* 802D65A4 */ void findFsResource(char const*, u32) const;
};

struct JKRAramArchive {
    /* 802D781C */ void getAramAddress(char const*);
};

struct JKRAram {
    /* 802D25B4 */ void aramToMainRam(u32, u8*, u32, JKRExpandSwitch, u32, JKRHeap*, int, u32*);
};

//
// Forward References:
//

extern "C" void __ct__9STControlFssssffss();
extern "C" void setWaitParm__9STControlFssssffss();
extern "C" void init__9STControlFv();
extern "C" void Xinit__9STControlFv();
extern "C" void Yinit__9STControlFv();
extern "C" void getValueStick__9STControlFv();
extern "C" void getAngleStick__9STControlFv();
extern "C" void getValueStick__10CSTControlFv();
extern "C" void getAngleStick__10CSTControlFv();
extern "C" void checkTrigger__9STControlFv();
extern "C" void checkLeftTrigger__9STControlFv();
extern "C" void checkRightTrigger__9STControlFv();
extern "C" void checkUpTrigger__9STControlFv();
extern "C" void checkDownTrigger__9STControlFv();
extern "C" void dLib_getEventSwitchNo__Fi();
extern "C" void dLib_checkActorInRectangle__FP10fopAc_ac_cP10fopAc_ac_cPC4cXyzPC4cXyz();
extern "C" void dLib_getExpandSizeFromAramArchive__FP14JKRAramArchivePCc();
extern "C" void getTime__11dLib_time_cFv();
extern "C" void stopTime__11dLib_time_cFv();
extern "C" void startTime__11dLib_time_cFv();
extern "C" u8 m_diffTime__11dLib_time_c[4];
extern "C" u8 m_stopTime__11dLib_time_c[4];
extern "C" extern u8 struct_80450DF0[8];

//
// External References:
//

extern "C" void mDoMtx_YrotS__FPA4_fs();
extern "C" void searchMapEventData__14dEvt_control_cFUc();
extern "C" void __mi__4cXyzCFRC3Vec();
extern "C" void aramToMainRam__7JKRAramFUlPUcUl15JKRExpandSwitchUlP7JKRHeapiPUl();
extern "C" void findFsResource__10JKRArchiveCFPCcUl();
extern "C" void getAramAddress__14JKRAramArchiveFPCc();
extern "C" void PSMTXMultVec();
extern "C" void _savegpr_29();
extern "C" void _restgpr_29();
extern "C" u8 m_cpadInfo__8mDoCPd_c[256];
extern "C" u8 now__14mDoMtx_stack_c[48];
extern "C" extern f32 G_CM3D_F_ABS_MIN[1 + 1 /* padding */];

//
// Declarations:
//

/* ############################################################################################## */
/* 803A7240-803A7250 004360 0010+00 0/0 0/0 6/6 .data            ZeroQuat */
SECTION_DATA extern u8 ZeroQuat[16] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};

/* 803A7250-803A7260 004370 0010+00 0/0 1/1 0/0 .data            __vt__10CSTControl */
SECTION_DATA extern void* __vt__10CSTControl[4] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)getValueStick__10CSTControlFv,
    (void*)getAngleStick__10CSTControlFv,
};

/* 803A7260-803A7270 004380 0010+00 1/1 1/1 0/0 .data            __vt__9STControl */
SECTION_DATA extern void* __vt__9STControl[4] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)getValueStick__9STControlFv,
    (void*)getAngleStick__9STControlFv,
};

STControl::STControl(s16 param_0, s16 param_1, s16 param_2, s16 param_3, f32 param_4, f32 param_5,
                     s16 param_6, s16 param_7) {
    setWaitParm(param_0, param_1, param_2, param_3, param_4, param_5, param_6, param_7);
    init();
}

void STControl::setWaitParm(s16 param_0, s16 param_1, s16 param_2, s16 param_3, f32 param_4,
                            f32 param_5, s16 param_6, s16 param_7) {
    field_0x12 = param_0;
    field_0x14 = param_1;
    field_0x16 = param_2;
    field_0x1c = param_3;
    field_0x04 = param_4;
    field_0x08 = param_5;
    field_0x24 = param_6;
    field_0x26 = param_7;
}

void STControl::init() {
    field_0x0e = 0;
    field_0x10 = 0;
    field_0x0d = 0;
    field_0x0c = 0;
    field_0x22 = 0;
    mXwaitTimer = field_0x12;
    mYwaitTimer = field_0x12;
    field_0x1e = field_0x1c;
    field_0x20 = field_0x1c;
    mFirstWaitTime = 0;
    field_0x2a = mFirstWaitTime;
    field_0x2c = mFirstWaitTime;
}

void STControl::Xinit() {
    field_0x0e = 0;
    field_0x0c &= 0xfc;
    mXwaitTimer = field_0x12;
    field_0x1e = field_0x1c;
    field_0x2a = mFirstWaitTime;
}

/* 8003212C-8003215C 02CA6C 0030+00 1/1 0/0 0/0 .text            Yinit__9STControlFv */
#ifdef NONMATCHING
void STControl::Yinit() {
    field_0x10 = 0;
    field_0x0c &= 0xf3;
    mYwaitTimer = field_0x12;
    field_0x20 = field_0x1c;
    field_0x2c = mFirstWaitTime;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void STControl::Yinit() {
    nofralloc
#include "asm/d/d_lib/Yinit__9STControlFv.s"
}
#pragma pop
#endif

f32 STControl::getValueStick() {
    return mDoCPd_c::getStickValue(mDoCPd_c::PAD_0);
}

s16 STControl::getAngleStick() {
    return mDoCPd_c::getStickAngle(mDoCPd_c::PAD_0);
}

f32 CSTControl::getValueStick() {
    return mDoCPd_c::getSubStickValue(mDoCPd_c::PAD_0);
}

s16 CSTControl::getAngleStick() {
    return mDoCPd_c::getSubStickAngle(mDoCPd_c::PAD_0);
}

/* 8003219C-8003242C 02CADC 0290+00 0/0 24/24 0/0 .text            checkTrigger__9STControlFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void STControl::checkTrigger() {
    nofralloc
#include "asm/d/d_lib/checkTrigger__9STControlFv.s"
}
#pragma pop

bool STControl::checkLeftTrigger() {
    if ((field_0x0e == 0) && ((field_0x0c & 1) != 0)) {
        field_0x0e = mXwaitTimer + field_0x2a;
        field_0x2a = 0;
        if ((int)field_0x1e == 0) {
            mXwaitTimer -= field_0x16;
            if (mXwaitTimer < field_0x14) {
                mXwaitTimer = field_0x14;
            }
        } else {
            field_0x1e--;
        }
        return true;
    }
    return false;
}

bool STControl::checkRightTrigger() {
    if ((field_0x0e == 0) && ((field_0x0c & 2) != 0)) {
        field_0x0e = mXwaitTimer + field_0x2a;
        field_0x2a = 0;
        if ((int)field_0x1e == 0) {
            mXwaitTimer -= field_0x16;
            if (mXwaitTimer < field_0x14) {
                mXwaitTimer = field_0x14;
            }
        } else {
            field_0x1e--;
        }
        return true;
    }
    return false;
}

bool STControl::checkUpTrigger() {
    if ((field_0x10 == 0) && ((field_0x0c & 4) != 0)) {
        field_0x10 = mYwaitTimer + field_0x2c;
        field_0x2c = 0;
        if ((int)field_0x20 == 0) {
            mYwaitTimer -= field_0x16;
            if (mYwaitTimer < field_0x14) {
                mYwaitTimer = field_0x14;
            }
        } else {
            field_0x20--;
        }
        return true;
    }
    return false;
}

bool STControl::checkDownTrigger() {
    if ((field_0x10 == 0) && ((field_0x0c & 8) != 0)) {
        field_0x10 = mYwaitTimer + field_0x2c;
        field_0x2c = 0;
        if ((int)field_0x20 == 0) {
            mYwaitTimer -= field_0x16;
            if (mYwaitTimer < field_0x14) {
                mYwaitTimer = field_0x14;
            }
        } else {
            field_0x20--;
        }
        return true;
    }
    return false;
}

/* 8003261C-80032654 02CF5C 0038+00 0/0 0/0 1/1 .text            dLib_getEventSwitchNo__Fi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dLib_getEventSwitchNo(int param_0) {
    nofralloc
#include "asm/d/d_lib/dLib_getEventSwitchNo__Fi.s"
}
#pragma pop

/* 80032654-80032738 02CF94 00E4+00 0/0 0/0 8/8 .text
 * dLib_checkActorInRectangle__FP10fopAc_ac_cP10fopAc_ac_cPC4cXyzPC4cXyz */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dLib_checkActorInRectangle(fopAc_ac_c* param_0, fopAc_ac_c* param_1, cXyz const* param_2,
                                    cXyz const* param_3) {
    nofralloc
#include "asm/d/d_lib/dLib_checkActorInRectangle__FP10fopAc_ac_cP10fopAc_ac_cPC4cXyzPC4cXyz.s"
}
#pragma pop

/* 80032738-80032804 02D078 00CC+00 0/0 4/4 0/0 .text
 * dLib_getExpandSizeFromAramArchive__FP14JKRAramArchivePCc     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dLib_getExpandSizeFromAramArchive(JKRAramArchive* param_0, char const* param_1) {
    nofralloc
#include "asm/d/d_lib/dLib_getExpandSizeFromAramArchive__FP14JKRAramArchivePCc.s"
}
#pragma pop

/* ############################################################################################## */
/* 80450DD8-80450DDC 0002D8 0004+00 2/2 0/0 0/0 .sbss            m_diffTime__11dLib_time_c */
u8 dLib_time_c::m_diffTime[4];

/* 80450DDC-80450DE0 0002DC 0004+00 2/2 0/0 0/0 .sbss            None */
static u8 data_80450DDC[4];

/* 80450DE0-80450DE4 0002E0 0004+00 3/3 0/0 0/0 .sbss            m_stopTime__11dLib_time_c */
u8 dLib_time_c::m_stopTime[4];

/* 80450DE4-80450DE8 0002E4 0004+00 3/3 0/0 0/0 .sbss            None */
static u8 data_80450DE4[4];

/* 80450DE8-80450DF0 0002E8 0008+00 3/3 0/0 0/0 .sbss            None */
static u8 data_80450DE8[8];

/* 80032804-80032880 02D144 007C+00 0/0 8/8 0/0 .text            getTime__11dLib_time_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dLib_time_c::getTime() {
    nofralloc
#include "asm/d/d_lib/getTime__11dLib_time_cFv.s"
}
#pragma pop

/* 80032880-800328BC 02D1C0 003C+00 0/0 1/1 0/0 .text            stopTime__11dLib_time_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dLib_time_c::stopTime() {
    nofralloc
#include "asm/d/d_lib/stopTime__11dLib_time_cFv.s"
}
#pragma pop

/* 800328BC-80032918 02D1FC 005C+00 0/0 1/1 0/0 .text            startTime__11dLib_time_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dLib_time_c::startTime() {
    nofralloc
#include "asm/d/d_lib/startTime__11dLib_time_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 80450DF0-80450DF8 -00001 0008+00 0/0 4/4 0/0 .sbss            None */
/* 80450DF0 0001+00 data_80450DF0 None */
/* 80450DF1 0001+00 data_80450DF1 None */
/* 80450DF2 0001+00 data_80450DF2 None */
/* 80450DF3 0005+00 data_80450DF3 None */
extern u8 struct_80450DF0[8];
u8 struct_80450DF0[8];
