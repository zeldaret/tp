//
// Generated By: dol2asm
// Translation Unit: d/d_ev_camera
//

#include "d/d_ev_camera.h"
#include "d/d_debug_viewer.h"
#include "dol2asm.h"
#include "d/d_demo.h"
#include "m_Do/m_Do_controller_pad.h"
#include "d/d_camera.h"
#include "d/d_camera.h"
#include "d/actor/d_a_midna.h"
#include "d/actor/d_a_player.h"
#include "m_Do/m_Do_lib.h"
#include "d/d_drawlist.h"
#include "d/actor/d_a_alink.h"

extern "C" extern u8 struct_80450F88[8];

namespace {
    /* 800889F8-80088A7C 083338 0084+00 1/1 0/0 0/0 .text isStageEvent__25@unnamed@d_ev_camera_cpp@Fi */
    static bool isStageEvent(int param_0) {
        dStage_MapEventInfo_c* info = dComIfGp_getStage()->getMapEventInfo();
        if (info != NULL) {
            for (int i = 0; i < info->num; i++) {
                if (param_0 == info->m_entries[i].field_0x4) {
                    return true;
                }
            }
        }
        return false;
    }
} // namespace

/* 80088A7C-80088BBC 0833BC 0140+00 0/0 15/15 2/2 .text            StartEventCamera__9dCamera_cFiie */
int dCamera_c::StartEventCamera(int param_0, int param_1, ...) {
    if (chkFlag(0x20000000)) {
        return 0;
    }

    mEventData.field_0x14 = param_1;
    mEventData.field_0x18 = param_0;

    va_list args;
    va_start(args, param_1);
    for (int i = 0; i < 8; i++) {
        char* param_name = va_arg(args, char*);
        if (param_name != NULL) {
            strcpy(mEventData.mEventParams[i].name, param_name);
            mEventData.mEventParams[i].field_0x10 = va_arg(args, int);
            mEventData.mEventParams[i].value = va_arg(args, int);
        } else {
            mEventData.mEventParams[i].name[0] = 0;
            break;
        }
    }
    va_end(args);

    setFlag(0x20000000);
    mCurCamStyleTimer = 0;
    mEventData.field_0x0 = 0;
    return 1;
}

/* 80088BBC-80088C24 0834FC 0068+00 0/0 3/3 4/4 .text            EndEventCamera__9dCamera_cFi */
int dCamera_c::EndEventCamera(int param_1) {
    if (!chkFlag(0x20000000)) {
        return 0;
    }

    if (mEventData.field_0x14 == -1 || mEventData.field_0x14 == param_1) {
        clrFlag(0x20000000);
        mEventData.field_0x0 = 1;

        if (dComIfGp_getEvent().runCheck()) {
            dComIfGp_getEventManager().setCameraPlay(2);
        }

        return 1;
    }

    return 0;
}

/* 80088C24-80088CB0 083564 008C+00 10/10 0/0 0/0 .text            searchEventArgData__9dCamera_cFPc */
int dCamera_c::searchEventArgData(char* i_eventName) {
    int i;
    bool found_event = false;

    for (i = 0; i < 8; i++) {
        if (*mEventData.mEventParams[i].name == 0) {
            break;
        }

        if (strcmp(mEventData.mEventParams[i].name, i_eventName) == 0) {
            found_event = true;
            break;
        }
    }

    return found_event ? i : -1;
}

/* 80088CB0-80088D90 0835F0 00E0+00 3/3 1/1 0/0 .text            getEvIntData__9dCamera_cFPiPc */
bool dCamera_c::getEvIntData(int* i_data, char* i_event) {
    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            return 0;
        }

        if (mEventData.mEventParams[index].field_0x10 < 0) {
            *i_data = mEventData.mEventParams[index].value;
        } else {
            *i_data = *(int*)mEventData.mEventParams[index].value;
        }
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event) != 0) {
        *i_data = *dComIfGp_evmng_getMyIntegerP(mEventData.field_0x4, i_event);
    } else {
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: (int) not found\n", i_event);
        }
#endif

        mEventData.field_0x10 = 1;
        return 0;
    }
#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %d\n", i_event, *i_data);
    }
#endif

    return 1;
}

/* 80088D90-80088E58 0836D0 00C8+00 0/0 1/1 0/0 .text            getEvFloatData__9dCamera_cFPfPc */
bool dCamera_c::getEvFloatData(f32* i_data, char* i_event) {
    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            return 0;
        }

        *i_data = *(f32*)mEventData.mEventParams[index].value;
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event) != 0) {
        *i_data = *dComIfGp_evmng_getMyFloatP(mEventData.field_0x4, i_event);
    } else {
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: (float) not found\n", i_event);
        }
#endif

        mEventData.field_0x10 = 1;
        return 0;
    }
#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %f\n", i_event, *i_data);
    }
#endif

    return 1;
}

/* 80088E58-80088F1C 083798 00C4+00 4/4 0/0 0/0 .text getEvFloatListData__9dCamera_cFPPfPc */
int dCamera_c::getEvFloatListData(f32** i_data, char* i_event) {
    int num = 0;

    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            return 0;
        }

        *i_data = (f32*)mEventData.mEventParams[index].value;
        num = mEventData.mEventParams[index].field_0x10;
    } else if ((num = dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event))) {
        *i_data = dComIfGp_evmng_getMyFloatP(mEventData.field_0x4, i_event);
    } else {
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: (float[]) not found\n", i_event);
        }
#endif
        mEventData.field_0x10 = 1;
        return 0;
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %f ... [%d]\n", i_event, **i_data, num);
    }
#endif

    return num;
}

/* 80088F1C-80088FE0 08385C 00C4+00 1/1 0/0 0/0 .text getEvXyzListData__9dCamera_cFPP4cXyzPc */
int dCamera_c::getEvXyzListData(cXyz** i_data, char* i_event) {
    int num = 0;

    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            return 0;
        }

        *i_data = (cXyz*)mEventData.mEventParams[index].value;
        return mEventData.mEventParams[index].field_0x10;
    } else if ((num = dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event))) {
        *i_data = dComIfGp_evmng_getMyXyzP(mEventData.field_0x4, i_event);
    } else {
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: (xyz[]) not found\n", i_event);
        }
#endif
        mEventData.field_0x10 = 1;
        return 0;
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %f %f %f ... [%d]\n", i_event, (*i_data)->x, (*i_data)->y, (*i_data)->z, num);
    }
#endif

    return num;
}

/* 80088FE0-8008908C 083920 00AC+00 1/1 0/0 0/0 .text            getEvStringPntData__9dCamera_cFPc */
char* dCamera_c::getEvStringPntData(char* i_event) {
    char* string = NULL;

    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            return 0;
        }

        string = (char*)mEventData.mEventParams[index].value;
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event)) {
        string = dComIfGp_evmng_getMyStringP(mEventData.field_0x4, i_event);
    } else {
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: (string) not found\n", i_event);
        }
#endif
        mEventData.field_0x10 = 1;
        return 0;
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %s\n", i_event, string);
    }
#endif

    return string;
}

/* 8008908C-80089154 0839CC 00C8+00 20/20 5/5 0/0 .text            getEvIntData__9dCamera_cFPiPci */
bool dCamera_c::getEvIntData(int* i_data, char* i_event, int param_2) {
    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            *i_data = param_2;
        } else {
            *i_data = *(int*)mEventData.mEventParams[index].value;
        }
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event) != 0) {
        *i_data = *dComIfGp_evmng_getMyIntegerP(mEventData.field_0x4, i_event);
    } else {
        *i_data = param_2;
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: %d (d)\n", i_event, *i_data);
        }
#endif

        return 0;
    }
#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %d\n", i_event, *i_data);
    }
#endif

    return 1;
}

/* 80089154-8008922C 083A94 00D8+00 11/11 1/1 0/0 .text            getEvFloatData__9dCamera_cFPfPcf */
bool dCamera_c::getEvFloatData(f32* i_data, char* i_event, f32 param_2) {
    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            *i_data = param_2;
        } else {
            *i_data = *(f32*)mEventData.mEventParams[index].value;
        }
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event) != 0) {
        *i_data = *dComIfGp_evmng_getMyFloatP(mEventData.field_0x4, i_event);
    } else {
        *i_data = param_2;
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: %f (d)\n", i_event, *i_data);
        }
#endif
        return 0;
    }
#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %f\n", i_event, *i_data);
    }
#endif

    return 1;
}

/* 8008922C-8008933C 083B6C 0110+00 10/10 0/0 0/0 .text getEvXyzData__9dCamera_cFP4cXyzPc4cXyz */
bool dCamera_c::getEvXyzData(cXyz* i_data, char* i_event, cXyz param_2) {
    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            *i_data = param_2;
        } else {
            *i_data = *(cXyz*)mEventData.mEventParams[index].value;
        }
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event) != 0) {
        *i_data = *dComIfGp_evmng_getMyXyzP(mEventData.field_0x4, i_event);
    } else {
        *i_data = param_2;
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: %f %f %f (d)\n", i_event, i_data->x, i_data->y, i_data->z);
        }
#endif
        return 0;
    }
#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %f %f %f\n", i_event, i_data->x, i_data->y, i_data->z);
    }
#endif

    return 1;
}

/* 8008933C-8008941C 083C7C 00E0+00 7/7 1/1 0/0 .text            getEvStringData__9dCamera_cFPcPcPc */
bool dCamera_c::getEvStringData(char* i_data, char* i_event, char* param_2) {
    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            strcpy(i_data, param_2);
        } else {
            strcpy(i_data, (char*)mEventData.mEventParams[index].value);
        }
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event) != 0) {
        strcpy(i_data, dComIfGp_evmng_getMyStringP(mEventData.field_0x4, i_event));
    } else {
        strcpy(i_data, param_2);
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: %s (d)\n", i_event, i_data);
        }
#endif
        return 0;
    }
#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %s\n", i_event, i_data);
    }
#endif

    return 1;
}

/* 8008941C-800894C4 083D5C 00A8+00 1/1 0/0 0/0 .text            getEvStringPntData__9dCamera_cFPcPc */
char* dCamera_c::getEvStringPntData(char* i_event, char* param_1) {
    char* string = NULL;

    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            string = param_1;
        } else {
            string = (char*)mEventData.mEventParams[index].value;
        }
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event)) {
        string = dComIfGp_evmng_getMyStringP(mEventData.field_0x4, i_event);
    } else {
        string = param_1;
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: %s (d)\n", i_event, string);
        }
#endif
        return string;
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %s\n", i_event, string);
    }
#endif

    return string;
}

/* 800894C4-800895F4 083E04 0130+00 7/7 1/1 0/0 .text            getEvActor__9dCamera_cFPc */
fopAc_ac_c* dCamera_c::getEvActor(char* i_event) {
    char* string = getEvStringPntData(i_event);
    if (string == NULL) {
        return NULL;
    }

    fopAc_ac_c* actor;
    if (*(u32*)string == '@PLA') {
        actor = mpPlayerActor;
    } else if (*(u32*)string == '@STA') {
        actor = dComIfGp_event_getPt1();
    } else if (*(u32*)string == '@PAR') {
        actor = dComIfGp_event_getPt2();
    } else if (*(u32*)string == '@TAL') {
        actor = dComIfGp_event_getTalkPartner();
    } else if (*(u32*)string == '@DOO') {
        actor = dComIfGp_event_getDoorPartner();
    } else if (*(u32*)string == '@TAR' || *(u32*)string == '@ITE') {
        actor = dComIfGp_event_getItemPartner();
    } else if (*(u32*)string == 'Link') {
        actor = dComIfGp_getLinkPlayer();
    } else {
        actor = fopAcM_searchFromName4Event(string, -1);
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        if (actor != NULL) {
            char name[16];
            fopAcM_getNameString(actor, name);
            OS_REPORT("camera: event:                   = %s\n", name);
        } else {
            OS_REPORT("camera: event:                   = (Who?)\n");
        }
    }
#endif

    return actor;
}

/* 800895F4-80089730 083F34 013C+00 8/8 1/1 0/0 .text            getEvActor__9dCamera_cFPcPc */
fopAc_ac_c* dCamera_c::getEvActor(char* i_event, char* param_1) {
    char string[16];
    string[0] = 0;
    getEvStringData(string, i_event, param_1);
    char* name_str = string;

    fopAc_ac_c* actor;
    if (*(u32*)string == '@PLA') {
        actor = mpPlayerActor;
    } else if (*(u32*)string == '@STA') {
        actor = dComIfGp_event_getPt1();
    } else if (*(u32*)string == '@PAR') {
        actor = dComIfGp_event_getPt2();
    } else if (*(u32*)string == '@TAL') {
        actor = dComIfGp_event_getTalkPartner();
    } else if (*(u32*)string == '@DOO') {
        actor = dComIfGp_event_getDoorPartner();
    } else if (*(u32*)string == '@TAR' || *(u32*)string == '@ITE') {
        actor = dComIfGp_event_getItemPartner();
    } else if (*(u32*)string == 'Link') {
        actor = dComIfGp_getLinkPlayer();
    } else {
        actor = fopAcM_searchFromName4Event(name_str, -1);
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        if (actor != NULL) {
            char name[16];
            fopAcM_getNameString(actor, name);
            OS_REPORT("camera: event:                   = %s\n", name);
        } else {
            OS_REPORT("camera: event:                   = (Who?)\n");
        }
    }
#endif

    return actor;
}

/* 80089730-800897E8 084070 00B8+00 0/0 3/0 0/0 .text            pauseEvCamera__9dCamera_cFv */
bool dCamera_c::pauseEvCamera() {
    if (mCurCamStyleTimer == 0) {
        Reset();
        field_0x158.field_0x0 = 1;
        mWork.event.field_0x0 = getEvIntData(&mWork.event.field_0x8, "Timer", -1);
        getEvIntData(&mWork.event.field_0x4, "Stay", 0);
    }

    if (mWork.event.field_0x4 != 0) {
        setFlag(1);
    }

    if (mWork.event.field_0x0 && mCurCamStyleTimer < mWork.event.field_0x8) {
        return false;
    }

    return true;
}

namespace {
    /* 804253B4-804253C0 0520D4 000C+00 2/3 0/0 0/0 .bss WolfAdditionVec__25@unnamed@d_ev_camera_cpp@*/
    static cXyz WolfAdditionVec;
}

/* 800897E8-8008A510 084128 0D28+00 0/0 1/0 0/0 .text            fixedFrameEvCamera__9dCamera_cFv */
bool dCamera_c::fixedFrameEvCamera() {
    // FAKEMATCH???
    if (mCurCamStyleTimer == 0) {
        cXyz sp38, sp44;
        getEvXyzData(&sp44, "Eye", mEye);
        getEvXyzData(&sp38, "Center", mCenter);
        getEvXyzData(&mWork.event.mBasePos, "BasePos", cXyz::Zero);
        getEvFloatData(&mWork.event.mFovy, "Fovy", mFovy);
        mWork.event.field_0x30 = getEvFloatData(&mWork.event.mBank, "Bank", 0.0f);
        mWork.event.field_0x0 = getEvIntData(&mWork.event.mTimer, "Timer", -1);
        getEvStringData(&mWork.event.mRelUseMask, "RelUseMask", "oo");

        #ifdef DEBUG
        if (strlen(&mWork.event.mRelUseMask) != 2) {
            OSReport("camera: event:                   bad length -> xx\n");
            strcpy(&mWork.event.mRelUseMask, "xx");
            JUTAssertion::showAssert(JUTAssertion::getSDevice(), "d_ev_camera.cpp", 0x32e, "0");
            OSPanic("d_ev_camera.cpp", 0x32e, "Halt");
        }
        #endif

        mWork.event.mRelActor = getEvActor("RelActor");
        if (mWork.event.mRelActor && mWork.event.mRelUseMask == 111) {
            mWork.event.field_0x10 = relationalPos(mWork.event.mRelActor, &sp38);

        } else if (mWork.event.mRelActor && mWork.event.mRelUseMask == 119) {
            if (mIsWolf == 1) {
                sp38 += WolfAdditionVec;
            }
            mWork.event.field_0x10 = relationalPos(mWork.event.mRelActor, &sp38);

        } else if (mWork.event.mRelActor && mWork.event.mRelUseMask == 87) {
            if (mIsWolf == 1) {
                sp38 -= WolfAdditionVec;
            }
            mWork.event.field_0x10 = relationalPos(mWork.event.mRelActor, &sp38);

        } else if (mWork.event.mRelUseMask == 110) {
            cSGlobe sg28 = mEye - positionOf(mWork.event.mRelActor);
            cSAngle sa260 = sg28.U() - directionOf(mWork.event.mRelActor);
            if (sa260.Val() < cSAngle::_0) {
                sp38.x = -sp38.x;
            }
            mWork.event.field_0x10 = relationalPos(mWork.event.mRelActor, &sp38);

        } else if (mWork.event.mRelUseMask == 112) {
            cXyz mRelPos = relationalPos(mWork.event.mRelActor, &sp38);
            f32 fVar1 = cXyz(mRelPos - positionOf(mpPlayerActor)).abs();
            sp38.x = -sp38.x;
            mRelPos = relationalPos(mWork.event.mRelActor, &sp38);
            f32 fVar2 = cXyz(mRelPos - positionOf(mpPlayerActor)).abs();
            if (fVar1 > fVar2) {
                sp38.x = -sp38.x;
            }
            mWork.event.field_0x10 = relationalPos(mWork.event.mRelActor, &sp38);

        } else if (mWork.event.mRelUseMask == 116) {
            mWork.event.field_0x10 = attentionPos(mWork.event.mRelActor) + sp38;

        } else {
            mWork.event.field_0x10 = sp38;
        }
        
        if (mWork.event.mRelActor && mWork.event.field_0x29 == 111) {
            mWork.talk.field_0x4 = relationalPos(mWork.event.mRelActor, &sp44);

        } else if (mWork.event.mRelActor && mWork.event.field_0x29 == 119) {
            if (mIsWolf == 1) {
                sp44 += WolfAdditionVec;
            }
            mWork.talk.field_0x4 = relationalPos(mWork.event.mRelActor, &sp44);

        } else if (mWork.event.mRelActor && mWork.event.field_0x29 == 87) {
            if (mIsWolf == 1) {
                sp44 -= WolfAdditionVec;
            }
            mWork.talk.field_0x4 = relationalPos(mWork.event.mRelActor, &sp44);

        } else if (mWork.event.mRelActor && mWork.event.field_0x29 == 114) {
            if ((field_0xac & 1) != 0) {
                sp44.x = -sp44.x;
            }
            mWork.talk.field_0x4 = relationalPos(mWork.event.mRelActor, &sp44);

            if (lineBGCheck(&mWork.event.field_0x10, &mWork.talk.field_0x4, 0x4007)) {
                sp44.x = -sp44.x;
            }
            mWork.talk.field_0x4 = relationalPos(mWork.event.mRelActor, &sp44);

        } else if (mWork.event.field_0x29 == 110) {
            cSGlobe cStack_260 = mEye - positionOf(mWork.event.mRelActor);
            cSAngle cStack_26c = cStack_260.U() - directionOf(mWork.event.mRelActor);
            if (cStack_26c < cSAngle::_0) {
                sp44.x = -sp44.x;
            }
            mWork.talk.field_0x4 = relationalPos(mWork.event.mRelActor, &sp44);

            if (lineBGCheck(&mWork.event.field_0x10, &mWork.talk.field_0x4, 0x4007)) {
                sp44.x = -sp44.x;
            }

        } else if (mWork.event.field_0x29 == 112) {
            cXyz mRelPos2 = relationalPos(mWork.event.mRelActor, &sp44);
            f32 fVar3 = cXyz(mRelPos2 - positionOf(mpPlayerActor)).abs();
            sp44.x = -sp44.x;
            mRelPos2 = relationalPos(mWork.event.mRelActor, &sp44);
            f32 fVar4 = cXyz(mRelPos2 - positionOf(mpPlayerActor)).abs();
            if (fVar3 > fVar4) {
                sp44.x = -sp44.x;
            }
            mWork.talk.field_0x4 = relationalPos(mWork.event.mRelActor, &sp44);

        } else if (mWork.event.field_0x29 == 116) {
            mWork.talk.field_0x4 = attentionPos(mWork.event.mRelActor) + sp44;
            
        } else {
            mWork.talk.field_0x4 = sp44;
        }

        field_0x158.field_0x0 = true;
    }

    field_0x5c.mCenter = mWork.event.field_0x10;
    field_0x5c.mEye = mWork.talk.field_0x4;
    field_0x5c.mDirection.Val(field_0x5c.mEye - field_0x5c.mCenter);
    field_0x5c.mFovy = mWork.event.mFovy;

    if (mWork.event.field_0x30) {
        field_0x5c.mBank = cAngle::d2s(mWork.event.mBank);
        setFlag(0x400);
    }

    if (mWork.event.field_0x0 && mCurCamStyleTimer < mWork.event.mTimer) {
        return 0;
    }
        
    return 1;
    
}

/* 8008A510-8008A974 084E50 0464+00 0/0 1/0 0/0 .text            stokerEvCamera__9dCamera_cFv */
bool dCamera_c::stokerEvCamera() {
    // FAKEMATCH???
    if (mCurCamStyleTimer == 0) {
        cXyz unused_0, unused_1;
        getEvXyzData(&mWork.stoker.field_0x4, "EyeGap", cXyz::Zero);
        getEvXyzData(&mWork.stoker.field_0x10, "CtrGap", cXyz::Zero);
        getEvFloatData(&mWork.stoker.field_0x20, "EyeCus", 1.0f);
        getEvFloatData(&mWork.stoker.field_0x1c, "CtrCus", 1.0f);
        getEvFloatData(&mWork.stoker.field_0x24, "Fovy", mFovy);

        mWork.stoker.field_0x1 = getEvFloatData(&mWork.stoker.field_0x28, "Bank", 0.0f);
        mWork.stoker.field_0x0 = getEvIntData(&mWork.talk.field_0x40, "Timer", -1);
        mWork.stoker.field_0x2c = getEvActor("Stoker", "@STARTER");
        mWork.stoker.field_0x30 = getEvActor("Target", "@PLAYER");

        if (mWork.stoker.field_0x2c == 0 || mWork.stoker.field_0x30 == NULL) {
            OS_REPORT("camera: event: error: stoker or target actor missing\n");
            return 1;
        }
        
        mWork.stoker.field_0x34 = fopAcM_GetID(mWork.stoker.field_0x2c);
        mWork.stoker.field_0x38 = fopAcM_GetID(mWork.stoker.field_0x30);
        field_0x158.field_0x0 = true;
    }

    cSGlobe cStack_d0;
    if (mWork.stoker.field_0x30) {
        if (fopAcM_SearchByID(mWork.stoker.field_0x38) == NULL) {
            OS_REPORT("camera: event: error: target actor dead\n");
            return 1;
        }
    
        cStack_d0.Val(mWork.stoker.field_0x10);
        cStack_d0.V(cStack_d0.V() + mWork.stoker.field_0x30->shape_angle.x);
        cStack_d0.U(cStack_d0.U() + mWork.stoker.field_0x30->shape_angle.y);

        cXyz cStack_38 = attentionPos(mWork.stoker.field_0x30) + cStack_d0.Xyz();
        field_0x5c.mCenter += (cStack_38 - field_0x5c.mCenter) * mWork.stoker.field_0x1c;
    }

    if (mWork.stoker.field_0x2c) {
        if (!fopAcM_SearchByID(mWork.stoker.field_0x34)) {
            OS_REPORT("camera: event: error: stoker actor dead\n");
            return 1;
        }

        cStack_d0.Val(mWork.talk.field_0x4);
        cStack_d0.V(cStack_d0.V() + mWork.stoker.field_0x2c->shape_angle.x);
        cStack_d0.U(cStack_d0.U() + mWork.stoker.field_0x2c->shape_angle.y);
        cXyz tmp_vec = attentionPos(mWork.stoker.field_0x2c) + cStack_d0.Xyz();
        field_0x5c.mEye += (tmp_vec - field_0x5c.mEye) * mWork.stoker.field_0x20;
    }

    field_0x5c.mDirection.Val(field_0x5c.mEye - field_0x5c.mCenter);
    field_0x5c.mFovy = mWork.stoker.field_0x24;

    if (mWork.stoker.field_0x1) {
        cAngle this_00;
        field_0x5c.mBank = this_00.d2s(mWork.stoker.field_0x28);
        setFlag(0x400);
    }

    if (mWork.stoker.field_0x0 && mCurCamStyleTimer < mWork.stoker.field_0x40) {
        return 0;
    }

    return 1;
}

/* 8008A974-8008B9B0 0852B4 103C+00 0/0 1/0 0/0 .text            rollingEvCamera__9dCamera_cFv */
bool dCamera_c::rollingEvCamera() {
    // FAKEMATCH???
    if (mCurCamStyleTimer == 0) {
        getEvXyzData(&mWork.rolling.mEye, "Eye", mEye);
        getEvXyzData(&mWork.rolling.mCenter, "Center", mCenter);
        getEvFloatData(&mWork.rolling.mCtrCus, "CtrCus", 1.0f);
        getEvIntData(&mWork.rolling.mTransType, "TransType", 0);
        getEvFloatData(&mWork.rolling.mFovy, "Fovy", mFovy);
        mWork.event.field_0x1 = getEvFloatData(&mWork.rolling.mBank, "Bank", 0.0f);
        getEvFloatData(&mWork.rolling.mRoll, "Roll", 2.0f);
        getEvFloatData(&mWork.rolling.mRadiusAdd, "RadiusAdd", 0.0f);
        cSGlobe cStack_2ac = mWork.rolling.mEye - mWork.rolling.mCenter;
        getEvFloatData(&mWork.rolling.mLatitude, "Latitude", cStack_2ac.V().Degree());
        mWork.event.field_0x0 = getEvIntData(&mWork.rolling.mTimer, "Timer", -1);
        getEvStringData(&mWork.event.field_0x40, "RelUseMask", "oo");

        mWork.rolling.mRelActor = getEvActor("RelActor");
        if (mWork.rolling.mRelActor) {
            if (mWork.event.field_0x40 == 111) {
                mWork.rolling.field_0x10 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mCenter);

            } else if (mWork.event.field_0x40 == 110) {
                cSGlobe cStack_2b4 = mEye - positionOf(mWork.rolling.mRelActor);
                cSAngle acStack_2f0 = cStack_2b4.U() - directionOf(mWork.rolling.mRelActor);
                if (acStack_2f0 < cSAngle::_0) {
                    mWork.rolling.mCenter.x = -mWork.rolling.mCenter.x;
                }
                mWork.rolling.field_0x10 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mCenter);

            } else if (mWork.event.field_0x40 == 112) {
                cXyz sp2E0 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mCenter);
                f32 fVar1 = cXyz(sp2E0 - positionOf(mpPlayerActor)).abs();
                mWork.rolling.mCenter.x = -mWork.rolling.mCenter.x;
                sp2E0 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mCenter);
                f32 fVar2 = cXyz(sp2E0 - positionOf(mpPlayerActor)).abs();
                if (fVar1 > fVar2) {
                    mWork.rolling.mCenter.x = -mWork.rolling.mCenter.x;
                }
                mWork.rolling.field_0x10 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mCenter);

            }  
        } else {
            mWork.rolling.field_0x10 = mWork.rolling.mCenter;
        }

        if (mWork.rolling.mRelActor && mWork.event.field_0x41 == 111) {
            mWork.rolling.field_0x4 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mEye);

        } else if (mWork.rolling.mRelActor && mWork.event.field_0x41 == 114) {
            if ((field_0xac & 1) != 0) {
                mWork.rolling.mEye.x = -mWork.rolling.mEye.x;
            }
            mWork.rolling.field_0x4 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mEye);
            if (lineBGCheck(&mWork.rolling.field_0x10, &mWork.rolling.field_0x4, 0x4007)) {
                mWork.rolling.mEye.x = -mWork.rolling.mEye.x;
            }
            mWork.rolling.field_0x4 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mEye);

        } else if (mWork.event.field_0x41 == 110) {
            cSGlobe cStack_2e8 = mEye - positionOf(mWork.rolling.mRelActor);
            cSAngle acStack_2f8 = cStack_2e8.U() - directionOf(mWork.rolling.mRelActor);;
            if (acStack_2f8 < cSAngle::_0) {
                mWork.rolling.mEye.x = -mWork.rolling.mEye.x;
            }
            mWork.rolling.field_0x4 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mEye);

        } else if (mWork.event.field_0x41 == 112) {
            cXyz sp2D4 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mEye);
            f32 fVar3 = cXyz(sp2D4 - positionOf(mpPlayerActor)).abs();
            mWork.rolling.mEye.x = -mWork.rolling.mEye.x;
            sp2D4 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mEye);
            f32 fVar4 = cXyz(sp2D4 - positionOf(mpPlayerActor)).abs();
            if (fVar3 > fVar4) {
                mWork.rolling.mEye.x = -mWork.rolling.mEye.x;
            }
            mWork.rolling.field_0x4 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mEye);

        } else {
            mWork.rolling.field_0x4 = mWork.rolling.mEye;
        }

        field_0x158.field_0x0 = true;
    }

    if ((mWork.rolling.mTransType == 1 || mWork.rolling.mTransType == 2) && mWork.rolling.mRelActor) {
        if (mWork.event.field_0x40 == 111) {
            mWork.rolling.field_0x10 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mCenter);

        } else if (mWork.event.field_0x40 == 110) {
            cSGlobe cStack_2f0 = mEye - positionOf(mWork.rolling.mRelActor);
            cSAngle acStack_2fc = cStack_2f0.U() - directionOf(mWork.rolling.mRelActor);
            if (acStack_2fc < cSAngle::_0) {
                mWork.rolling.mCenter.x = -mWork.rolling.mCenter.x;
            }
            mWork.rolling.field_0x10 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mCenter);

        } else if (mWork.event.field_0x40 == 112) {
            cXyz sp2C8 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mCenter);
            f32 fVar5 = cXyz(sp2C8 - positionOf(mpPlayerActor)).abs();
            mWork.rolling.mCenter.x = -mWork.rolling.mCenter.x;
            sp2C8 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mCenter);
            f32 fVar6 = cXyz(sp2C8 - positionOf(mpPlayerActor)).abs();
            if (fVar5 > fVar6) {
                mWork.rolling.mCenter.x = -mWork.rolling.mCenter.x;
            }
            mWork.rolling.field_0x10 = relationalPos(mWork.rolling.mRelActor, &mWork.rolling.mCenter);

        }
    }

    field_0x5c.mCenter += (mWork.rolling.field_0x10 - field_0x5c.mCenter) * mWork.rolling.mCtrCus;
    field_0x5c.mDirection.Val(mWork.rolling.field_0x4 - mWork.rolling.field_0x10);

    if (mWork.rolling.mTransType == 2) {
        field_0x5c.mDirection.V(mWork.rolling.mLatitude);
    }

    field_0x5c.mDirection.U(field_0x5c.mDirection.U() + (cSAngle)(mCurCamStyleTimer * mWork.rolling.mRoll));
    field_0x5c.mDirection.R(mCurCamStyleTimer * mWork.rolling.mRadiusAdd + field_0x5c.mDirection.R());

    field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();
    field_0x5c.mFovy = mWork.rolling.mFovy;

    if (mWork.event.field_0x1) {
        cAngle this_00;
        field_0x5c.mBank = this_00.d2s(mWork.rolling.mBank);
        setFlag(0x400);
    }

    if (mWork.event.field_0x0 && mCurCamStyleTimer < mWork.rolling.mTimer) {
        return 0;
    }

    return 1;
}
namespace {
    /* 804253CC-804253D8 0520EC 000C+00 1/2 0/0 0/0 .bss MidnaAdditionVec__25@unnamed@d_ev_camera_cpp@ */
    static cXyz MidnaAdditionVec;

    /* 8008E750-8008E774 089090 0024+00 1/1 0/0 0/0 .text isRelChar__25@unnamed@d_ev_camera_cpp@Fc */
    static inline bool isRelChar(char param_1) {
        return param_1 != '-' && param_1 != 'x';
    }
} // namespace

/* 8008B9B0-8008BE2C 0862F0 047C+00 0/0 1/0 0/0 .text            fixedPositionEvCamera__9dCamera_cFv */
bool dCamera_c::fixedPositionEvCamera() {
    // NONMATCHING
    static cXyz DefaultGap(cXyz::Zero);
    bool rv = true;

    if (mCurCamStyleTimer == 0) {
        cXyz sp24;
        getEvXyzData(&mWork.event.field_0x10, "CtrGap", DefaultGap);
        getEvXyzData(&sp24, "Eye", mEye);
        getEvFloatData(&mWork.fixedPos.field_0x28, "Fovy", mFovy);
        getEvFloatData(&mWork.fixedPos.field_0x30, "CtrCus", 1.0f);
        getEvFloatData(&mWork.fixedPos.field_0x38, "Radius", 100000.0f);
        getEvFloatData(&mWork.fixedPos.field_0x34, "StartRadius", mWork.rolling.mBank);
        mWork.event.field_0x1 = getEvFloatData(&mWork.fixedPos.field_0x2c, "Bank", 0.0f);
        getEvStringData(&mWork.event.field_0x48, "RelUseMask", "o");
        mWork.event.field_0x0 = getEvIntData(&mWork.event.field_0x4c, "Timer", -1);

        //mWork.fixedPos.field_0x40 = getEvActor("Target", "@PLAYER");
        if ((mWork.fixedPos.field_0x40 = getEvActor("Target", "@PLAYER")) == NULL) {
            OS_REPORT("camera: event: error: target actor missing\n");
            return 1;
        }

        mWork.fixedPos.field_0x44 = fopAcM_GetID(mWork.fixedPos.field_0x40);
        mWork.fixedPos.field_0x3c = getEvActor("RelActor");

        if (mWork.fixedPos.field_0x3c && isRelChar(mWork.event.field_0x48)) {
            mWork.fixedPos.field_0x4 = relationalPos(mWork.fixedPos.field_0x3c, &sp24);
        } else {
            mWork.fixedPos.field_0x4 = sp24;        
        }

        mWork.fixedPos.field_0x1c = mCenter;
        field_0x158.field_0x0 = true;
    }

    if (fopAcM_SearchByID(mWork.fixedPos.field_0x44) == NULL) {
        OS_REPORT("camera: event: error: target actor dead\n");
        return 1;
    }

    mWork.fixedPos.field_0x1c = relationalPos(mWork.rolling.field_0x40, &mWork.talk.field_0x10);
    field_0x5c.mCenter += (mWork.fixedPos.field_0x1c - field_0x5c.mCenter) * mWork.chase.field_0x30;
    field_0x5c.mEye = mWork.talk.field_0x4;
    field_0x5c.mDirection.Val(field_0x5c.mEye - field_0x5c.mCenter);

    f32 fVar1 = mWork.rolling.mBank;
    if (mWork.event.field_0x0 && mCurCamStyleTimer < mWork.fixedPos.field_0x4c) {
        fVar1 = mWork.rolling.mFovy + (mWork.rolling.mBank - mWork.rolling.mFovy) * (mCurCamStyleTimer / f32(mWork.fixedPos.field_0x4c));
        rv = false;
    }

    if (field_0x5c.mDirection.R() > fVar1) {
        field_0x5c.mDirection.R(fVar1);
        field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();
    }

    field_0x5c.mFovy = mWork.chase.field_0x28;
    if (mWork.event.field_0x1) {
        cAngle this_00;
        field_0x5c.mBank = this_00.d2s(mWork.chase.field_0x2c);
        setFlag(0x400);
    }

    if (rv != 0) {
        field_0x158.field_0x0 = true;
    }

    return rv;
}

/* 8008BE2C-8008BE50 08676C 0024+00 0/0 1/0 0/0 .text            uniformTransEvCamera__9dCamera_cFv */
bool dCamera_c::uniformTransEvCamera() {
    transEvCamera(1);
}

/* 8008BE50-8008BE74 086790 0024+00 0/0 1/0 0/0 .text            uniformBrakeEvCamera__9dCamera_cFv */
bool dCamera_c::uniformBrakeEvCamera() {
    transEvCamera(2);
}

/* 8008BE74-8008BE98 0867B4 0024+00 0/0 1/0 0/0 .text            uniformAcceleEvCamera__9dCamera_cFv */
bool dCamera_c::uniformAcceleEvCamera() {
    transEvCamera(3);
}

namespace {
    inline static bool lineCollisionCheck(cXyz param_0, cXyz param_1, fopAc_ac_c* param_2,
                                          fopAc_ac_c* param_3, fopAc_ac_c* param_4) {
        return dComIfG_Ccsp()->ChkCamera(param_0, param_1, 15.0f, param_2, param_3, param_4);
    }
} // namespace

/* 8008BE98-8008E750 0867D8 28B8+00 3/3 0/0 0/0 .text            transEvCamera__9dCamera_cFi */
bool dCamera_c::transEvCamera(int param_1) {
    // NONMATCHING
    struct mWork::trans* trans = &mWork.trans;

    struct {
        cXyz sp58;
    } pos;

    struct {
        cXyz sp70;
    } pos2;

    cXyz sp64, sp4c;

    bool rv = 0;

    s32 lit_5984[4] = { 0x00000000, 0x00000000, 0x3F800000, 0x3F800000 };
    f32 lit_5985[7] = { 0x00000000, 0x00000000, 0x3ECCCCCD, 0x3F333333, 0x3F666666, 0x3F800000, 0x3F800000 };
    // u32 lit_5986[7] = { 0x00000000, 0x00000000, 0x3DCCCCCD, 0x3E99999A, 0x3F19999A, 0x3F800000, 0x3F800000 };
    // u32 lit_5987[5] = { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 };

    // u32* local_894 = lit_5986;
    // u32* local_b0 = lit_5987;

    // f32 local_d0[5] = { 0, 4, 7, 7, 0 };

    if (mCurCamStyleTimer == 0) {
        if (!getEvIntData(&trans->mTimer, "Timer")) {
            OS_REPORT("camera: event: error: UNITRANS no Timer\n");
            return 1;
        }

        getEvIntData(&trans->mBSpCurve, "BSpCurve", param_1);
        int iVar1 = trans->mBSpCurve;
        if (trans->mBSpCurve != 0) {
            mEventData.field_0xf0.Init(lit_5984[iVar1], trans->mTimer + 1);
            mEventData.field_0xf0.Step();
        } else {
            iVar1 = getEvFloatListData(&trans->mBSpPoints, "BSpPoints");
            if (iVar1 != 0) {
                mEventData.field_0xf0.Init(iVar1, trans->mTimer + 1);
                mEventData.field_0xf0.Step();
                trans->mBSpCurve = -1;
            }
        }

        int slot;
        if (!getEvIntData(&slot, "EndSlot")) {
            getEvXyzData(&trans->mEye, "Eye", mEye);
            getEvXyzData(&trans->mCenter, "Center", mCenter);
            getEvFloatData(&trans->mFovy, "Fovy", mFovy);
            trans->field_0x68 = getEvFloatData(&trans->field_0x3c, "Bank", mBank.Degree());
        } else {
            dCamInfo_c* ptr1 = &field_0xd0[slot];
            trans->mCenter = (*ptr1).mCenter;
            trans->mEye = (*ptr1).mEye;
            trans->mFovy = (*ptr1).mFovy;
            s16 sVar1 = (*ptr1).mBank.Val();
            trans->field_0x3c = sVar1;
            if (sVar1 != 0.0f) {
                trans->field_0x68 = true;
            }
        }

        if (!getEvIntData(&slot, "StartSlot")) {
            getEvXyzData(&trans->mStartEye, "StartEye", mEye);
            getEvXyzData(&trans->mStartCenter, "StartCenter", mCenter);
            getEvFloatData(&trans->mStartFovy, "StartFovy", mFovy);
            trans->field_0x68 |= getEvFloatData(&trans->field_0x1c, "StartBank", mBank.Degree());
        } else {
            dCamInfo_c* ptr2 = &field_0xd0[slot];
            trans->mStartCenter = (*ptr2).mCenter;
            trans->mStartEye = (*ptr2).mEye;
            trans->mStartFovy = (*ptr2).mFovy;
            s16 sVar2 = (*ptr2).mBank.Val();
            trans->field_0x1c = sVar2;
            if (sVar2 != 0.0f) {
                trans->field_0x68 = true;
            }
        }

        getEvIntData(&trans->mTransType, "TransType", 0);
        trans->mRelActor = getEvActor("RelActor");
        getEvStringData(&trans->mRelUseMask, "RelUseMask", "--oo");
        getEvFloatData(&trans->mCushion, "Cushion", 1.0f);

        if (trans->mRelActor) {
            cXyz spf0, spfc;
            trans->mRelActorID = fopAcM_GetID(trans->mRelActor);
            if (mIsWolf == 1 && trans->mRelActor == mpPlayerActor) {
                daPy_py_c* mPlayer = (daPy_py_c*)mpPlayerActor;
                daMidna_c* mMidna =  daPy_py_c::getMidnaActor();
                cXyz mAdditionVec = WolfAdditionVec;
                if (mPlayer->checkMidnaRide() != 0 && !mMidna->checkNoDraw()) {
                    mAdditionVec = MidnaAdditionVec;
                }

                if (trans->mRelUseMask == 119) {
                    trans->mStartCenter += mAdditionVec;
                }
                if (trans->mRelUseMask == 87) {
                    trans->mStartCenter -= mAdditionVec;
                }

                if (trans->field_0x49 == 119) {
                    trans->mStartEye += mAdditionVec;
                }
                if (trans->field_0x49 == 87) {
                    trans->mStartEye -= mAdditionVec;
                }

                if (trans->field_0x4a == 119) {
                    trans->mCenter += mAdditionVec;
                }
                if (trans->field_0x4a == 87) {
                    trans->mCenter -= mAdditionVec;
                }

                if (trans->field_0x4b == 119) {
                    trans->mEye += mAdditionVec;
                }
                if (trans->field_0x4b == 87) {
                    trans->mEye -= mAdditionVec;
                }
            }

            if (trans->field_0x49 == 114) {
                spf0 = relationalPos(trans->mRelActor, &trans->mStartCenter);
                if ((field_0xac & 1) != 0) {
                    trans->mStartEye.x = -trans->mStartEye.x;
                }

                spfc = relationalPos(trans->mRelActor, &trans->mStartEye);
                if (lineBGCheck(&spf0, &spfc, 0x4007)) {
                    trans->mStartEye.x = -trans->mStartEye.x;
                }
            }

            if (trans->mRelUseMask == 110 || trans->field_0x49 == 110) {
                cSGlobe cStack_7b8(mEye - positionOf(trans->mRelActor));
                cSAngle acStack_898 = cStack_7b8.U() - directionOf(trans->mRelActor);
                if (acStack_898 < cSAngle::_0) {
                    if (trans->mRelUseMask == 110) {
                        trans->mStartCenter.x = -trans->mStartCenter.x;
                    }
                    if (trans->field_0x49 == 110) {
                        trans->mStartEye.x = -trans->mStartEye.x;
                    }
                }

                spf0 = relationalPos(trans->mRelActor, &trans->mCenter);
                spfc = relationalPos(trans->mRelActor, &trans->mEye);
                if (lineBGCheck(&spf0, &spfc, 0x4007)) {
                    trans->mStartEye.x = -trans->mStartEye.x;
                }
            }

            if (trans->field_0x4a == 110 || trans->field_0x4b == 110) {
                cSGlobe cStack_7c0(mEye - positionOf(trans->mRelActor));
                cSAngle acStack_89c = cStack_7c0.U() - directionOf(trans->mRelActor);
                if (acStack_89c < cSAngle::_0) {
                    if (trans->field_0x4a == 110) {
                        trans->mCenter.x = -trans->mCenter.x;
                    }

                    if (trans->field_0x4b == 110) {
                        trans->mEye.x = -trans->mEye.x;
                    }
                }

                spf0 = relationalPos(trans->mRelActor, &trans->mCenter);
                spfc = relationalPos(trans->mRelActor, &trans->mEye);
                if (lineBGCheck(&spf0, &spfc, 0x4007)) {
                    trans->mEye.x = -trans->mEye.x;
                }
            }

            if (trans->mRelUseMask == 78 || trans->field_0x49 == 78) {
                cSGlobe cStack_7c8(mEye - positionOf(trans->mRelActor));
                cSAngle acStack_8a0 = cStack_7c8.U() - directionOf(trans->mRelActor);
                if (acStack_8a0 > cSAngle::_0) {
                    if (trans->mRelUseMask == 78) {
                        trans->mStartCenter.x = -trans->mStartCenter.x;
                    }

                    if (trans->field_0x49 == 78) {
                        trans->mStartEye.x = -trans->mStartEye.x;
                    }
                }

                spf0 = relationalPos(trans->mRelActor, &trans->mStartCenter);
                spfc = relationalPos(trans->mRelActor, &trans->mStartEye);
                if (lineBGCheck(&spf0, &spfc, 0x4007)) {
                    trans->mStartEye.x = -trans->mStartEye.x;
                }
            }

            if (trans->field_0x4a == 78 || trans->field_0x4b == 78) {
                cSGlobe cStack_7d0(mEye - positionOf(trans->mRelActor));
                cSAngle acStack_8a4 = cStack_7d0.U() - directionOf(trans->mRelActor);
                if (acStack_8a4 > cSAngle::_0) {
                    if (trans->field_0x4a == 78) {
                        trans->mCenter.x = -trans->mCenter.x;
                    }

                    if (trans->field_0x4b == 78) {
                        trans->mEye.x = -trans->mEye.x;
                    }
                }

                spf0 = relationalPos(trans->mRelActor, &trans->mCenter);
                spfc = relationalPos(trans->mRelActor, &trans->mEye);
                if (lineBGCheck(&spf0, &spfc, 0x4007)) {
                    trans->mEye.x = -trans->mEye.x;
                }
            }

            if (trans->mRelUseMask == 102) {
                cSGlobe cStack_7d8(trans->mStartCenter);
                cStack_7d8.U(cStack_7d8.U() + directionOf(trans->mRelActor));
                trans->mStartCenter = attentionPos(trans->mRelActor) + cStack_7d8.Xyz();
                trans->mRelUseMask = 120;
            }

            if (trans->field_0x49 == 102) {
                cSGlobe cStack_7e0(trans->mStartEye);
                cStack_7e0.U(cStack_7e0.U() + directionOf(trans->mRelActor));
                trans->mStartEye = attentionPos(trans->mRelActor) + cStack_7e0.Xyz();
                trans->field_0x49 = 120;
            }

            if (trans->field_0x4a == 112) {
                cXyz sp114(trans->mCenter);
                cXyz sp120 = relationalPos(trans->mRelActor, &sp114);
                f32 fVar1 = cXyz(sp120 - positionOf(mpPlayerActor)).abs();
                sp114.x = -sp114.x;
                sp120 = relationalPos(trans->mRelActor, &sp114);
                f32 fVar2 = cXyz(sp120 - positionOf(mpPlayerActor)).abs();
                if (fVar1 < fVar2) {
                    trans->mCenter.x = -trans->mCenter.x;
                }
            } else if (trans->field_0x4a == 102) {
                cSGlobe cStack_7e8(trans->mCenter);
                cStack_7e8.U(cStack_7e8.U() + directionOf(trans->mRelActor));
                trans->mCenter = attentionPos(trans->mRelActor) + cStack_7e8.Xyz();
                trans->field_0x4a = 120;
            }

            if (trans->field_0x4b == 112) {
                cXyz sp12c = trans->mEye;
                cXyz sp138(relationalPos(trans->mRelActor, &sp12c));
                f32 fVar3 = cXyz(sp138 - positionOf(mpPlayerActor)).abs();
                sp12c.x = -sp12c.x;
                sp138 = relationalPos(trans->mRelActor, &sp12c);
                f32 fVar4 = cXyz(sp138 - positionOf(mpPlayerActor)).abs();
                if (fVar3 < fVar4) {
                    trans->mEye.x = -trans->mEye.x;
                }
            } else if (trans->field_0x4b == 114) {
                spf0 = relationalPos(trans->mRelActor, &trans->mCenter);
                if ((field_0xac & 1) != 0) {
                    trans->mEye.x = -trans->mEye.x;
                }

                spfc = relationalPos(trans->mRelActor, &trans->mEye);
                if (lineBGCheck(&spf0, &spfc, 0x4007)) {
                    trans->mEye.x = -trans->mEye.x;
                }
            } else if (trans->field_0x4b == 102) {
                cSGlobe cStack_7f0(trans->mEye);
                cStack_7f0.U(cStack_7f0.U() + directionOf(trans->mRelActor));
                trans->mEye = attentionPos(trans->mRelActor) + cStack_7f0.Xyz();
                trans->field_0x4b = 120;
            }
        } else {
            if (trans->field_0x4a == 97) {
                cXyz cStack_320 = dCamMath::xyzRotateY(trans->mCenter, cSAngle(field_0x5c.mDirection.U().Inv()));
                trans->mCenter = field_0x5c.mCenter + cStack_320;
            }

            if (trans->field_0x4b == 97) {
                cXyz cStack_32c = dCamMath::xyzRotateY(trans->mEye, cSAngle(field_0x5c.mDirection.U().Inv()));
                trans->mEye = field_0x5c.mEye + cStack_32c;
            }
        }

        trans->field_0x60 = mDirection.Invert();
        field_0x158.field_0x0 = true;
    }

    if (trans->mRelActor && fopAcM_SearchByID(trans->mRelActorID) == NULL) {
        OS_REPORT("camera: event: error: relational base actor dead\n");
        return 1;

    } else {
        f32 fVar15;
        if (mCurCamStyleTimer >= trans->mTimer) {
            rv = 1;
            fVar15 = 1.0f;
        } else if (trans->mBSpCurve == -1) {
            mEventData.field_0xf0.Step();
            mEventData.field_0xf0.Calc(trans->mBSpPoints);
        } else if (trans->mBSpCurve != 0) {
            mEventData.field_0xf0.Step();
            mEventData.field_0xf0.Calc(&lit_5985[trans->mBSpCurve]);
        } else {
            fVar15 = (mCurCamStyleTimer + 1) / trans->mTimer;
        }

        char cVar1;
        if (trans->mRelActor) {
            if (trans->mRelUseMask == 116) {
                sp4c = attentionPos(trans->mRelActor) + trans->mStartCenter;
                cVar1 = -1;
            } else if (trans->mRelUseMask == 99) {
                cSGlobe cStack_7f8(trans->mStartCenter);
                cStack_7f8.U(trans->field_0x60.U() + cStack_7f8.U());
                sp4c = attentionPos(trans->mRelActor) + cStack_7f8.Xyz();
                cVar1 = -1;
            } else if (trans->mRelUseMask == 119 || trans->mRelUseMask == 87) {
                sp4c = relationalPos(trans->mRelActor, &trans->mStartCenter);
                cVar1 = -1;
            } else {
                if (isRelChar(trans->mRelUseMask)) {
                    sp4c = relationalPos(trans->mRelActor, &trans->mStartCenter);
                    cVar1 = -1;
                } else {
                    sp4c = trans->mStartCenter;
                }
            }

            if (trans->field_0x49 == 116) {
                pos.sp58 = attentionPos(trans->mRelActor) + trans->mStartEye;
                cVar1 = -1;
            } else if (trans->field_0x49 == 99) {
                cSGlobe cStack_800(trans->mStartEye);
                cStack_800.U(cStack_800.U() + trans->field_0x60.U());
                pos.sp58 = attentionPos(trans->mRelActor) + cStack_800.Xyz();
                cVar1 = -1;
            } else if (trans->field_0x49 == 119 || trans->field_0x49 == 87) {
                pos.sp58 = relationalPos(trans->mRelActor, &trans->mStartEye);
                cVar1 = -1;
            } else {
                if (isRelChar(trans->field_0x49)) {
                    pos.sp58 = relationalPos(trans->mRelActor, &trans->mStartEye);
                    cVar1 = -1;
                } else {
                    pos.sp58 = trans->mStartEye;
                }
            }

            if (trans->field_0x4a == 116) {
                sp64 = attentionPos(trans->mRelActor) + trans->mCenter;
            } else if (trans->field_0x4a == 99) {
                cSGlobe cStack_808(trans->mCenter);
                cStack_808.U(cStack_808.U() + trans->field_0x60.U());
                sp64 = attentionPos(trans->mRelActor) + cStack_808.Xyz();
            } else if (trans->field_0x4a == 119 || trans->field_0x4a == 87) {
                sp64 = relationalPos(trans->mRelActor, &trans->mCenter);
            } else if (isRelChar(trans->field_0x4a)) {
                sp64 = relationalPos(trans->mRelActor, &trans->mCenter);
            } else if (trans->mTransType == 2) {
                sp64 = dCamMath::xyzRotateY(trans->mCenter, directionOf(trans->mRelActor));
            } else {
                sp64 = trans->mCenter;
            }

            if (trans->field_0x4b == 116) {
                pos2.sp70 = attentionPos(trans->mRelActor) + trans->mEye;
            } else if (trans->field_0x4b == 99) {
                cSGlobe cStack_810(trans->mEye);
                cStack_810.U(cStack_810.U() + trans->field_0x60.U());
                pos2.sp70 = attentionPos(trans->mRelActor) + cStack_810.Xyz();
            } else {
                cVar1 = trans->field_0x4b;
                if (cVar1 == 119 || trans->field_0x4b == 87) {
                    pos2.sp70 = relationalPos(trans->mRelActor, &trans->mEye);
                } else if (isRelChar(trans->field_0x4b)) {
                    pos2.sp70 = relationalPos(trans->mRelActor, &trans->mEye);
                } else if (trans->mTransType == 2) {
                    pos2.sp70 = dCamMath::xyzRotateY(trans->mEye, directionOf(trans->mRelActor));
                } else {
                    pos2.sp70 = trans->mEye;
                }
            }
        } else {
            sp4c = trans->mStartCenter;
            pos.sp58 = trans->mStartEye;
            sp64 = trans->mCenter;
            pos2.sp70 = trans->mEye;
        }

        cXyz sp15c;
        cXyz sp168;
        if (trans->mTransType == 1) {
            sp15c = sp4c + ((sp64 - sp4c) * fVar15);
            field_0x5c.mCenter += (sp15c - field_0x5c.mCenter) * trans->mCushion;

            cSGlobe cStack_818(pos.sp58 - sp4c);
            cSGlobe cStack_820(pos2.sp70 - sp64);

            cSGlobe cStack_828(cStack_818.R() + (fVar15 * (cStack_820.R() - cStack_818.R())), 
                               cStack_818.V() + ((cStack_820.V() - cStack_818.V()) * fVar15), 
                               cStack_818.U() + ((cStack_820.U() - cStack_818.U()) * fVar15));

            sp168 = field_0x5c.mCenter + cStack_828.Xyz();

            field_0x5c.mEye += (sp168 - field_0x5c.mEye) * trans->mCushion;

        } else if (trans->mTransType == 3) {
            sp15c = sp4c + ((sp64 - sp4c) * fVar15);
            field_0x5c.mCenter += (sp15c - field_0x5c.mCenter) * trans->mCushion;

            cSGlobe cStack_830(pos.sp58 - sp4c);
            cSGlobe cStack_838(pos2.sp70 - sp64);

            cSAngle acStack_8a8(cStack_838.U() - cStack_830.U());
            if (acStack_8a8 == cSAngle::_0) {
                acStack_8a8.Val(fVar15 * 360.0f);
            } else {
                if (acStack_8a8 > cSAngle::_0) {
                    acStack_8a8 *= fVar15;
                } else {
                    acStack_8a8.Val(fVar15 * (acStack_8a8.Degree() + 360.0f));
                }
            }

            cSAngle acStack_91c((cStack_838.V() - cStack_830.V()) * fVar15);
            cSGlobe cStack_840(cStack_830.R() + ((cStack_838.R() - cStack_830.R()) * fVar15),
                              (cStack_830.V() + acStack_91c), 
                              (cStack_830.U() + acStack_91c));

            sp168 = field_0x5c.mCenter + cStack_840.Xyz();

            field_0x5c.mEye += (sp168 - field_0x5c.mEye) * trans->mCushion;

        } else if (trans->mTransType == 4) {
            sp15c = sp4c + ((sp64 - sp4c) * fVar15);
            field_0x5c.mCenter += (sp15c - field_0x5c.mCenter) * trans->mCushion;

            cSGlobe cStack_848(pos.sp58 - sp4c);
            cSGlobe cStack_850(pos2.sp70 - sp64);

            cSAngle acStack_8ac(cStack_850.U() - cStack_848.U());
            if (acStack_8ac == cSAngle::_0) {
                acStack_8ac.Val(fVar15 * -360.0f);
            } else if (acStack_8ac < cSAngle::_0) {
                acStack_8ac *= fVar15;
            } else {
                acStack_8ac.Val(fVar15 * (acStack_8ac.Degree() + -360.0f));
            }

            cSAngle acStack_92c = fVar15 * (cStack_850.V() - cStack_848.V());

            cSGlobe cStack_858(cStack_848.R() + (fVar15 * (cStack_850.R() - cStack_848.R())), 
                               cStack_848.V() + acStack_92c, 
                               cStack_848.U() + acStack_92c);

            sp168 = field_0x5c.mCenter + cStack_858.Xyz();

            field_0x5c.mEye += (sp168 - field_0x5c.mEye) * trans->mCushion;

        } else if (trans->mTransType == 2) {
            sp15c = sp4c + (sp64 * fVar15);
            field_0x5c.mCenter += (sp15c - field_0x5c.mCenter) * trans->mCushion;
            sp168 = pos.sp58 + (pos2.sp70 * fVar15);
            field_0x5c.mEye += (sp168 - field_0x5c.mEye) * trans->mCushion;
            
        } else {
            sp15c = sp4c + ((sp64 - sp4c) * fVar15);
            field_0x5c.mCenter += (sp15c - field_0x5c.mCenter) * trans->mCushion;
            sp168 = pos.sp58 + ((pos2.sp70 - pos.sp58) * fVar15);
            field_0x5c.mEye += (sp168 - field_0x5c.mEye) * trans->mCushion;
        }

        f32 fVar16 = trans->mStartFovy + (fVar15 * (trans->mFovy - trans->mStartFovy));
        field_0x5c.mFovy += trans->mCushion * (fVar16 - field_0x5c.mFovy);

        if (trans->field_0x68) {
            field_0x5c.mBank += (cSAngle(trans->field_0x1c + (trans->field_0x3c - trans->field_0x1c)) - field_0x5c.mBank) * trans->mCushion;
            setFlag(0x400);
        }

        field_0x5c.mDirection.Val(field_0x5c.mEye - field_0x5c.mCenter);
    }

    return rv;
}

/* 8008E938-8008FA58 089278 1120+00 0/0 1/0 0/0 .text            watchActorEvCamera__9dCamera_cFv */
bool dCamera_c::watchActorEvCamera() {
    // NONMATCHING
    f32 fVar6;
    bool bVar15;
    static cXyz DefaultGap(cXyz::Zero);

    struct mWork::actor* actor = &mWork.actor;
    if (mCurCamStyleTimer == 0) {
        getEvXyzData(&actor->mCtrGap, "CtrGap", DefaultGap);
        getEvFloatData(&actor->mCushion, "Cushion", 1.0f);
        getEvFloatData(&actor->mNearDist, "NearDist", 750.0f);
        getEvFloatData(&actor->mZoomDist, "ZoomDist", 400.0f);
        getEvFloatData(&actor->mZoomVAngle, "ZoomVAngle", 0.0f);
        getEvFloatData(&actor->mFarDist, "FarDist", 1500.0f);
        getEvFloatData(&actor->mFovy, "Fovy", 62.0f);
        getEvIntData(&actor->mNearTimer, "NearTimer", 20);
        getEvIntData(&actor->mFarTimer, "FarTimer", 30);
        getEvFloatData(&actor->mFrontAngle, "FrontAngle", 179.0f);
        getEvIntData(&actor->mBlure, "Blure", 0);

        actor->mTargetActor = getEvActor("Target", "@STARTER");
        if (actor->mTargetActor == NULL) {
            OS_REPORT("camera: event: error: target actor missing\n");
            return 1;
        }

        actor->mTargetActorID = fopAcM_GetID(actor->mTargetActor);
        actor->field_0xc = relationalPos(actor->mTargetActor, &actor->mCtrGap);
        actor->field_0x3c.Val(mEye - actor->field_0xc);
        if (actor->field_0x3c.R() < actor->mNearDist) {
            if (pointInSight(&actor->field_0xc)) {
                actor->field_0x54 = 0;
            } else {
                actor->field_0x54 = 1;
            }
        } else if (actor->field_0x3c.R() < actor->mFarDist) {
            actor->field_0x54 = 2;
        } else {
            actor->field_0x54 = 3;
        }

        field_0x158.field_0x0 = true;
    }

    if (fopAcM_SearchByID(actor->mTargetActorID) == NULL) {
        OS_REPORT("camera: event: error: target actor dead\n");
        return 1;
    }

    bool bVar5 = false;
    bool bVar1 = true;
    if (fopAcM_GetProfName(actor->mTargetActor) == 232 || fopAcM_GetProfName(actor->mTargetActor) == 550) {
        bVar5 = true;
    }

    switch (actor->field_0x54) {
        case 0:
            field_0x5c.mEye = mEye;
            field_0x5c.mDirection = mDirection;
            break;

        case 1:
            if (mCurCamStyleTimer == 0) {
                cXyz cStack_dc = attentionPos(mpPlayerActor);
                cStack_dc.y += 10.0f;
                cSGlobe cStack_288(cStack_dc - actor->field_0xc);
                cSGlobe cStack_290(field_0x5c.mEye - positionOf(actor->mTargetActor));

                cSAngle acStack_2e8 = cStack_290.U() - directionOf(actor->mTargetActor);

                if (acStack_2e8 < cSAngle::_0) {
                    cStack_288.U(cStack_288.U() + cSAngle(5.0f));
                } else {
                    cStack_288.U(cStack_288.U() + cSAngle(-5.0f));
                }

                cSAngle acStack_2ec = cStack_288.U() - directionOf(actor->mTargetActor);
                if (acStack_2ec < cSAngle(-actor->mFrontAngle)) {
                    cStack_288.U(directionOf(actor->mTargetActor) + cSAngle(-actor->mFrontAngle));
                } else if (acStack_2ec > cSAngle(actor->mFrontAngle)) {
                    cStack_288.U(directionOf(actor->mTargetActor) + cSAngle(actor->mFrontAngle));
                }

                actor->field_0x4c.Val(cStack_288.R() + 120.0f, cStack_288.V(), cStack_288.U());

                cSAngle acStack_2f4;
                if (acStack_2ec >= cSAngle::_0) {
                    acStack_2f4.Val(8.0f);
                } else {
                    acStack_2f4.Val(-8.0f);
                }

                cXyz cStack_e8;
                int i;
                cSGlobe cStack_298 = actor->field_0x4c;
                for (i = 0; i < 45; i++) {
                    cStack_e8 = actor->field_0xc + cStack_298.Xyz();

                    if (bVar1) {
                        if (!lineBGCheck(&actor->field_0xc, &cStack_e8, 0x4007)) {
                            if (!lineCollisionCheck(actor->field_0xc, cStack_e8, mpPlayerActor, actor->mTargetActor, NULL)) {
                                actor->field_0x4c = cStack_298;
                                break;
                            }
                        }
                    }

                    cStack_298.U(cStack_298.U() + acStack_2f4);

                    if (bVar5) {
                        cSAngle acStack_2f8 = cStack_298.U() - directionOf(actor->mTargetActor);
                        if (fabsf(acStack_2f8.Degree()) < 70.0f) {
                            bVar1 = true;
                        } else {
                            bVar1 = false;
                        }
                    }

                    if ((i & 2) != 0) {
                        fVar6 = -5.0f;
                    } else {
                        fVar6 = 5.0f;
                    }

                    cStack_298.V((cStack_298.V() + cSAngle(fVar6)) - (cStack_298.V() * 0.1f));
                }

                OS_REPORT("camera: event: search %d time(s)\n", i);
            }

            if (mCurCamStyleTimer < actor->mFarTimer) {
                fVar6 = mCurCamStyleTimer / actor->mNearTimer;
                field_0x5c.mCenter += (actor->field_0xc - field_0x5c.mCenter) * fVar6;
                
                field_0x5c.mDirection.R(field_0x5c.mDirection.R() + (fVar6 * (actor->field_0x4c.R() - field_0x5c.mDirection.R())));

                field_0x5c.mDirection.U(field_0x5c.mDirection.U() + ((actor->field_0x4c.U() - field_0x5c.mDirection.U()) * fVar6));

                field_0x5c.mDirection.V(field_0x5c.mDirection.V() + ((actor->field_0x4c.V() - field_0x5c.mDirection.V()) * fVar6));

                field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();

                field_0x5c.mFovy += fVar6 * (actor->mFovy - mFovy);

                return 0;
            }
            break;

        case 2:
            if (mCurCamStyleTimer == 0) {
                cSGlobe cStack_2a0(attentionPos(mpPlayerActor) - actor->field_0xc);
                if (actor->mZoomVAngle != 0.0f) {
                    cStack_2a0.V(actor->mZoomVAngle);
                }

                cSAngle acStack_2fc(cStack_2a0.U() - directionOf(actor->mTargetActor));

                if (acStack_2fc < cSAngle(-actor->mFrontAngle)) {
                    cStack_2a0.U(directionOf(actor->mTargetActor) + cSAngle(-actor->mFrontAngle));
                } else if (acStack_2fc > (cSAngle)(actor->mFrontAngle)) {
                    cStack_2a0.U(directionOf(actor->mTargetActor) + cSAngle(actor->mFrontAngle));
                }

                if (fabsf(cStack_2a0.R() - actor->mZoomDist) < 30.0f) {
                    cStack_2a0.U(cStack_2a0.U() + (s16)900);
                }

                actor->field_0x4c.Val(actor->mZoomDist, cStack_2a0.V(), cStack_2a0.U());

                cSAngle acStack_304;
                if (acStack_2fc >= cSAngle::_0) {
                    acStack_304.Val(8.0f);
                } else {
                    acStack_304.Val(-8.0f);
                }

                cXyz cStack_f4;
                cSGlobe cStack_2a8(actor->field_0x4c);
                int i;
                for (i = 0; i < 45; i++) {
                    cStack_f4 = actor->field_0xc + cStack_2a8.Xyz();

                    if (bVar1 && !lineBGCheck(&actor->field_0xc, &cStack_f4, 0x4007)) {
                        if (!lineCollisionCheck(actor->field_0xc, cStack_f4, mpPlayerActor, actor->mTargetActor, NULL)) {
                            actor->field_0x4c = cStack_2a8;
                            break;
                        }
                    }

                    cStack_2a8.U(cStack_2a8.U() + acStack_304);
                    if (bVar5) {
                        cSAngle acStack_3b4 = cStack_2a8.U() - directionOf(actor->mTargetActor);
                        if (fabsf(acStack_3b4.Degree()) < 70.0f) {
                            bVar1 = true;
                        } else {
                            bVar1 = false;
                        }
                    }

                    if ((i & 2) != 0) {
                        fVar6 = -5.0f;
                    } else {
                        fVar6 = 5.0f;
                    }

                    cStack_2a8.V((cStack_2a8.V() + cSAngle(fVar6)) - (cStack_2a8.V() * 0.1f));
                }

                OS_REPORT("camera: event: search %d time(s)\n", i);
            }

            if (mCurCamStyleTimer < actor->mFarTimer) {
                fVar6 = mCurCamStyleTimer / actor->mFarTimer;
                field_0x5c.mCenter += (actor->field_0xc - field_0x5c.mCenter) * fVar6;

                field_0x5c.mDirection.R(field_0x5c.mDirection.R() + 
                                        (fVar6 * (actor->field_0x4c.R() - field_0x5c.mDirection.R())));

                field_0x5c.mDirection.U(field_0x5c.mDirection.U() + 
                                        ((actor->field_0x4c.U() - field_0x5c.mDirection.U()) * fVar6));

                field_0x5c.mDirection.V(((actor->field_0x4c.V() - field_0x5c.mDirection.V()) * fVar6) + 
                                        field_0x5c.mDirection.V());

                field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();

                field_0x5c.mFovy += fVar6 * (actor->mFovy - mFovy);

                return 0;
            }
            break;

        case 3:
            if (mCurCamStyleTimer == 0) {
                field_0x5c.mCenter = actor->field_0xc;

                cSGlobe cStack_2b0(attentionPos(mpPlayerActor) - actor->field_0xc);
                cStack_2b0.R(actor->mZoomDist);

                cSAngle acStack_30c = cStack_2b0.U() - directionOf(actor->mTargetActor);
                if (acStack_30c < cSAngle(-actor->mFrontAngle)) {
                    cStack_2b0.U(directionOf(actor->mTargetActor) + cSAngle(-actor->mFrontAngle));
                } else if (acStack_30c > cSAngle(actor->mFrontAngle)) {
                    cStack_2b0.U(directionOf(actor->mTargetActor) + cSAngle(actor->mFrontAngle));
                }

                if (actor->mZoomVAngle != 0.0f) {
                    cStack_2b0.V(actor->mZoomVAngle);
                }

                actor->field_0x4c.Val(actor->mZoomDist, cStack_2b0.V(), cStack_2b0.U());

                cSAngle acStack_314;
                if (acStack_30c >= cSAngle::_0) {
                    acStack_314.Val(8.0f);
                } else {
                    acStack_314.Val(-8.0f);
                }

                cXyz cStack_100;
                cSGlobe cStack_2b8 = actor->field_0x4c;
                for (int i = 0; i < 45; i++) {
                    cStack_100 = actor->field_0xc + cStack_2b8.Xyz();

                    if (bVar1) {
                        if (!lineBGCheck(&actor->field_0xc, &cStack_100, 0x4007)) {
                            if (!lineCollisionCheck(actor->field_0xc, cStack_100, mpPlayerActor, actor->mTargetActor, NULL)) {
                                actor->field_0x4c = cStack_2b8;
                                break;
                            }
                        }
                    }

                    cStack_2b8.U(cStack_2b8.U() + acStack_314);

                    if (bVar5) {
                        cSAngle acStack_318 = cStack_2b8.U() - directionOf(actor->mTargetActor);
                        if (fabsf(acStack_318.Degree()) < 70.0f) {
                            bVar1 = true;
                        } else {
                            bVar1 = false;
                        }
                    }

                    if ((i & 2) != 0) {
                        fVar6 = -5.0f;
                    } else {
                        fVar6 = 5.0f;
                    }

                    cStack_2b8.V((cStack_2b8.V() + cSAngle(fVar6)) - (cStack_2b8.V() * 0.1f));
                }
            }

            field_0x5c.mDirection = actor->field_0x4c;
            field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();
            field_0x5c.mFovy = actor->mFovy;
    }

    field_0x158.field_0x0 = true;

    return 1;
}

/* 8008FAE8-80090174 08A428 068C+00 0/0 1/0 0/0 .text            restorePosEvCamera__9dCamera_cFv */
bool dCamera_c::restorePosEvCamera() {
    // NONMATCHING
    static cXyz DefaultGap_7363;
    struct mWork::restorePos* restorePos = &mWork.restorePos;

    if (struct_80450F88[1] == 0) {
        cXyz DefaultGap_7363(cXyz::Zero);
        struct_80450F88[1] = 1;
    }

    if (mCurCamStyleTimer == 0) {
        cXyz cStack_50(DefaultGap_7363);

        getEvXyzData(&restorePos->field_0x0, "CtrGap", cStack_50);
        getEvFloatData(&restorePos->field_0x18, "Cushion", 1.0f);
        getEvFloatData(&restorePos->field_0x20, "NearDist", 750.0f);
        getEvFloatData(&restorePos->field_0x28, "FarDist", 1500.0f);
        getEvIntData(&restorePos->field_0x1c, "NearTimer", 20);
        getEvIntData(&restorePos->field_0x24, "FarTimer", 30);
        getEvIntData(&restorePos->field_0x44, "Dest", 2);
        getEvIntData(&restorePos->field_0x68, "TargetType", 0);

        switch (restorePos->field_0x44) {
            case 0:
                restorePos->field_0x48 = field_0xd0[0];
                break;

            case 1:
                restorePos->field_0x48 = field_0xd0[1];
                break;
            
            case 9:
                s16 sVar1 = restorePos->field_0x100.Val();
                dComIfGp_loadCameraPosition(0, &mUp, &restorePos->field_0x48.mEye, 
                    &restorePos->field_0x48.mFovy, &sVar1);
                break;
            
            default:
                restorePos->field_0x48 = field_0xb0;
        }

        fopAc_ac_c* mActor = getEvActor("Target", "@PLAYER");
        restorePos->field_0x34 = mActor;
        if (mActor == NULL) {
            OS_REPORT("camera: event: error: target actor missing\n");
            return 1;
        }

        restorePos->field_0xc = relationalPos(restorePos->field_0x34, &restorePos->field_0x0);

        cSGlobe cStack_e8(restorePos->field_0x48.mEye - field_0x5c.mCenter);
        if (cStack_e8.R() < restorePos->field_0x20) {
            if (pointInSight(&restorePos->field_0xc)) {
                restorePos->field_0x40 = 0;
            } else {
                restorePos->field_0x40 = 1;
            }
        } else if (cStack_e8.R() < restorePos->field_0x28) {
            if (lineBGCheck(&mEye, &restorePos->field_0xc, 0x4007)) {
                restorePos->field_0x40 = 3;
            } else {
                restorePos->field_0x40 = 2;
            }
        } else {
            restorePos->field_0x40 = 3;
        }

        field_0x158.field_0x0 = true;
    }

    switch (restorePos->field_0x40) {
        case 0:
        case 1:
        case 2:
            if (mCurCamStyleTimer == 0) {
                restorePos->field_0x38.Val(restorePos->field_0x48.mEye - restorePos->field_0x48.mCenter);
            }

            if (mCurCamStyleTimer < restorePos->field_0x24) {
                f32 fVar1 = mCurCamStyleTimer / restorePos->field_0x24;
                if (restorePos->field_0x68 == 1) {
                    field_0x5c.mCenter += (restorePos->field_0x48.mCenter - field_0x5c.mCenter) * fVar1;
                } else {
                    field_0x5c.mCenter += (restorePos->field_0xc - field_0x5c.mCenter) * fVar1;
                }

                field_0x5c.mDirection.R(field_0x5c.mDirection.R() + (fVar1 * (restorePos->field_0x38.R() - field_0x5c.mDirection.R())));
                field_0x5c.mDirection.U(field_0x5c.mDirection.U() + ((restorePos->field_0x38.U() - field_0x5c.mDirection.U()) * fVar1));
                field_0x5c.mDirection.V((field_0x5c.mDirection.V() + ((restorePos->field_0x38.V() - field_0x5c.mDirection.V()) * fVar1)));

                field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();
                
                field_0x5c.mFovy += fVar1 * (restorePos->field_0x48.mFovy - field_0x5c.mFovy);
                return 0;
            }
            break;

        case 3:
            if (mCurCamStyleTimer == 0) {
                if (restorePos->field_0x68 == 1) {
                    field_0x5c.mCenter = restorePos->field_0x48.mCenter;
                } else {
                    field_0x5c.mCenter = restorePos->field_0xc;
                }

                field_0x5c.mDirection.Val(restorePos->field_0x48.mEye - restorePos->field_0x48.mCenter);
                field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();
                field_0x5c.mFovy = restorePos->field_0x48.mFovy;
            }
    }

    field_0x158.field_0x0 = true;
    return 1;
}

/* 80090174-80090230 08AAB4 00BC+00 0/0 1/0 0/0 .text            talktoEvCamera__9dCamera_cFv */
bool dCamera_c::talktoEvCamera() {
    fopAc_ac_c* r27 = (fopAc_ac_c*)dComIfGp_event_getPt1();
    s32 style = mCamTypeData[mEventData.field_0xc].field_0x18[mIsWolf][3];

    if (mCurCamStyleTimer == 0) {
        clrFlag(0x200000);
    }

    if (style < 0) {
        style = mCamParam.SearchStyle('TT01');
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        u32 id = mCamParam.Id(style);
        OS_REPORT("camera: event: %16s  = %d (%c%c%c%c)\n", "style", style, (id >> 0x18) & 0xFF, (id >> 0x10) & 0xFF, (id >> 0x8) & 0xFF, (id) & 0xFF);
    }
#endif

    return (this->*engine_tbl[mCamParam.Algorythmn(style)])(style);
}

/* 80090230-80090478 08AB70 0248+00 0/0 1/0 0/0 .text            maptoolIdEvCamera__9dCamera_cFv */
bool dCamera_c::maptoolIdEvCamera() {
    if (mCurCamStyleTimer == 0) {
        int id;
        getEvIntData(&id, "ID", g_dComIfG_gameInfo.play.getEvent().getMapToolId());

        mEventData.field_0x8 = 0;
        field_0x160 = 0;
        mCurCamStyleTimer = 0;
        mEventData.field_0xec = dEvt_control_c::searchMapEventData(id);
#ifdef DEBUG
        OSReport("%06d: %s: %d: map data ID %d  %x\n", field_0xa8, __FILE__, 2792, id,
                 mEventData.field_0xec);
#endif

        int var_r6 = 0xFF;
        if (mEventData.field_0xec != NULL && mEventData.field_0xec->mType == 0) {
            var_r6 = mEventData.field_0xec->field_0x16;
        }

        getEvIntData(&mEventData.field_0x24, "CameraID", var_r6);
    }

    int temp_r31 = mEventData.field_0x24;
    if (mEventData.field_0xec == NULL || temp_r31 == 0xFF) {
#ifdef DEBUG
        OSReport("%d: %s: %d: ERROR!! no map data!!!\n", field_0xa8, __FILE__, 2805);
#endif
        return true;
    }

    int room_no = dComIfGp_roomControl_getStayNo();
    if (isStageEvent(mEventData.field_0xec->field_0x4)) {
        room_no = -1;
    }

    if (mEventData.field_0xec->mType == 0 && mEventData.field_0xec->field_0xC != 0xFF) {
        if (mEventData.field_0xec->field_0xC & 1) {
            clrFlag(0x200000);
        }

        if (mEventData.field_0xec->field_0xC & 2) {
            field_0x88 = 0;
        }
    }

    mEventData.field_0xc = GetCameraTypeFromMapToolID(temp_r31, room_no);
    bool var_r31 = false;

    if (mEventData.field_0xc != 0xFF) {
        s32 style = mCamTypeData[mEventData.field_0xc].field_0x18[mIsWolf][0];
#ifdef DEBUG
        if (mCurCamStyleTimer == 0) {
            OSReport("type %d mode %d style %d\n", mEventData.field_0xc, 0, style);
        }
#endif
        bool var_r3 = (this->*engine_tbl[mCamParam.Algorythmn(style)])(style);

        if (mEventData.field_0xec->mType == 0) {
            if (mEventData.field_0xec->field_0x14 == 0xFF ||
                mCurCamStyleTimer > mEventData.field_0xec->field_0x14)
            {
                var_r31 = true;
            }
        } else {
            return var_r3;
        }
    } else {
        mEventData.field_0xec = NULL;
        var_r31 = true;
    }

    if (var_r31) {
        if (mEventData.field_0xec->mType == 0 && (mEventData.field_0xec->field_0xC & 0x20)) {
            return mDoCPd_c::getHoldA(mPadID) || mDoCPd_c::getHoldB(mPadID);
        }
        return true;
    }

    return false;
}

/* 80090478-80090514 08ADB8 009C+00 0/0 1/0 0/0 .text            styleEvCamera__9dCamera_cFv */
bool dCamera_c::styleEvCamera() {
    if (mCurCamStyleTimer == 0) {
        mEventData.field_0x8 = 0;
        field_0x160 = 0;
    }

    s32 style = mCamParam.SearchStyle(*(u32*)getEvStringPntData("Name", "FN01"));
    (this->*engine_tbl[mCamParam.Algorythmn(style)])(style);
    return isModeOK();
}

/* 80090514-80091468 08AE54 0F54+00 0/0 1/0 0/0 .text            gameOverEvCamera__9dCamera_cFv */
bool dCamera_c::gameOverEvCamera() {
    // NONMATCHING
    f32 fVar1;
    bool bVar3;
    bool bVar9;
    int local_404;

    daPy_py_c* mPlayer = (daPy_py_c*)mpPlayerActor;
    daMidna_c* mMidna = daPy_py_c::getMidnaActor();

    if (mCurCamStyleTimer == 0) {
        s8 local_458 = 0;
        if (mPlayer->checkMidnaRide() && !mMidna->checkNoDraw()) {
            local_458 = 1;
        }
        mWork.gameOver.field_0x3c = local_458;
    }

    cXyz sp1e8(0.0f, -45.0f, 0.0f);
    cXyz spa8[4] = {
        cXyz(85.0f, -50.0f, 165.0f), cXyz(72.0f, -64.0f, 60.0f),
        cXyz(165.0f, -20.0f, 45.0f), cXyz(85.0f, 165.0f, 40.0f),
    };
    cXyz sp290(cXyz(10.0f, -70.0f, 110.0f));
    cXyz sp6c(cXyz(0.0f, 0.0f, 0.0f));

    if (mWork.gameOver.field_0x3c != 0) {
        sp1e8.y = -10.0f;
    }

    cXyz sp1f4(0.0f, -120.0f, 130.0f);
    cXyz spd8(cXyz(0.0f, 35.0f, 160.0f));
    cXyz spcc(cXyz(105.0f, -65.0f, 200.0f));
    cXyz spc0(cXyz(60.0f, 10.0f, 100.0f));
    cXyz spb4(cXyz(0.0f, 0.0f, 0.0f));
    cXyz sp200(0.0f, -60.0f, -45.0f);
    cXyz sp108(cXyz(0.0f, 85.0f, 5.0f));
    cXyz spf8(cXyz(-80.0f, 25.0f, 12.0f));
    cXyz spf0(cXyz(120.0f, 10.0f, -50.0f));
    cXyz spe4(cXyz(0.0f, 0.0f, 0.0f));
    cXyz sp20c(0.0f, -5.0f, -60.0f);
    cXyz sp138(cXyz(-140.0f, -10.0f, 100.0f));
    cXyz sp12c(cXyz(-20.0f, 190.0f, -150.0f));
    cXyz sp120(cXyz(20.0f, -75.0f, 115.0f));
    cXyz sp114(cXyz(0.0f, 0.0f, 0.0f));

    cXyz* pos;
    if (mIsWolf != 1) {
        pos = &sp1f4;
    } else if (mWork.gameOver.field_0x3c != 0) {
        pos = &sp200;
    } else {
        pos = &sp20c;
    }
    cXyz sp218(*pos);

    if (mIsWolf == 1) {
        pos = &spd8;
    } else if (mWork.gameOver.field_0x3c == 0) {
        pos = &sp108;
    } else {
        pos = &sp138;
    }
    // cXyz* pc408;
    // pc408 = pos;

    cXyz sp224;
    cXyz sp230;
    cXyz sp23c;
    cXyz sp248;
    cXyz sp254(0.0f, -40.0f, 0.0f);
    cXyz sp168(cXyz(0.0f, 135.0f, 140.0f));
    cXyz sp15c(cXyz(-100.0f, 112.0f, 150.0f));
    cXyz sp150(cXyz(65.0f, 100.0f, 70.0f));
    cXyz sp144(cXyz(0.0f, 0.0f, 0.0f));
    cXyz sp260(0.0f, -45.0f, -50.0f);
    cXyz sp198(cXyz(0.0f, 150.0f, 115.0f));
    cXyz sp18c(cXyz(-120.0f, 180.0f, -40.0f));
    cXyz sp180(cXyz(40.0f, 100.0f, 5.0f));
    cXyz sp174(cXyz(0.0f, 0.0f, 0.0f));
    cXyz sp26c(0.0f, 15.0f, -100.0f);
    cXyz sp1c8(cXyz(40.0f, 65.0f, 165.0f));
    cXyz sp1bc(cXyz(-200.0f, 140.0f, 50.0f));
    cXyz sp1b0(cXyz(50.0f, 230.0f, 0.0f));
    cXyz sp1a4(cXyz(0.0f, 0.0f, 0.0f));

    cXyz* pos2;
    if (mIsWolf != 1) {
        pos2 = &sp254;
    } else if (mWork.gameOver.field_0x3c != 0) {
        pos2 = &sp260;
    } 
    // else {
    //     pos2 = &sp26c;
    // }
    cXyz sp278(*pos2);

    if (mIsWolf != 1) {
        pos2 = &sp168;
    } else if (mWork.gameOver.field_0x3c != 0) {
        pos2 = &sp1c8;
    } 
    // else {
    //     pos2 = &sp198;
    // }
    // cXyz* pc414 = pos2;

    bVar3 = false;
    if (dComIfGp_checkPlayerStatus0(mPadID, 0x100000) || mPlayer->checkMagneBootsOn()) {
        if (mBG.field_0x0.field_0x58 >= attentionPos(mpPlayerActor).y + 40.0f) {
            bVar3 = true;
        }
    }

    if (mCurCamStyleTimer == 0) {
        mWork.gameOver.field_0x0 = 0;
        mWork.gameOver.field_0x4 = 0;
        if ((field_0xa8 & 2) != 0) {
            mWork.gameOver.field_0x8 = 0;
        } else {
            mWork.gameOver.field_0x8 = 1;
        }

        if (dComIfGp_checkPlayerStatus0(mPadID, 0x100000)) {
            mWork.gameOver.field_0x0 = 50;
        }

        field_0x158.field_0x0 = true;
        cXyz sp284 = field_0x5c.mEye - attentionPos(mpPlayerActor);
        cSAngle acStack_440(mpPlayerActor->shape_angle.y);
        sp284 = dCamMath::xyzRotateY(sp284, acStack_440);
        *(pos2 + 3) = sp284;
        // *(pos + 3) = *(pos2 + 3);
        spa8[local_404] = sp284;
    }

    cXyz sp291(attentionPos(mpPlayerActor));
    bVar9 = false;

    switch (mWork.gameOver.field_0x0) {
        case 51:
            getEvIntData(&mWork.gameOver.mType, "Type", 0);
            if (mWork.gameOver.mType == 1) {
                cM3dGPla cStack_1dc;
                dComIfG_Bgsp().GetTriPla(mBG.field_0x0.field_0x4, &cStack_1dc);

                if (cStack_1dc.GetNP()->y >= 0.9f) {
                    mWork.gameOver.field_0x0 = 80;
                } else {
                    mWork.gameOver.field_0x0 = 81;
                }

                mWork.gameOver.field_0x10 = mCenter;
                mWork.gameOver.field_0x1c = mDirection;
                break;
            }
            mWork.gameOver.field_0x0 = 1;


        case 1:
            sp224 = relationalPos(mpPlayerActor, &sp1e8);
            for (int i = 0; i < 5; i++) {
                if (mWork.gameOver.field_0x8 != 0) {
                    spa8[i].x = -spa8[i].x;
                }
                
                sp230 = relationalPos(mpPlayerActor, &spa8[i]);
                if (sp230.y < mBG.field_0x108.field_0x4 + positionOf(mpPlayerActor).y) {
                    sp230.y = mBG.field_0x108.field_0x4 + positionOf(mpPlayerActor).y;
                }

                if (!lineBGCheck(&sp291, &sp230, 0x40b7)) break;

                spa8[i].x = -spa8[i].x;
                sp230 = relationalPos(mpPlayerActor, &spa8[i]);

                if (sp230.y < mBG.field_0x108.field_0x4 + positionOf(mpPlayerActor).y) {
                    sp230.y = mBG.field_0x108.field_0x4 + positionOf(mpPlayerActor).y;
                }

                if (!lineBGCheck(&sp291, &sp230, 0x40b7));
                mWork.gameOver.field_0x8++;
            }

            field_0x5c.mCenter = sp224;
            field_0x5c.mEye = sp230;
            mWork.gameOver.field_0x0++;
            bVar9 = true;
            // fallthrough
        case 2:
            if (mWork.gameOver.field_0x4 != 160) break;

            daPy_py_c* player = daPy_getPlayerActorClass();
            if (player->checkHorseRide()) break;

            mWork.gameOver.field_0x0++;
            mWork.gameOver.field_0x4 = 0.0f;
            field_0x5c.mFovy = 60.0f;
            // fallthrough
        case 3:
            sp224 = relationalPos(mpPlayerActor, &sp218);
            if (lineBGCheck(&sp291, &sp224, 0x40b7)) {
                sp224 = sp291 + field_0x5c.mDirection.Norm();
            }

            for (int i = 0; i < 3; i++) {
                if (mWork.gameOver.field_0x8 != 0) {
                    pos2->x = -pos2->x;
                }

                sp230 = relationalPos(mpPlayerActor, pos2);
                if (sp230.y < (mBG.field_0x108.field_0x4 + positionOf(mpPlayerActor).y)) {
                    sp230.y = mBG.field_0x108.field_0x4 + positionOf(mpPlayerActor).y;
                }

                if (!lineBGCheck(&sp291, &sp230, 0x40b7)) break;

                pos2->x = -pos2->x;
                sp230 = relationalPos(mpPlayerActor, pos2);

                if (sp230.y < (mBG.field_0x108.field_0x4 + positionOf(mpPlayerActor).y)) {
                    sp230.y = mBG.field_0x108.field_0x4 + positionOf(mpPlayerActor).y;
                }

                if (!lineBGCheck(&sp291, &sp230, 0x40b7)) break;
                mWork.gameOver.field_0x8++;
            }

            field_0x5c.mCenter = sp224;
            field_0x5c.mEye = sp230;
            mWork.gameOver.field_0x0++;
            field_0x5c.mFovy = 75.0f;
            bVar9 = 75.0f;
            break;

        case 50:
            mWork.gameOver.field_0x0 = 51;

        case 52:
            cXyz sp224(relationalPos(mpPlayerActor, &sp278));
            if (lineBGCheck(&sp291, &sp224, 0x40b7)) {
                sp224 = sp291 + field_0x5c.mDirection.Norm();
            }

            for (int i = 0; i < 3; i++) {
                if (mWork.gameOver.field_0x8 != 0) {
                    pos2->x = -pos2->x;
                }

                sp230 = relationalPos(mpPlayerActor, pos2);

                if (!lineBGCheck(&sp291, &sp230, 0x40b7)) break;

                pos2->x = -pos2->x;
                sp230 = relationalPos(mpPlayerActor, pos2);

                if (!lineBGCheck(&sp291, &sp230, 0x40b7)) break;
                mWork.gameOver.field_0x8 ^= 1;
            }

            field_0x5c.mCenter = sp224;
            field_0x5c.mEye = sp230;
            bVar9 = true;
            field_0x5c.mFovy = 60.0f;
            // fallthrough
        default:
            if (mWork.gameOver.field_0x4 == 160) {
                mWork.gameOver.field_0x0 = 5;
                mWork.gameOver.field_0x4 = 0.0f;
            }
            break;

        case 80:
        case 81:
            if (mIsWolf == 1) {
                fVar1 = -10.0f;
            } else {
                fVar1 = -40.0f;
            }

            if (mWork.gameOver.field_0x3c != 0) {
                fVar1 = 40.0f;
            }

            mWork.gameOver.field_0x10.y += (fVar1 + attentionPos(mpPlayerActor).y) - mWork.gameOver.field_0x10.y * 0.005f;
            field_0x5c.mCenter = mWork.gameOver.field_0x10;

            cSAngle acStack_43c(mWork.gameOver.field_0x1c.V());
            if (mWork.gameOver.field_0x0 == 80) {
                fVar1 = 30.0f;
            } else {
                fVar1 = 55.0f;
            }

            acStack_43c += (cSAngle(fVar1) - acStack_43c) * 0.02f;
            mWork.gameOver.field_0x1c.V(acStack_43c);

            f32 mRad = mWork.gameOver.field_0x1c.R();
            mWork.gameOver.field_0x1c.R(mRad + (350.0f - mRad) * 0.02f);
            field_0x5c.mFovy += (40.0f - field_0x5c.mFovy) * 0.005f;
            field_0x5c.mEye = field_0x5c.mCenter + mWork.gameOver.field_0x1c.Xyz();

            break;
    }

    if (!bVar9 && bVar3) {
        field_0x5c.mCenter += mMonitor.field_0x14;
        field_0x5c.mEye += (mMonitor.field_0x14 * 0.98f);
    }

    field_0x5c.mDirection.Val(field_0x5c.mEye - field_0x5c.mCenter);
    mWork.gameOver.field_0x8++;
    field_0x158.field_0x0 = true;
    return 1;
}

/* ############################################################################################## */
/* 8037A80C-8037A828 006E6C 001C+00 0/0 0/0 0/0 .rodata          @5985 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_5985[28] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xCC, 0xCC, 0xCD, 0x3F, 0x33,
    0x33, 0x33, 0x3F, 0x66, 0x66, 0x66, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037A80C, &lit_5985);
#pragma pop

/* 8037A828-8037A844 006E88 001C+00 0/0 0/0 0/0 .rodata          @5986 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_5986[28] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0xCC, 0xCC, 0xCD, 0x3E, 0x99,
    0x99, 0x9A, 0x3F, 0x19, 0x99, 0x9A, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037A828, &lit_5986);
#pragma pop

/* 8037A844-8037A858 006EA4 0014+00 0/0 0/0 0/0 .rodata          @5987 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_5987[20] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037A844, &lit_5987);
#pragma pop

/* 8037A858-8037A86C 006EB8 0014+00 0/0 0/0 0/0 .rodata          @5988 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_5988[20] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037A858, &lit_5988);
#pragma pop

/* 80091468-8009236C 08BDA8 0F04+00 1/0 1/0 0/0 .text            tactEvCamera__9dCamera_cFv */
bool dCamera_c::tactEvCamera() {
    // NONMATCHING
    cXyz sp58(cXyz(0.0f, 5.0f, 190.0f));
    cXyz sp4c(cXyz(0.0f, 0.0f, 215.0f));
    cXyz sp40(cXyz(0.0f, -26.0f, 80.0f));
    cXyz sp34(cXyz(0.0f, -26.0f, 45.0f));
    cXyz sp28(cXyz(0.0f, -40.0f, -20.0f));
    cXyz sp1c(cXyz(0.0f, -4.0f, 28.0f));
    cXyz spa0(cXyz(140.0f, 35.0f, 220.0f));
    cXyz sp94(cXyz(-200.0f, -15.0f, 240.0f));
    cXyz sp88(cXyz(380.0f, -120.0f, 450.0f));
    cXyz sp7c(cXyz(-235.0f, -142.0f, 470.0f));
    cXyz sp70(cXyz(30.0f, 105.0f, -260.0f));
    cXyz sp64(cXyz(-66.0f, 390.0f, 56.0f));
    f32 local_1d0[6] = { 0.75f, 0.35f, 0.8f, 0.8f, 0.8f, 0.8f };
    cXyz spf4(cXyz(0.0f, -16.0f, 14.0f));
    cXyz spe8(cXyz(0.0f, -26.0f, 14.0f));
    cXyz spdc(cXyz(0.0f, -26.0f, 14.0f));
    cXyz spd0(cXyz(0.0f, -10.0f, 15.0f));
    cXyz spc4(cXyz(-5.0f, -16.0f, -10.0f));
    cXyz spb8(cXyz(0.0f, -18.0f, 35.0f));
    cXyz spac(cXyz(0.0f, -12.0f, 8.0f));
    cXyz sp148(cXyz(-128.0f, -5.0f, 120.0f));
    cXyz sp13c(cXyz(-80.0f, -28.0f, 160.0f));
    cXyz sp130(cXyz(50.0f, -18.0f, 172.0f));
    cXyz sp124(cXyz(110.0f, 5.0f, 58.0f));
    cXyz sp118(cXyz(-50.0f, 40.0f, 85.0f));
    cXyz sp10c(cXyz(-70.0f, 60.0f, -45.0f));
    cXyz sp100(cXyz(5.0f, 70.0f, -25.0f));
    cXyz sp178(cXyz(0.0f, -10.0f, -56.0f));
    cXyz sp16c(cXyz(5.0f, -10.0f, -54.0f));
    cXyz sp160(cXyz(0.0f, 0.0f, -15.0f));
    cXyz sp154(cXyz(0.0f, 0.0f, -20.0f));
    cXyz sp1a8(cXyz(115.0f, -25.0f, 108.0f));
    cXyz sp19c(cXyz(-78.0f, -30.0f, 130.0f));
    cXyz sp190(cXyz(85.0f, 0.0f, -40.0f));
    cXyz sp184(cXyz(-25.0f, 70.0f, -75.0f));

    if (mCurCamStyleTimer == 0) {
        mWork.tact.field_0x4 = 0;
        mWork.tact.field_0x14 = 0;
        mWork.tact.field_0x0 = 0;
        mWork.tact.field_0xc = this->field_0xa8;
        if ((this->field_0xa8 & 2) != 0) {
            mWork.tact.field_0x8 = 0;
        } else {
            mWork.tact.field_0x8 = 1;
        }

        field_0x158.field_0x0 = true;
        mEventData.field_0x20 = 0;
        mEventData.field_0x24 = 0;
        mWork.tact.field_0x1c = &sp178;
        mWork.tact.field_0x20 = &sp1a8;
        mWork.tact.field_0x24 = 4;
        mWork.tact.field_0x2c = 55.0f;

        dComIfGp_saveCameraPosition(0, &field_0x5c.mCenter, &field_0x5c.mEye, field_0x5c.mFovy, field_0x5c.mBank);
    }

    switch (mEventData.field_0x24) {
        case 2:
            cXyz sp1e8;
            f32 fVar5;
            if ((mWork.tact.field_0xc & 4) != 0 && (mWork.tact.field_0xc & 16) != 0 && (mWork.tact.field_0xc & 128) != 0) {
                sp1e8 = sp40;
                sp40 = sp34;
                sp34 = sp1e8;
                sp1e8 = sp88;
                sp88 = sp7c;
                sp7c = sp1e8;
                fVar5 = local_1d0[2];
                local_1d0[2] = local_1d0[3];
                local_1d0[3] = fVar5;
            }

            if ((mWork.tact.field_0xc & 2) != 0 && (mWork.tact.field_0xc & 32) != 0 && (mWork.tact.field_0xc & 64) != 0) {
                sp1e8 = sp40;
                sp40 = sp58;
                sp58 = sp1e8;
                sp1e8 = sp88;
                sp88 = spa0;
                spa0 = sp1e8;
                fVar5 = local_1d0[2];
                local_1d0[2] = local_1d0[0];
                local_1d0[0] = fVar5;
            }

            if ((mWork.tact.field_0xc & 1) != 0 && (mWork.tact.field_0xc & 8) != 0) {
                sp1e8 = sp4c;
                sp4c = sp58;
                sp58 = sp1e8;
                sp1e8 = sp94;
                sp94 = spa0;
                spa0 = sp1e8;
                fVar5 = local_1d0[1];
                local_1d0[1] = local_1d0[0];
                local_1d0[0] = fVar5;
            }

            if (mWork.tact.field_0x0 < 20) {
                mWork.tact.field_0x0 = 20;
            }

            mWork.tact.field_0x1c = &sp58;
            mWork.tact.field_0x20 = &spa0;
            mWork.tact.field_0x24 = 6;
            mWork.tact.field_0x2c = 65.0f;
            break;

        case 3:
            if (mWork.tact.field_0x0 < 22) {
                mWork.tact.field_0x0 = 22;
            }
            break;

        case 1:
            mWork.tact.field_0x0 = 0;
            break;

        case 99:
            break;

        default:
            if (mIsWolf == 1) {
                mWork.tact.field_0x1c = &sp178;
                mWork.tact.field_0x20 = &sp1a8;
                mWork.tact.field_0x24 = 4;
                mWork.tact.field_0x2c = 65.0f;
            } else {
                mWork.tact.field_0x1c = &spf4;
                mWork.tact.field_0x20 = &sp148;
                mWork.tact.field_0x24 = 7;
                mWork.tact.field_0x2c = 55.0f;
            }
    }

    fopAc_ac_c* mHorseActor = (fopAc_ac_c*)dComIfGp_getHorseActor();
    switch (mWork.tact.field_0x0) {
        case 20:
            if (mHorseActor) {
                int i;
                for (i = 0; i < mWork.tact.field_0x24; i++) {
                    field_0x5c.mCenter = relationalPos(mHorseActor, mWork.tact.field_0x1c);
                    if (!lineBGCheck(&field_0x5c.mCenter, &field_0x5c.mEye, 0x4007)) {
                        if (!lineCollisionCheck(field_0x5c.mCenter, field_0x5c.mEye, mHorseActor, NULL, NULL)) break;
                    }
                }

                field_0x5c.mFovy = mWork.tact.field_0x2c;
                mWork.tact.field_0x0 = 21;
                mWork.tact.field_0x14 = i;
            }
            break;

        case 21:
            if (mHorseActor) {
                cXyz sp208 = relationalPos(mHorseActor, mWork.tact.field_0x1c);
                cXyz sp214 = relationalPos(mHorseActor, mWork.tact.field_0x20);
                if (!lineBGCheck(&sp208, &sp214, 0x4007)) {
                    if (!lineCollisionCheck(sp208, sp214, mHorseActor, NULL, NULL)) {
                        field_0x5c.mCenter += (sp208 - field_0x5c.mCenter) * local_1d0[mWork.tact.field_0x14];
                        field_0x5c.mEye += (sp214 - field_0x5c.mEye) * local_1d0[mWork.tact.field_0x14];
                    } else {
                        mWork.tact.field_0x0 = 22;
                    }
                }
            }
            break;

        case 22:
            if (mHorseActor) {
                cXyz cStack_220 = relationalPos(mHorseActor, mWork.tact.field_0x1c);
                cXyz cStack_238 = attentionPos(mpPlayerActor);
                cXyz cStack_244;
                cXyz local_250(50.0f, -10.0f, -160.0f);
                cXyz local_25c = attentionPos(mHorseActor) - cStack_238;
                cSAngle acStack_47c(cM_atan2s(local_25c.x, local_25c.z));
                cSAngle acStack_484 = cSAngle(cM_atan2s(local_25c.x, local_25c.z)) - directionOf(mpPlayerActor);
                if (acStack_484 > cSAngle::_0) {
                    local_250.x = -local_250.x;
                }

                cSAngle acStack_488 = acStack_47c;
                local_250 = dCamMath::xyzRotateY(local_250, acStack_488);

                cXyz cStack_22c = attentionPos(mpPlayerActor) + local_250;

                cM3dGLin cStack_1f0(cStack_220, cStack_22c);
                f32 fVar1 = 0.0f;
                if (cM3d_Len3dSqPntAndSegLine(&cStack_1f0, &cStack_238, &cStack_244, &fVar1)) {
                    cStack_220 = cStack_244;
                }

                if (!lineBGCheck(&cStack_220, &cStack_22c, 0x4007) && !lineBGCheck(&cStack_238, &cStack_22c, 0x4007)) {
                    field_0x5c.mCenter = cStack_220;
                    field_0x5c.mEye = cStack_22c;
                } else {
                    field_0x5c.mCenter = attentionPos(mpPlayerActor) + mWork.tact.field_0x30;
                    field_0x5c.mEye = attentionPos(mpPlayerActor) + mWork.tact.field_0x3c;
                }

                mWork.tact.field_0x0 = 23;
            }
            break;

        case 23:
            break;

        default:
            cXyz sp254;
            cXyz sp260 = attentionPos(mpPlayerActor);
            for (int i = 0; i < mWork.tact.field_0x24; i++) {
                field_0x5c.mCenter = relationalPos(mpPlayerActor, mWork.tact.field_0x1c);
                sp260.y = field_0x5c.mCenter.y;
                if (lineBGCheck(&sp260, &field_0x5c.mCenter, &sp254, 0x4007)) {
                    field_0x5c.mCenter = sp254 - (cXyz(sp254 - sp260).norm() * 5.0f);
                }

                field_0x5c.mEye = relationalPos(mpPlayerActor, mWork.tact.field_0x20);
                sp254 = field_0x5c.mEye + (cXyz(field_0x5c.mEye - sp260).norm() * 5.0f);

                if (!lineBGCheck(&sp260, &sp254, 0x4007)) {
                    if (!lineCollisionCheck(field_0x5c.mEye, field_0x5c.mCenter, mpPlayerActor, NULL, NULL)) break;
                }
            }

            if (mWork.tact.field_0x0 == 0) {
                mWork.tact.field_0x30 = field_0x5c.mCenter - sp260;
                mWork.tact.field_0x3c = field_0x5c.mEye - sp260;
            }

            mWork.tact.field_0x0 = 9;
            field_0x5c.mFovy = mWork.tact.field_0x2c;
            break;

        case 9:
        case 29:
            field_0x5c.mCenter = attentionPos(mpPlayerActor) + mWork.tact.field_0x30;
            field_0x5c.mEye = attentionPos(mpPlayerActor) + mWork.tact.field_0x3c;
            break;
    }

    #ifdef DEBUG
    if (mCamSetup.CheckFlag(0x8000)) {
        dDbVw_Report(20, 250, "        %d", mWork.tact.field_0x0);
    }
    #endif

    field_0x5c.mDirection.Val(field_0x5c.mEye - field_0x5c.mCenter);
    mWork.tact.field_0x4++;
    return 1;
}

/* 800923B8-800923C0 08CCF8 0008+00 0/0 1/0 0/0 .text            turnToActorEvCamera__9dCamera_cFv */
bool dCamera_c::turnToActorEvCamera() {
    return true;
}

/* 800923C0-800924D0 08CD00 0110+00 0/0 1/0 0/0 .text            stbWaitEvCamera__9dCamera_cFv */
bool dCamera_c::stbWaitEvCamera() {
    dDemo_camera_c* demo_cam = dDemo_c::getCamera();
#if DEBUG
    char* enabled_report = "-----";
#endif

    if (demo_cam != NULL) {
        if (demo_cam->checkEnable(0x40)) {
            field_0x5c.mCenter = demo_cam->getTarget();
#if DEBUG
            enabled_report[0] = 'C';
#endif
        }

        if (demo_cam->checkEnable(0x10)) {
            field_0x5c.mEye = demo_cam->getTrans();
#if DEBUG
            enabled_report[1] = 'E';
#endif
        }

        if (demo_cam->checkEnable(0x4)) {
            field_0x5c.mFovy = demo_cam->getFovy();
#if DEBUG
            enabled_report[2] = 'F';
#endif
        }

        if (demo_cam->checkEnable(0x20)) {
            mUp = demo_cam->getUp();
#if DEBUG
            enabled_report[3] = 'U';
#endif
        }

        if (demo_cam->checkEnable(0x80)) {
            field_0x5c.mBank = cAngle::d2s(-demo_cam->getRoll());
#if DEBUG
            enabled_report[4] = 'B';
#endif
        }

#if DEBUG
        if (mCamSetup.CheckFlag(0x8000)) {
            dDbVw_Report(90, 190, "%s", enabled_report);
        }
#endif

        field_0x5c.mDirection.Val(field_0x5c.mEye - field_0x5c.mCenter);
    }

    return true;
}

/* 800924D0-8009258C 08CE10 00BC+00 0/0 1/0 0/0 .text            saveEvCamera__9dCamera_cFv */
bool dCamera_c::saveEvCamera() {
    int slot;
    getEvIntData(&slot, "Slot", 0);

    if (slot == 9) {
        dComIfGp_saveCameraPosition(0, &field_0x5c.mCenter, &field_0x5c.mEye, field_0x5c.mFovy, field_0x5c.mBank.Val());
    } else {
        pushInfo(&field_0xd0[slot], 1);
    }

    field_0x158.field_0x0 = 1;
    return true;
}

/* 8009258C-800929AC 08CECC 0420+00 0/0 1/0 0/0 .text            loadEvCamera__9dCamera_cFv */
bool dCamera_c::loadEvCamera() {
    // NONMATCHING
    struct mWork::load* load = &mWork.load;
    f32 local_58[6] = { 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f };
    if (mCurCamStyleTimer == 0) {
        getEvIntData(&load->mSlot, "Slot", 0);
        getEvIntData(&load->mTimer, "Timer", 1);
        getEvIntData(&load->mType, "Type", load->mTimer > 9);

        if (load->mType > 1) {
            OS_REPORT("camera: event: LOAD: warning!! type %d unknown\n", load->mType);
            load->mType = 1;
        }

        if (load->mType != 0) {
            mEventData.field_0xf0.Init(4, load->mTimer + 1);
            mEventData.field_0xf0.Step();
        }

        if (load->mSlot == 9) {
            s16 local_b0;
            dComIfGp_loadCameraPosition(0, &load->field_0x28, &load->field_0x34, &load->field_0x48, &local_b0);
            load->field_0x42 = cSAngle(local_b0);
        } else {
            #ifdef DEBUG
            if (field_0xd0[load->mSlot].field_0x1e == 0 || load->mSlot > 1) {
                OS_REPORT("camera: event: LOAD: warning!! slot %d not saved\n", load->mSlot);
            }
            #endif

            dCamInfo_c* pdVar3 = &field_0xd0[load->mSlot];
            load->field_0x28 = pdVar3->mCenter;
            load->field_0x34 = pdVar3->mEye;
            load->field_0x48 = pdVar3->mFovy;
            load->field_0x42 = pdVar3->mBank;
        }
        load->field_0x1c = field_0x5c.mCenter;
        load->field_0xc = field_0x5c.mDirection;
        load->field_0x14.Val(load->field_0x34 - load->field_0x28);
        load->field_0x44 = field_0x5c.mFovy;
        load->field_0x40 = field_0x5c.mBank;
    }

    if (mCurCamStyleTimer < load->mTimer) {
        f32 fVar5;
        if (load->mType != 0) {
            mEventData.field_0xf0.Step();
            mEventData.field_0xf0.Calc(local_58);
        } else {
            fVar5 = (mCurCamStyleTimer + 1) / load->mTimer;
        }

        field_0x5c.mCenter = load->field_0x1c + ((load->field_0x28 - load->field_0x1c) * fVar5);
        field_0x5c.mDirection.R(load->field_0xc.R() + (fVar5 * (load->field_0x14.R() - load->field_0xc.R())));
        field_0x5c.mDirection.V(load->field_0xc.V() + ((load->field_0x14.V() - load->field_0xc.V()) * fVar5));
        field_0x5c.mDirection.U(load->field_0xc.U() + ((load->field_0x14.U() - load->field_0xc.U()) * fVar5));
        field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();
        field_0x5c.mFovy = load->field_0x44 + (fVar5 * (load->field_0x48 - load->field_0x44));
        field_0x5c.mBank = load->field_0x40 + ((load->field_0x42 - load->field_0x40) * fVar5);
        return 0;
    } else {
        field_0x158.field_0x0 = true;
        return 1;
    }
}

/* 800929AC-800937AC 08D2EC 0E00+00 0/0 1/0 0/0 .text            useItem0EvCamera__9dCamera_cFv */
bool dCamera_c::useItem0EvCamera() {
    // NONMATCHING
    cXyz sp394[49] = {
        cXyz(10.0f, -15.0f, 20.0f), cXyz(30.0f, 115.0f, 70.0f), cXyz(0.0f, 120.0f, 64.0f),
        cXyz(65.0f, 120.0f, -10.0f), cXyz(40.0f, 118.0f, 0.0f), cXyz(0.0f, -32.0f, 15.0f),
        cXyz(80.0f, -50.0f, 140.0f), cXyz(-52.0f, 34.0f, 80.0f), cXyz(80.0f, 116.0f, 88.0f),
        cXyz(55.0f, -33.0f, 100.0f), cXyz(105.0f, -55.0f, 70.0f), cXyz(16.0f, 52.0f, -8.0f),
        cXyz(0.0f, -80.0f, 25.0f), cXyz(-85.0f, -15.0f, 240.0f), cXyz(-95.0f, 92.0f, 165.0f),
        cXyz(155.0f, 80.0f, 120.0f), cXyz(5.0f, 108.0f, 155.0f), cXyz(0.0f, -27.0f, 25.0f),
        cXyz(-90.0f, -70.0f, 150.0f), cXyz(130.0f, -68.0f, 114.0f), cXyz(5.0f, 130.0f, 110.0f),
        cXyz(-45.0f, -50.0f, -110.0f), cXyz(30.241f, 12.653f, 13.95f), cXyz(23.639f, 96.636f, 57.318f),
        cXyz(-2.849f, 96.639f, 42.753f), cXyz(23.639f, 96.636f, 57.318), cXyz(0.0f, -60.0f, -15.0f),
        cXyz(-90.0f, 115.0f, 120.0f), cXyz(75.0f, 105.0f, 65.0f), cXyz(80.0f, 110.0f, -130.0f),
        cXyz(0.0f, -15.0f, -100.0f), cXyz(-100.0f, -60.0f, -420.0f), cXyz(110.0f, -55.0f, -400.0f),
        cXyz(0.0f, 10.0f, -30.0f), cXyz(95.0f, -55.0f, -245.0f), cXyz(-58.0f, -65.0f, -250.0f),
        cXyz(0.0f, -15.0f, 20.0f), cXyz(-105.0f, 1.5f, 47.0f), cXyz(113.0f, -28.0f, -12.0f),
        cXyz(96.0f, 50.0f, 38.0f), cXyz(-68.0f, 70.0f, 82.0f), cXyz(0.0f, 15.0f, -40.0f),
        cXyz(65.0f, 350.0f, -85.0f), cXyz(-110.0f, 340.0f, -115.0f), cXyz(100.0f, 30.0f, 270.0f),
        cXyz(0.0f, -20.0f, 30.0f), cXyz(-85.0f, -10.0f, 300.0f), cXyz(50.0f, 165.0f, 160.0f),
        cXyz(-260.0f, -50.0f, 30.0f),
    };

    cXyz* local_1b0[49];
    *local_1b0 = sp394;

    u32 local_1a8[91] = {
        0x00000000, 0x00000000, 0x00000000, 0x42820000,
        0x0000001E, 0x00000000, 0xFFFFFFFF, 0x00000000,
        0x00000000, 0x00000000, 0x42820000, 0x00000028,
        0x00000000, 0xFFFFFFFF, 0x00000000, 0x00000000,
        0x00000000, 0x42820000, 0x00000028, 0x00000000,
        0x00000007, 0x00000000, 0x00000000, 0x00000000,
        0x42820000, 0x00000028, 0x00000000, 0x00000007,
        0x00000000, 0x00000000, 0x00000000, 0x42820000,
        0x0000000A, 0x00000049, 0xFFFFFFFF, 0x00000000,
        0x00000000, 0x00000000, 0x428C0000, 0x0000002D,
        0x00000000, 0xFFFFFFFF, 0x00000000, 0x00000000,
        0x00000000, 0x42700000, 0x00000028, 0x00000000,
        0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000,
        0x42700000, 0x00000028, 0x00000000, 0xFFFFFFFF,
        0x00000000, 0x00000000, 0x00000000, 0x42340000,
        0x00000050, 0x0000000A, 0xFFFFFFFF, 0x00000000,
        0x00000000, 0x00000000, 0x42820000, 0x00000028,
        0x00000000, 0xFFFFFFFF, 0x00000000, 0x00000000,
        0x00000000, 0x42700000, 0x00000028, 0x00000000,
        0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000,
        0x42700000, 0x00000001, 0x0000003C, 0xFFFFFFFF,
        0x00000000, 0x00000000, 0x00000000, 0x42820000,
        0x00000014, 0x00000000, 0xFFFFFFFF,
    };

    cSAngle acStack_53c, acStack_540;
    cXyz sp408;

    struct mWork::item* item = &mWork.item;
    if (mCurCamStyleTimer == 0) {
        item->field_0x0 = 0;
        item->field_0x44 = mCenter;
        item->field_0x50 = mEye;
        item->field_0x5c = mFovy;
    }

    cXyz sp414 = attentionPos(mpPlayerActor);
    cXyz sp424;
    switch (item->field_0x0) {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0:
            getEvIntData(&item->mType, "Type", 0);
            item->field_0x1c = 0;
            item->field_0x20 = 0;
            break;

        case 11:
            item->field_0x0 = 10;
            int iVar1 = item->field_0x20 + 1;
            item->field_0x20 = iVar1;
            if (local_1a8[item->mType * 7 + 3] >= iVar1) {
                item->field_0x20 = 0;
                if ((field_0xa8 & local_1a8[item->mType]) == 0) {
                    local_1b0[item->mType * 7 + -1 + 12] = local_1b0[item->mType * 7 + -1];
                }

                item->field_0xc = relationalPos(mpPlayerActor, local_1b0[item->mType * 7]);
                item->field_0x18 = local_1a8[item->mType * 7 + 1];
                item->field_0x4 = local_1a8[item->mType * 7 + 2];

                if (lineBGCheck(&sp414, &item->field_0xc, 0x40b7)) {
                    item->field_0xc = sp424 + cSGlobe().Norm();
                }

                int i;
                for (i = 0; i < local_1a8[item->mType * 7]; i++) {
                    sp408 = relationalPos(mpPlayerActor, local_1b0[item->mType + i * 12]);
                    if ((((sp408.y < mBG.field_0x108.field_0x4 + positionOf(mpPlayerActor).y) << 3) << 28) < 0) {
                        sp408.y = mBG.field_0x108.field_0x4 + positionOf(mpPlayerActor).y;
                    }

                    fopAc_ac_c* mActor = NULL;
                    if (item->mType == 10 || (item->mType < 10 && item->mType != 1)) {
                        if (daPy_getPlayerActorClass()->checkHorseRide() != 0) {
                            mActor = (fopAc_ac_c*)dComIfGp_getHorseActor();
                        } else if (daPy_getPlayerActorClass()->checkCanoeRide() != 0) {
                            mActor = fopAcM_SearchByName(0xed);
                        }
                    }

                    if (!lineBGCheck(&item->field_0xc, &sp408, 0x4007) && !lineBGCheck(&sp414, &sp408, 0x4007)) {
                        if (!lineCollisionCheck(item->field_0xc, sp408, mpPlayerActor, mActor, NULL)) {
                            break;
                        }
                    }
                }

                if (local_1a8[item->mType * 7] >= i) {
                    item->field_0xc = item->field_0x44;
                    item->field_0x18 = item->field_0x5c;
                    sp408 = item->field_0x50;
                }

                item->field_0x24.Val(sp408 - item->field_0xc);
                item->field_0x0 = 1;
            }
            break;

        case 1:
            f32 fVar1 = item->field_0x20 / item->field_0x4;
            field_0x5c.mFovy += fVar1 * (item->field_0x18 - field_0x5c.mFovy);
            field_0x5c.mCenter += (item->field_0xc - field_0x5c.mCenter) * fVar1;

            f32 fVar2 = field_0x5c.mDirection.R();
            acStack_540 = field_0x5c.mDirection.V();
            acStack_53c = field_0x5c.mDirection.U();
            fVar2 = fVar2 + (fVar1 * (item->field_0x24.R() - fVar2));
            acStack_540 += (item->field_0x24.V() - acStack_540) * fVar1;
            acStack_53c += (item->field_0x24.U() - acStack_53c) * fVar1;

            field_0x5c.mDirection.Val(fVar2, acStack_540, acStack_53c);
            field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();

            if (item->field_0x20 < item->field_0x4) break;

            item->field_0x0 = 2;
            // fallthrough
        case 2:
            field_0x5c.mCenter = item->field_0xc;
            field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();

            item->field_0x1c++;
            if (item->field_0x1c == 1) {
                if (item->mType == 0) {
                    item->field_0x0 = 11;
                    item->mType = 4;
                    break;
                }

                if (item->mType == 7) {
                    item->field_0x0 = 11;
                    item->mType = 8;
                    break;
                }

                if (item->mType == 11) {
                    item->field_0x0 = 999;
                    break;
                }
            }

            item->field_0x0 = 99;
            // fallthrough
        default:
            field_0x158.field_0x0 = true;
            field_0x5c.mCenter = item->field_0xc;
            field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();
    }

    item->field_0x20++;
    return 1;
}

/* 800937AC-80094240 08E0EC 0A94+00 0/0 1/0 0/0 .text            useItem1EvCamera__9dCamera_cFv */
bool dCamera_c::useItem1EvCamera() {
    // NONMATCHING
    if (mCurCamStyleTimer == 0 && getEvIntData(&mWork.item.mType, "Type", 0), mWork.item.mType == 0) {
        mWork.item.field_0x2c = field_0x5c.mCenter - attentionPos(mpPlayerActor);
        mWork.item.field_0x38 = field_0x5c.mEye - attentionPos(mpPlayerActor);
    }

    if (mWork.item.mType == 0) {
        mWork.item.field_0x2c.y += 0.05f * (20.0f - mWork.item.field_0x2c.y);
        mWork.item.field_0x2c.x += -mWork.item.field_0x2c.x * 0.05f;
        mWork.item.field_0x2c.z += -mWork.item.field_0x2c.z * 0.05f;
        
        field_0x5c.mCenter = attentionPos(mpPlayerActor) + mWork.item.field_0x2c;
        field_0x5c.mDirection.Val(field_0x5c.mEye - field_0x5c.mCenter);
        field_0x5c.mDirection.R(field_0x5c.mDirection.R());

        if (field_0x5c.mDirection.V() > cSAngle(70.0f)) {
            field_0x5c.mDirection.V(cSAngle(70.0f));
        }

        if (field_0x5c.mDirection.V() < cSAngle(0.0f)) {
            field_0x5c.mDirection.V(cSAngle(0.0f));
        }

        field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();
        field_0x5c.mFovy += (20.0f - field_0x5c.mFovy) * 0.05f;
        return 1;
    }

    cXyz spec(0.0f, 0.0f, 0.0f);
    cXyz spf8(0.0f, -70.0f, 70.0f);
    cXyz sp104(0.0f, -30.0f, 70.0f);

    daPy_py_c* mPlayer = daPy_getPlayerActorClass();
    daMidna_c* mMidna = (daMidna_c*)daPy_py_c::getMidnaActor();
    cXyz* sp264;
    if (mIsWolf == 1) {
        if (mPlayer->checkMidnaRide() && mMidna->checkNoDraw()) {
            sp264 = &sp104;
        } else {
            sp264 = &spf8;
        }
    }

    cXyz sp11c(10.0f, -60.0f, 0.0f);
    cXyz spa8(90.0f, 20.0f, 180.0f);
    cXyz sp9c(-100.0f, 50.0f, -180.0f);
    cXyz sp90(60.0f, 150.0f, 165.0f);
    cXyz sp84(-150.0f, 30.0f, 170.0f);
    cXyz sp78(0.0f, -20.0f, 165.0f);
    cXyz sp6c(40.0f, 150.0f, -85.0f);
    int local_d8[12] = { 6, 65, 1, 1, 7, 0, 0, -1, 30, 80, 0, -1 };
    cXyz* local_e0[2] = { &sp11c, &spa8 };
    bool rv = false;

    if (mCurCamStyleTimer == 0) {
        mWork.item.field_0x0 = 0;
        mWork.item.field_0x44 = mCenter;
        mWork.item.field_0x50 = mEye;
        mWork.item.field_0x5c = mFovy;
    }

    cXyz sp134 = attentionPos(mpPlayerActor);
    cXyz sp140;
    switch (mWork.item.field_0x0) {
        case 0:
            mWork.item.field_0x1c = 0;
            mWork.item.field_0x0 = 1;
            // fallthrough
        case 1:
            mWork.item.field_0x18 = local_d8[mWork.item.field_0x1c + mWork.item.mType];
            mWork.item.field_0xc = field_0x5c.mCenter;
            if (local_e0[mWork.item.field_0x1c + mWork.item.mType] != NULL) {
                mWork.item.field_0xc = relationalPos(mpPlayerActor, &(*local_e0[mWork.item.mType + mWork.item.field_0x1c] + *sp264));

                if ((field_0xa8 & local_d8[mWork.item.mType * 56 + mWork.item.field_0x1c * 28]) == 0) {
                    cXyz cStack_14c = *local_e0[mWork.item.field_0x1c + mWork.item.mType];
                    local_e0[mWork.item.field_0x1c + mWork.item.mType] += 12;
                    local_e0[mWork.item.field_0x1c + mWork.item.mType] = &cStack_14c;
                }

                if (lineBGCheck(&sp134, &mWork.item.field_0xc, &sp140, 0x40b7)) {
                    mWork.item.field_0xc = sp140 + cSGlobe().Norm();
                }
            }

            cXyz sp128 = field_0x5c.mEye;
            if (local_d8[mWork.item.field_0x1c + mWork.item.mType] != 0) {
                int i;
                for (i = 0; i < local_d8[mWork.item.field_0x1c + mWork.item.mType]; i++) {
                    sp128 = relationalPos(mpPlayerActor, local_e0[mWork.item.field_0x1c]);
                    fopAc_ac_c* mHorseActor = (fopAc_ac_c*)dComIfGp_getHorseActor();
                    if (!lineBGCheck(&mWork.item.field_0xc, &sp128, 0x4007) && !lineBGCheck(&sp134, &sp128, 0x4007)) {
                        if (!lineCollisionCheck(mWork.item.field_0xc, sp128, mpPlayerActor, mHorseActor, NULL)) {
                            break;
                        }
                    }
                }

                if (local_d8[mWork.item.field_0x1c] <= i) {
                    sp128 = field_0x5c.mEye;
                }
            }

            mWork.item.field_0x24.Val(sp128 - mWork.item.field_0xc);
            mWork.item.field_0x0 = 2;
            mWork.item.field_0x4 = local_d8[mWork.item.field_0x1c];
            mWork.item.field_0x20 = 1;
            break;

        case 2:
            if (mWork.item.field_0x4 > 1) {
                f32 fVar1 = mWork.item.field_0x20 / mWork.item.field_0x4;
                field_0x5c.mFovy += fVar1 * (mWork.item.field_0x18 - field_0x5c.mFovy);
                field_0x5c.mCenter += (mWork.item.field_0xc - field_0x5c.mCenter) * fVar1;

                f32 fVar2 = field_0x5c.mDirection.R();
                cSAngle acStack_28c = field_0x5c.mDirection.V();
                cSAngle acStack_288 = field_0x5c.mDirection.U();
                fVar2 = fVar2 + (fVar1 * (mWork.item.field_0x24.R() - fVar2));
                acStack_28c += (mWork.item.field_0x24.V() - acStack_28c) * fVar1;
                acStack_288 += (mWork.item.field_0x24.U() - acStack_288) * fVar1;
                field_0x5c.mDirection.Val(fVar2, acStack_28c, acStack_288);
                field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();

                if (mWork.item.field_0x20 < mWork.item.field_0x4) break;
            }

            mWork.item.field_0x0 = 3;
            mWork.item.field_0x4 = local_d8[mWork.item.field_0x1c * 28 + mWork.item.mType];
            mWork.item.field_0x20 = 1;
            // fallthrough
        case 3:
            field_0x5c.mCenter = mWork.item.field_0xc;
            field_0x5c.mEye = field_0x5c.mCenter + mWork.item.field_0x24.Xyz();
            field_0x5c.mDirection = mWork.item.field_0x24;
            field_0x5c.mFovy = mWork.item.field_0x18;

            if (mWork.item.field_0x20 < mWork.item.field_0x4) break;

            if (local_d8[mWork.item.mType * 14 + 7] != 0 && mWork.item.field_0x1c == 0) {
                mWork.item.field_0x1c = 1;
                mWork.item.field_0x0 = 1;
                break;
            }

            mWork.item.field_0x0 = 99;
            // fallthrough
        default:
            field_0x158.field_0x0 = true;
            rv = true;
    }

    mWork.item.field_0x20++;
    return rv;
}

/* 80094240-80094A70 08EB80 0830+00 0/0 1/0 0/0 .text            getItemEvCamera__9dCamera_cFv */
bool dCamera_c::getItemEvCamera() {
    // NONMATCHING
    cXyz cStack_90[8] = {
        cXyz(0.0f, -27.0f, 32.0f),
        cXyz(84.0f, -18.0f, 134.0f),
        cXyz(17.0f, 10.0f, -45.0f),
        cXyz(-45.0f, 128.0f, 45.0f),
        cXyz(0.0f, -27.0f, -62.0f),
        cXyz(-84.0f, -18.0f, -164.0f),
        cXyz(-12.0f, 10.0f, -130.0f),
        cXyz(50.0f, 128.0f, -220.0f),
    };

    int local_fc[25] = {
        0x00000000, 0x00000000, 0x42480000, 0x0000000C, 0x00000001, 
        0x00000000, 0x00000000, 0x42480000, 0x0000000C, 0x00000000, 
        0x00000000, 0x00000000, 0x42480000, 0x00000011, 0xFFFFFFFF, 
        0x00000000, 0x00000000, 0x42480000, 0x00000011, 0xFFFFFFFF,
        0x00000000, 0x00000000, 0x42480000, 0x00000011, 0x00000000,
    };

    cXyz* local_f8[8];
    *local_f8 = cStack_90;

    f32 fStack_ec[6] = { 0x00000000, 0x00000000, 0x3DCCCCCD, 0x3F333333, 0x3F800000, 0x3F800000 };

    if (mCurCamStyleTimer == 0) {
        getEvIntData(&mWork.getItem.field_0x8, "Type", mIsWolf == 1);

        if (mWork.getItem.field_0x8 == 2) {
            if (mIsWolf != 1) {
                mWork.getItem.field_0x8 = 3;
            } else {
                mWork.getItem.field_0x8 = 4;
            }

            OS_REPORT("camera: event:                   => %d\n", mWork.getItem.field_0x8);
        }

        getEvIntData(&mWork.getItem.mTimer, "Timer", local_fc[mWork.getItem.field_0x8 * 5]);
        int iVar1 = getEvFloatListData(&mWork.getItem.mCurvePoints, "CurvePoints");
        mWork.getItem.field_0x18 = iVar1;
        if (iVar1 == 0) {
            mWork.getItem.mCurvePoints = fStack_ec;
            mWork.getItem.field_0x18 = 6;
        }

        getEvXyzData(&mWork.getItem.mStartCenter, "StartCenter", mCenter);
        getEvXyzData(&mWork.getItem.mStartEye, "StartEye", mEye);

        mWork.getItem.mRelActor = getEvActor("RelActor", "@PLAYER");
        mWork.getItem.mRelActorID = fopAcM_GetID(mWork.getItem.mRelActor);

        cXyz mCenter;
        getEvXyzData(&mCenter, "Center", *local_f8[mWork.getItem.field_0x8 * 5]);
        mWork.getItem.field_0x44 = relationalPos(mWork.getItem.mRelActor, &mCenter);

        if (local_fc[mWork.getItem.field_0x8 * 5] == 1) {
            cSGlobe cStack_208(mEye - positionOf(mWork.getItem.mRelActor));
            cSAngle acStack_224(cStack_208.U() - directionOf(mWork.getItem.mRelActor));
            if (acStack_224 < cSAngle::_0) {
                local_f8[mWork.getItem.field_0x8 * 5 + 1]->x = -local_f8[mWork.getItem.field_0x8 * 5 + 1]->x;
            }

            mCenter = relationalPos(mWork.getItem.mRelActor, local_f8[mWork.getItem.field_0x8 * 5 + 1]);
            if (lineBGCheck(&mWork.getItem.field_0x44, &mCenter, 0x4007)) {
                local_f8[mWork.getItem.field_0x8 * 5 + 1]->x = -local_f8[mWork.getItem.field_0x8 * 5 + 1]->x;
            }
        } else if (local_fc[mWork.getItem.field_0x8 * 5] == -1) {
            cSGlobe cStack_210(mEye - positionOf(mWork.getItem.mRelActor));
            cSAngle acStack_228(cStack_210.U() - directionOf(mWork.getItem.mRelActor));
            if (acStack_228 > cSAngle::_0) {
                local_f8[mWork.getItem.field_0x8 * 5 + 1]->x = -local_f8[mWork.getItem.field_0x8 * 5 + 1]->x;
            }

            mCenter = relationalPos(mWork.getItem.mRelActor, local_f8[mWork.getItem.field_0x8 * 5 + 1]);
            if (lineBGCheck(&mWork.getItem.field_0x44, &mCenter, 0x4007)) {
                local_f8[mWork.getItem.field_0x8 * 5 + 1]->x = -local_f8[mWork.getItem.field_0x8 * 5 + 1]->x;
            }
        }

        getEvXyzData(&mCenter, "Eye", *local_f8[mWork.getItem.field_0x8 * 5 + 1]);
        mWork.getItem.field_0x50 = relationalPos(mWork.getItem.mRelActor, &mCenter);
        mWork.getItem.field_0x3c.Val(mWork.getItem.mStartEye - mWork.getItem.mStartCenter);
        mWork.getItem.field_0x100.Val(mWork.getItem.field_0x50 - mWork.getItem.field_0x44);

        mEventData.field_0xf0.Init(mWork.getItem.field_0x18, mWork.getItem.mTimer + 1);
        mEventData.field_0xf0.Step();
    }

    if (mWork.getItem.mRelActor && fopAcM_SearchByID(mWork.getItem.mRelActorID) == NULL) {
        OS_REPORT("camera: event: error: relational base actor dead\n");
        return 1;
    }
        
    if (mCurCamStyleTimer < mWork.getItem.mTimer) {
        mEventData.field_0xf0.Step();
        f32 fVar1 = mEventData.field_0xf0.Calc(mWork.getItem.mCurvePoints);

        field_0x5c.mCenter = mWork.getItem.mStartCenter + ((mWork.getItem.field_0x44 - mWork.getItem.mStartCenter) * fVar1);
        field_0x5c.mDirection.R(mWork.getItem.field_0x3c.R() + (fVar1 * (mWork.getItem.field_0x100.R() - mWork.getItem.field_0x3c.R())));
        field_0x5c.mDirection.V(mWork.getItem.field_0x3c.V() + ((mWork.getItem.field_0x100.V() - mWork.getItem.field_0x3c.V()) * fVar1));
        field_0x5c.mDirection.U(mWork.getItem.field_0x3c.U() + ((mWork.getItem.field_0x100.U() - mWork.getItem.field_0x3c.U()) * fVar1));
        field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();
        field_0x5c.mFovy += fVar1 * (fStack_ec[mWork.getItem.field_0x8 * 5 + -1] - field_0x5c.mFovy);

        return 0;
    }

    return 1;
}

namespace {
    inline static int get_camera_id(camera_class* i_camera) {
        return fopCamM_GetParam(i_camera);
    }

    inline static dDlst_window_c* get_window(camera_class* i_camera) {
        return dComIfGp_getWindow(dComIfGp_getCameraWinID(get_camera_id(i_camera)));
    }
}

/* 80094A70-80095010 08F3B0 05A0+00 0/0 1/0 0/0 .text            possessedEvCamera__9dCamera_cFv */
bool dCamera_c::possessedEvCamera() {
    // NONMATCHING
    fopAc_ac_c* a_this = (fopAc_ac_c*)this;
    struct mWork::possessed* possessed = &mWork.possessed;

    bool rv = 0;
    if (mCurCamStyleTimer == 0) {
        possessed->field_0x0 = 0;
    }

    switch (possessed->field_0x0) {
        default:
            if (!(possessed->mTargetActor = getEvActor("Target", "@PLAYER"))) {
                rv = 1;
            } else {
                getEvIntData(&possessed->mType, "Type", 0);
                getEvIntData(&possessed->mTimer, "Timer", 10);
                getEvFloatData(&possessed->mRadius, "Radius", 60.0f);
                getEvFloatData(&possessed->mCushion, "Cushion", 1.0f);

                f32 fVar1;
                getEvFloatData(&fVar1, "Latitude", -5.0f);
                possessed->mLatitude.Val(fVar1);
                getEvFloatData(&fVar1, "Longitude", 0.0f);
                possessed->mLongitude.Val(fVar1);

                getEvFloatData(&possessed->mFovy, "Fovy", 45.0f);
                getEvIntData(&possessed->mBlure, "Blure", 0);

                if (possessed->mType == 0) {
                    possessed->field_0x28.Val(possessed->mRadius, possessed->mLatitude, possessed->mLongitude + directionOf(possessed->mTargetActor));
                    pushInfo(&field_0xd0[1], 2);
                    field_0xd0[1].field_0x1e = 2;
                } else {
                    field_0x5c.mCenter = eyePos(a_this);
                    possessed->field_0x28.Val(field_0xd0[1].mEye - field_0xd0[1].mCenter);
                    field_0x5c.mDirection.Val(possessed->mRadius, possessed->mLatitude, possessed->mLongitude + directionOf(possessed->mTargetActor));
                    field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();
                    field_0x5c.mFovy = possessed->mFovy;
                }

                possessed->field_0x0 = 1;
                possessed->field_0xc = possessed->mTimer;
                switch (possessed->mBlure) {
                    case 1:
                        StartBlure(possessed->mTimer, possessed->mTargetActor, 0.5f, 0.99f);
                        break;

                    case 2:
                        StartBlure(possessed->mTimer, possessed->mTargetActor, 0.63f, 0.99f);
                }
            }
            break;

        case 1:
            f32 fVar1 = 1.0f / possessed->field_0xc;
            field_0x5c.mCenter += ((eyePos(a_this) - field_0x5c.mCenter) * fVar1);
            field_0x5c.mDirection.R(field_0x5c.mDirection.R() + (fVar1 * (possessed->field_0x28.R() - field_0x5c.mDirection.R())));
            field_0x5c.mDirection.V(field_0x5c.mDirection.V() + ((possessed->field_0x28.V() - field_0x5c.mDirection.V()) * fVar1));
            field_0x5c.mDirection.U(field_0x5c.mDirection.U() + ((possessed->field_0x28.U() - field_0x5c.mDirection.U()) * fVar1));
            field_0x5c.mEye += ((field_0x5c.mCenter + field_0x5c.mDirection.Xyz()) - field_0x5c.mEye) * possessed->mCushion;
            field_0x5c.mFovy += fVar1 * (possessed->mFovy - field_0x5c.mFovy);

            if (possessed->mBlure != 1) {
                camera_class* mCamera;
                dDlst_window_c* window = get_window(mCamera);
                scissor_class* scissor = window->getScissor();
                cXyz sp60;
                cXyz mEyePos = eyePos(a_this);
                mDoLib_project(&mEyePos, &sp60);
                SetBlurePosition(sp60.x / scissor->width, sp60.y / scissor->height, 0.0f);
                SetBlureAlpha((fVar1 * 0.699999988079071f) + 0.5f);
                SetBlureScale((fVar1 * 0.09000000357627869f) + 1.1f, 0.98f - (fVar1 * 0.18000000715255737f), 0.0f);
            }

            possessed->field_0xc--;
            if (possessed->field_0xc <= 0) {
                possessed->field_0x0 = 99;
            }
            break;

        case 99:
            rv = 1;
            field_0x158.field_0x0 = true;
    }

    return rv;
}

/* 80095010-8009544C 08F950 043C+00 0/0 1/0 0/0 .text            fixedFramesEvCamera__9dCamera_cFv */
bool dCamera_c::fixedFramesEvCamera() {
    // NONMATCHING
    if (mCurCamStyleTimer == 0) {
        cXyz sp30, sp3c;
        mWork.fixedFrames.field_0x38 = 9999;

        int substanceNum = dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, "Centers");
        if (substanceNum != 0) {
            mWork.fixedFrames.field_0x1c[1] = dComIfGp_evmng_getMyXyzP(mEventData.field_0x4, "Centers");
            if (mWork.fixedFrames.field_0x38 > substanceNum) {
                mWork.fixedFrames.field_0x38 = substanceNum;
            }
        } else {
            OS_REPORT("camera: event: error: %s (xyz*) not found\n", "Centers");
            return 1;
        }


        substanceNum = dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, "Eyes");
        if (substanceNum != 0) {
            mWork.fixedFrames.field_0x1c[0] = dComIfGp_evmng_getMyXyzP(mEventData.field_0x4, "Eyes");
            if (mWork.fixedFrames.field_0x38 > substanceNum) {
                mWork.fixedFrames.field_0x38 = substanceNum;
            }
        } else {
            OS_REPORT("camera: event: error: %s (xyz*) not found\n", "Eyes");
            return 1;
        }


        substanceNum = dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, "Fovys");
        if (substanceNum != 0) {
            mWork.fixedFrames.field_0x24[0] = dComIfGp_evmng_getMyFloatP(mEventData.field_0x4, "Fovys");
            if (mWork.fixedFrames.field_0x38 > substanceNum) {
                mWork.fixedFrames.field_0x38 = substanceNum;
            }
        } else {
            OS_REPORT("camera: event: error: %s (float*) not found\n", "Fovys");
            return 1;
        }


        mWork.fixedFrames.field_0x0 = getEvIntData(&mWork.fixedFrames.mTimer, "Timer", 1);
        getEvStringData(&mWork.fixedFrames.mRelUseMask, "RelUseMask", "oo");
        #ifdef DEBUG
        if (strlen(&mWork.fixedFrames.mRelUseMask) != 2) {
            OSReport("camera: event:                   bad length -> xx\n");
            strcpy(&mWork.fixedFrames.mRelUseMask, "xx");
            JUTAssertion::showAssert(JUTAssertion::getSDevice(), "d_ev_camera.cpp", 0x129c, "Halt");
            OSPanic("d_ev_camera.cpp", 0x129c, "Halt");
        }
        #endif

        mWork.fixedFrames.mRelActor = getEvActor("RelActor");

        int iVar1 = 0;
        getEvIntData(&mWork.fixedFrames.mChoice, "Choice", 0);
        if (mWork.fixedFrames.mChoice == 1) {
            iVar1 = fabsf(cM_rndFX(mWork.fixedFrames.field_0x38 - 0.01f));
        }

        for (int i = 0; i < mWork.fixedFrames.field_0x38; i++) {
            sp30 = *mWork.fixedFrames.field_0x1c[iVar1 * 12];
            sp3c = *mWork.fixedFrames.field_0x1c[iVar1 * 12];

            if (mWork.fixedFrames.mRelActor && mWork.fixedFrames.mRelUseMask == 111) {
                mWork.fixedFrames.field_0x4 = relationalPos(mWork.fixedFrames.mRelActor, &sp30);
            } else {
                mWork.fixedFrames.field_0x4 = sp30;
            }

            if (mWork.fixedFrames.mRelActor && mWork.fixedFrames.field_0x31 == 111) {
                mWork.fixedFrames.field_0x10 = relationalPos(mWork.fixedFrames.mRelActor, &sp3c);
            } else {
                mWork.fixedFrames.field_0x10 = sp3c;
            }

            mWork.fixedFrames.field_0x24[1] = mWork.fixedFrames.field_0x24[iVar1];

            if (!lineBGCheck(&mWork.fixedFrames.field_0x4, &mWork.fixedFrames.field_0x10, 0x4007)) {
                if (!lineCollisionCheck(mWork.fixedFrames.field_0x4, mWork.fixedFrames.field_0x10, mpPlayerActor, mWork.fixedFrames.mRelActor, NULL)) {
                    break;
                }
            }

            iVar1++;

            if (iVar1 >= mWork.fixedFrames.field_0x38) {
                iVar1 = 0;
            }
        }

        field_0x158.field_0x0 = true;
    }

    field_0x5c.mCenter = mWork.fixedFrames.field_0x4;
    field_0x5c.mEye = mWork.fixedFrames.field_0x10;
    field_0x5c.mFovy = *mWork.fixedFrames.field_0x24[1];
    field_0x5c.mDirection.Val(field_0x5c.mEye - field_0x5c.mCenter);
    if (mWork.fixedFrames.field_0x0 && mWork.fixedFrames.mTimer < mCurCamStyleTimer) {
        return 0;
    }

    return 1;
}

/* 8009544C-800956E4 08FD8C 0298+00 0/0 1/0 0/0 .text            bSplineEvCamera__9dCamera_cFv */
bool dCamera_c::bSplineEvCamera() {
    // NONMATCHING
    struct mWork::bSpline* bSpline = &mWork.bSpline;
    if (mCurCamStyleTimer == 0) {
        bSpline->field_0x1c = 0;
        bSpline->field_0x10 = 9999;
        int iVar1 = getEvXyzListData(&bSpline->mCenters, "Centers");
        if (iVar1 != 0) {
            if (iVar1 > bSpline->field_0x10) {
                bSpline->field_0x10 = iVar1;
            }
        } else {
            return 1;
        }

        iVar1 = getEvXyzListData(&bSpline->mEyes, "Eyes");
        if (iVar1 != 0) {
            if (iVar1 > bSpline->field_0x10) {
                bSpline->field_0x10 = iVar1;
            }
        } else {
            return 1;
        }

        iVar1 = getEvFloatListData(&bSpline->mFovys, "Fovys");
        if (iVar1 != 0) {
            if (iVar1 > bSpline->field_0x10) {
                bSpline->field_0x10 = iVar1;
            }
        } else {
            return 1;
        }

        iVar1 = getEvIntData(&bSpline->mTimer, "Timer");
        if (iVar1 == 0) {
            OS_REPORT("camera: event: error: NO Timer\n");
            return 1;
        }

        bSpline->mRelActor = getEvActor("RelActor");
        mEventData.field_0xf0.Init(bSpline->field_0x10, bSpline->mTimer);
        field_0x158.field_0x0 = true;
    }

    if (bSpline->field_0x1c == 0 && mEventData.field_0xf0.Step()) {
        cXyz cStack_28, cStack_34;
        mEventData.field_0xf0.Calc(&cStack_28);
        mEventData.field_0xf0.Calc(&cStack_34);

        if (bSpline->mRelActor == NULL) {
            field_0x5c.mCenter = relationalPos(bSpline->mRelActor, &cStack_28);
            field_0x5c.mEye = relationalPos(bSpline->mRelActor, &cStack_34);
        } else {
            field_0x5c.mCenter = cStack_28;
            field_0x5c.mEye = cStack_34;
        }

        field_0x5c.mDirection.Val(field_0x5c.mEye - field_0x5c.mCenter);
        field_0x5c.mFovy = mEventData.field_0xf0.Calc(bSpline->mFovys);
        if (mEventData.field_0xf0.field_0x08 == 3) {
            bSpline->field_0x1c = 1;
        }
    }

    return bSpline->field_0x1c;
}

/* 800956E4-80095E7C 090024 0798+00 0/0 1/0 0/0 .text            twoActor0EvCamera__9dCamera_cFv */
bool dCamera_c::twoActor0EvCamera() {
    // NONMATCHING
    static cXyz DefaultGap_10515;

    // if (struct_80450F88[2] == 0) {   - ???
    //     DefaultGap_10515.set(0.0f, 0.0f, 0.0f);
    // }

    if (mCurCamStyleTimer == 0) {
        mWork.twoActor0.mActor1 = getEvActor("Actor1", "@PLAYER");
        mWork.twoActor0.mActor2 = getEvActor("Actor2", "@STARTER");

        if (mWork.twoActor0.mActor1 == NULL || mWork.twoActor0.mActor2 == NULL) {
            OS_REPORT("camera: event: error: actor 1 or 2 missing\n");
            return 1;
        }

        mWork.twoActor0.mActor1ID = fopAcM_GetID(mWork.twoActor0.mActor1);
        mWork.twoActor0.mActor2ID = fopAcM_GetID(mWork.twoActor0.mActor2);

        getEvXyzData(&mWork.twoActor0.mCtrGap, "CtrGap", DefaultGap_10515);
        getEvFloatData(&mWork.twoActor0.mCtrRatio, "CtrRatio", -0.1f);
        getEvFloatData(&mWork.twoActor0.mCtrCus, "CtrCus", 1.0f);
        getEvFloatData(&mWork.twoActor0.mEyeCus, "EyeCus", 1.0f);
        getEvFloatData(&mWork.twoActor0.mRadiusMin, "RadiusMin", 100.0f);
        getEvFloatData(&mWork.twoActor0.mRadiusMax, "RadiusMax", 10000.0f);
        getEvFloatData(&mWork.twoActor0.mLatitudeMin, "LatitudeMin", -60.0f);
        getEvFloatData(&mWork.twoActor0.mLatitudeMax, "LatitudeMax", 60.0f);
        getEvFloatData(&mWork.twoActor0.mLongitudeMin, "LongitudeMin", 20.0f);
        getEvFloatData(&mWork.twoActor0.mLongitudeMax, "LongitudeMax", 160.0f);

        getEvIntData(&mWork.twoActor0.mLongitudeType, "LongitudeType", -1);
        getEvFloatData(&mWork.twoActor0.mFovy, "Fovy", 60.0f);
        mWork.twoActor0.field_0x4c = field_0x5c.mDirection.R();
        mWork.twoActor0.field_0x54 = cSAngle(field_0x5c.mDirection.V().Degree());
        mWork.twoActor0.field_0x56 = cSAngle(field_0x5c.mDirection.U().Degree());
    }

    cSGlobe cStack_d8(attentionPos(mWork.twoActor0.mActor1) - attentionPos(mWork.twoActor0.mActor2));

    cXyz cStack_34;
    if (fopAcM_SearchByID(mWork.twoActor0.mActor1ID) == NULL) {
        OS_REPORT("camera: event: error: actor1 dead\n");
        return 1;

    } else if (fopAcM_SearchByID(mWork.twoActor0.mActor2ID) == NULL) {
        OS_REPORT("camera: event: error: actor2 dead\n");
        return 1;

    } else if (mWork.twoActor0.mCtrRatio >= 0.0f || mWork.twoActor0.mCtrRatio <= 1.0f) {
        cStack_34 = relationalPos(mWork.twoActor0.mActor1, mWork.twoActor0.mActor2, &mWork.twoActor0.mCtrGap, 0.25f);

    } else {
        cStack_34 = (attentionPos(mWork.twoActor0.mActor1) + 
                    attentionPos(mWork.twoActor0.mActor2)) * mWork.twoActor0.mCtrRatio;
    }

        field_0x5c.mCenter += (cStack_34 - field_0x5c.mCenter) * mWork.twoActor0.mCtrCus;

        if (mCurCamStyleTimer == 0) {
            cSAngle acStack_e0;
            switch (mWork.twoActor0.mLongitudeType) {
                case 1:
                    acStack_e0 = cSAngle(directionOf(mpPlayerActor).Inv());
                    break;

                case 2:
                    acStack_e0 = directionOf(mpPlayerActor);
                    break;

                default:
                    acStack_e0 = field_0x5c.mDirection.U();
            }

            cSAngle acStack_e4 = cStack_d8.U() - acStack_e0;
            s16 sVar1 = cSAngle(mWork.twoActor0.mLongitudeMin).Val();
            s16 sVar2 = acStack_e4.Abs();
            if (((sVar1 ^ sVar2) >> 1) - ((sVar1 ^ sVar2) & sVar1) != 0) {
                if (acStack_e4 < cSAngle::_0) {
                    mWork.twoActor0.field_0x5a = cStack_d8.U() + cSAngle(mWork.twoActor0.mLongitudeMin);
                } else {
                    mWork.twoActor0.field_0x5a = cStack_d8.U() - cSAngle(mWork.twoActor0.mLongitudeMin);
                }
            } else {
                sVar1 = cSAngle(mWork.twoActor0.mLongitudeMax).Val();
                sVar2 = acStack_e4.Abs();
                if (((sVar2 ^ sVar1) >> 1) - ((sVar2 ^ sVar1) & sVar2) != 0) {
                    if (acStack_e4 < cSAngle::_0) {
                        mWork.twoActor0.field_0x5a = cStack_d8.U() + cSAngle(mWork.twoActor0.mLongitudeMax);
                    } else {
                        mWork.twoActor0.field_0x5a = cStack_d8.U() - cSAngle(mWork.twoActor0.mLongitudeMax);
                    }
                } else {
                    mWork.twoActor0.field_0x5a = acStack_e0;
                }
            }

            cSAngle acStack_e8(field_0x5c.mDirection.V());
            if (acStack_e8 < cSAngle(mWork.twoActor0.mLatitudeMin)) {
                mWork.twoActor0.field_0x58 = cSAngle(mWork.twoActor0.mLatitudeMin);
            } else {
                if (acStack_e8 > cSAngle(mWork.twoActor0.mLatitudeMax)) {
                    mWork.twoActor0.field_0x58 = cSAngle(mWork.twoActor0.mLatitudeMax);
                } else {
                    mWork.twoActor0.field_0x58 = field_0x5c.mDirection.V();
                }
            }

            f32 fVar1 = field_0x5c.mDirection.R();
            if (fVar1 < mWork.twoActor0.mRadiusMin) {
                mWork.twoActor0.field_0x50 = mWork.twoActor0.mRadiusMin;
            } else if (fVar1 > mWork.twoActor0.mRadiusMax) {
                mWork.twoActor0.field_0x50 = mWork.twoActor0.mRadiusMax;
            } else {
                mWork.twoActor0.field_0x50 = field_0x5c.mDirection.R();
            }
        }

        mWork.twoActor0.field_0x56 += (mWork.twoActor0.field_0x5a - mWork.twoActor0.field_0x56) * mWork.twoActor0.mEyeCus;
        mWork.twoActor0.field_0x54 += (mWork.twoActor0.field_0x58 - mWork.twoActor0.field_0x54) * mWork.twoActor0.mEyeCus;
        mWork.twoActor0.field_0x4c += mWork.twoActor0.mEyeCus * (mWork.twoActor0.field_0x50 - mWork.twoActor0.field_0x4c);
        field_0x5c.mDirection.Val(mWork.twoActor0.field_0x4c, mWork.twoActor0.field_0x54, mWork.twoActor0.field_0x56);
        field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();
        field_0x5c.mFovy += mWork.twoActor0.mCtrCus * (mWork.twoActor0.mFovy - field_0x5c.mFovy);
    

    return 1;
}

/* 80095E7C-80095FD0 0907BC 0154+00 0/0 1/0 0/0 .text            peepHoleEvCamera__9dCamera_cFv */
bool dCamera_c::peepHoleEvCamera() {
    // NONMATCHING
    if (mCurCamStyleTimer == 0) {
        fopAc_ac_c* mPlayer = dComIfGp_getLinkPlayer();
        cXyz sp20 = positionOf(mPlayer);
        cXyz sp2c(sp20);
        mPlayer = dComIfGp_event_getPt2();
        if (mPlayer == NULL) {
            OS_REPORT("camera: event: error: partner actor not found\n");
        } else {
            cXyz sp38 = positionOf(mPlayer);
            if (dCamMath().xyzHorizontalDistance(sp20, sp38) > 50.0f) {
                sp38.y = sp20.y;
                cXyz cStack_2c = sp20 - sp38;
                cStack_2c .normalize();
                sp2c = sp38 + (cStack_2c * 50.0f);
            }
        }

        dComIfGp_getEventManager().setGoal(&sp2c);
    }

    return 1;
}

/* 80095FD0-800965AC 090910 05DC+00 0/0 1/0 0/0 .text            digHoleEvCamera__9dCamera_cFv */
bool dCamera_c::digHoleEvCamera() {
    // NONMATCHING
    struct mWork::digHole* digHole = &mWork.digHole;
    if (mCurCamStyleTimer == 0) {
        digHole->field_0x0 = 0;
        getEvIntData(&digHole->mType, "Type", 3);
        if (digHole->mType == 1) {
            mEventData.field_0x20 = 0;
        }

        digHole->field_0x8 = 60;
        digHole->field_0xc = 0.05f;
        digHole->field_0x10 = 1;
        if ((digHole->mType & 1) != 0) {
            cSAngle acStack_158(field_0x5c.mDirection.U() - directionOf(mpPlayerActor));
            s16 sVar1 = cSAngle::_90.Val();
            s16 sVar2 = acStack_158.Abs();
            if (sVar2 < sVar1) {
                cXyz sp70, sp7c;
                cSGlobe cStack_138;
                sp70 = relationalPos(mpPlayerActor, &cXyz(0.0f, -70.0f, -10.0f));
                cStack_138.R(350.0f);
                cStack_138.V(cSAngle(30.0f));

                cSAngle acStack_164 = directionOf(mpPlayerActor);
                f32 fVar1;
                if (acStack_164 < cSAngle::_0) {
                    fVar1 = 10.0f;
                } else {
                    fVar1 = -10.0f;
                }

                cStack_138.U(acStack_164.Inv() + fVar1);

                sp7c = sp70 + cStack_138.Xyz();

                if (!lineBGCheck(&sp70, &sp7c, 0x4007)) {
                    field_0x5c.mFovy = 60.0f;
                    field_0x5c.mCenter = sp70;
                    field_0x5c.mDirection = cStack_138;
                    field_0x5c.mEye = sp7c;
                } else {
                    digHole->field_0x10 = 0;
                }
            }
        }

        if ((digHole->mType & 2) != 0) {
            digHole->field_0x14 = relationalPos(mpPlayerActor, &cXyz(0.0f, 0.0f, 245.0f));

            cXyz sp64[3] = { cXyz(-85.0f, -10.0f, 300.0f), cXyz(50.0f, 165.0f, 160.0f), cXyz(-260.0f, -50.0f, 30.0f)};
            fopAc_ac_c* mMidnaActor = (fopAc_ac_c*)daPy_py_c::getMidnaActor();
            cXyz spa0;
            for (int i = 0; i < 3; i++) {
                spa0 = dCamMath::xyzRotateY(sp64[i], directionOf(mpPlayerActor));

                digHole->field_0x20 = digHole->field_0x14 + spa0;

                if (!lineBGCheck(&digHole->field_0x14, &digHole->field_0x20, 0x4007)) {
                    if (!lineCollisionCheck(digHole->field_0x14, digHole->field_0x20, mpPlayerActor, mMidnaActor, NULL)) {
                        break;
                    }
                }
            }
        }

        cXyz spac = attentionPos(mpPlayerActor);
        if (dCamMath::xyzHorizontalDistance(field_0x5c.mCenter, spac) > 120.0f) {
            digHole->field_0x10 = 0;
        }
    }

    digHole->field_0x0++;

    if (digHole->mType != 2) {
        if (digHole->field_0x10 != 0) {
            f32 fVar2 = field_0x5c.mDirection.R();
            f32 fVar3 = field_0x5c.mDirection.V().Degree();
            field_0x5c.mDirection.R(fVar2 + (350.0f - fVar2) * digHole->field_0xc);
            field_0x5c.mDirection.V(fVar3 + (40.0f - fVar3) * digHole->field_0xc);
            field_0x5c.mFovy += (60.0f - field_0x5c.mFovy) * digHole->field_0xc;
            field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();
        } else if (!strcmp(dComIfGp_getStartStageName(), "R_SP01")) {
            field_0x88 = 0;
        }

        if (digHole->field_0x0 >= digHole->field_0x8  && digHole->mType != 1) {
            digHole->field_0x0 = 0;
            digHole->mType = 2;
        }
    } else if (digHole->field_0x0 == 1) {
        field_0x5c.mCenter = digHole->field_0x14;
        field_0x5c.mEye = digHole->field_0x20;
        field_0x5c.mDirection.Val(field_0x5c.mEye - field_0x5c.mCenter);
        field_0x5c.mFovy = 60.0f;
    }

    return 1;
}

/* 800965AC-80096EDC 090EEC 0930+00 0/0 1/0 0/0 .text            hintTalkEvCamera__9dCamera_cFv */
bool dCamera_c::hintTalkEvCamera() {
    // NONMATCHING
    bool rv;
    f32 fVar22;
    fopAc_ac_c* mRideActor;
    cXyz spc0, spcc, spd8, spe4, spf0, spfc;
    
    struct mWork::hintTalk* hintTalk = &mWork.hintTalk;
    daAlink_c* mLink = (daAlink_c*)mpPlayerActor;
    
    if (mCurCamStyleTimer == 0) {
        hintTalk->mTeacher = getEvActor("Teacher", "Midna");
        hintTalk->mStudent = getEvActor("Student", "@PLAYER");
        getEvFloatData(&hintTalk->mFovy, "Fovy", 55.0f);
        getEvFloatData(&hintTalk->mRadius, "Radius", 280.0f);
        getEvFloatData(&hintTalk->mCtrGapY, "CtrGapY", -25.0f);
        getEvIntData(&hintTalk->mTimer, "Timer", 20);
    }

    if (hintTalk->mTeacher == NULL || hintTalk->mStudent == NULL) {
        OS_REPORT("camera: event: error: actor 1 or 2 missing\n");
        return 1;
    }

    if (mCurCamStyleTimer == 0) {
        spc0 = attentionPos(hintTalk->mTeacher);
        spcc = attentionPos(hintTalk->mStudent);
        mRideActor = NULL;
        
        if (fopAcM_GetName(hintTalk->mTeacher) == 0xff) {
            spc0 = *mLink->getShadowTalkAtnPos();
        }

        if (hintTalk->mStudent == mpPlayerActor && mIsWolf == 1) {
            spd8 = positionOf(mpPlayerActor);
            spd8.y = spcc.y;
            spfc = spd8 - spcc;
            spcc += spfc.norm() * 40.0f;
        }

        hintTalk->field_0x40 = spc0;
        hintTalk->mDirection = field_0x5c.mDirection;
        spf0 = spcc - spc0;
        hintTalk->field_0x28.Val(spf0);

        if ((dComIfGp_getCameraAttentionStatus(0) & 0x800) != 0) {
            hintTalk->field_0x28.V(cSAngle(15.0f));
        }

        spe4 = spc0 + (spf0 * 0.8f);
        spe4.y += hintTalk->mCtrGapY;
        hintTalk->mDirection.R(hintTalk->mRadius);

        f32 local_b0[10] = { 40.0f, 60.0f, 25.0f, 50.0f, 75.0f, 35.0f, 15.0f, 90.0f, 110.0f, 140.0f };
        f32 fVar1;
        if ((field_0xa8 & 16) != 0) {
            fVar1 = local_b0[0];
            local_b0[0] = local_b0[3];
            local_b0[3] = fVar1;
        }
        if ((field_0xa8 & 4) != 0) {
            fVar1 = local_b0[2];
            local_b0[2] = local_b0[1];
            local_b0[1] = fVar1;
        }
        if ((field_0xa8 & 2) != 0) {
            fVar1 = local_b0[0];
            local_b0[0] = local_b0[1];
            local_b0[1] = fVar1;
        }

        bool bVar9 = false;
        cSAngle acStack_1f8(hintTalk->field_0x28.U());
        if (mLink->checkRide() != 0) {
            mRideActor = mLink->getRideActor();
            acStack_1f8 = directionOf(mpPlayerActor);
            if ((hintTalk->field_0x28.U() - acStack_1f8) < cSAngle::_0) {
                fVar22 = -1.0f;
            } else {
                fVar22 = 1.0f;
            }
        } else if (hintTalk->field_0x28.U() - hintTalk->mDirection.U() > cSAngle::_0) {
            fVar22 = -1.0f;
        } else {
            fVar22 = 1.0f;
        }

        cSAngle acStack_1fc(20.0f);
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 12; j++) {
                cSAngle acStack_200(local_b0[j] * fVar22);
                hintTalk->mDirection.U(acStack_1f8 + acStack_200);
                hintTalk->mDirection.V(((hintTalk->field_0x28.V() * acStack_200.Cos()) * 0.2f) + acStack_1fc);
                hintTalk->field_0x8 = spe4 - ((spf0 * 0.2f) * acStack_200.Cos());
                hintTalk->field_0x14 = hintTalk->field_0x8 + hintTalk->mDirection.Xyz();

                if (!lineBGCheck(&spcc, &hintTalk->field_0x14, 0x4007) && !lineBGCheck(&spc0, &hintTalk->field_0x14, 0x4007)) {
                    if (!lineBGCheck(&hintTalk->field_0x8, &hintTalk->field_0x14, 0x4007)) {
                        if (!lineCollisionCheck(spcc, hintTalk->field_0x14, hintTalk->mStudent, hintTalk->mTeacher, mRideActor)) {
                            if (!lineCollisionCheck(spc0, hintTalk->field_0x14, hintTalk->mStudent, hintTalk->mTeacher, mRideActor)) {
                                bVar9 = true;
                                break;
                            }
                        }
                    }
                }

                int iVar1 = j >> 31;
                if ((iVar1 * 4 | (j * 0x40000000 + iVar1) >> 30) - iVar1 == 3) {
                    f32 fVar2;
                    if (i != 0) {
                        fVar2 = -2.5f;
                    } else {
                        fVar2 = 4.5f;
                    }

                    acStack_1fc += cSAngle(fVar2);
                }
            }

            if (bVar9) break;

            fVar22 = -fVar22;
            hintTalk->mDirection.R(hintTalk->mDirection.R() * 0.75f);
        }
    }

    if (!field_0x158.field_0x0) {
        f32 fVar3 = mCurCamStyleTimer + 1;
        fVar22 = dCamMath::rationalBezierRatio(fVar3 / hintTalk->mTimer, 0.4f);
        field_0x5c.mCenter += (hintTalk->field_0x8 - field_0x5c.mCenter) * fVar22;
        field_0x5c.mDirection.R(field_0x5c.mDirection.R() + ((hintTalk->mDirection.R() - field_0x5c.mDirection.R()) * fVar22));
        field_0x5c.mDirection.V(field_0x5c.mDirection.V() + ((hintTalk->mDirection.V() - field_0x5c.mDirection.V()) * fVar22));
        field_0x5c.mDirection.U(field_0x5c.mDirection.U() + ((hintTalk->mDirection.U() - field_0x5c.mDirection.U()) * fVar22));
        field_0x5c.mEye = field_0x5c.mCenter + field_0x5c.mDirection.Xyz();
        field_0x5c.mFovy += fVar22 * (hintTalk->mFovy - field_0x5c.mFovy);

        if (mCurCamStyleTimer == (hintTalk->mTimer - 1)) {
            field_0x158.field_0x0 = true;
        }

        rv = 0;
    } else {
        rv = 1;
    }

    return rv;
}

/* 80096EDC-80097694 09181C 07B8+00 0/0 1/0 0/0 .text            bspTransEvCamera__9dCamera_cFv */
bool dCamera_c::bspTransEvCamera() {
    // NONMATCHING
    cXyz sp64, sp3c;
    struct mWork::bspTrans* bspTrans = &mWork.bspTrans;
    f32 local_7c[4] = { 0x000000, 0x000000, 0x3F000000, 0x3F000000 };

    if (mCurCamStyleTimer == 0) {
        field_0x158.field_0x0 = true;
        if (!getEvIntData(&bspTrans->mTimer, "Timer")) {
            OS_REPORT("camera: event: error: BSPTRANS no Timer\n");
            return 1;
        }

        int iVar1 = getEvFloatListData(&bspTrans->mBase, "Base");
        if (iVar1 != 0) {
            mEventData.field_0xf0.Init(iVar1, bspTrans->mTimer + 1);
        } else {
            OS_REPORT("camera: event:                   use 0.0 0.0 1.0 1.0\n");
            mEventData.field_0xf0.Init(4, bspTrans->mTimer + 1);
        }
        mEventData.field_0xf0.Step();

        bspTrans->mSet1 = 0;
        char* use1;
        strcpy(use1, "xxxxxx");

        iVar1 = getEvFloatListData(&bspTrans->mSet1, "Set1");
        if (iVar1 != 0) {
            bspTrans->mSplinePath1.Init(iVar1, bspTrans->mTimer + 1);
            bspTrans->mSplinePath1.Step();
            getEvStringData(use1, "Use1", "ooxxxx");

            #ifdef DEBUG
            if (strlen(use1) != 6) {
                OSReport("camera: event:                   bad length -> xxxxxx\n");
                strcpy(use1, "xxxxxx");
                JUTAssertion::showAssert(JUTAssertion::getSDevice(), "d_ev_camera.cpp", 0x14f9, "0");
                OSPanic("d_ev_camera.cpp", 0x14f9, "Halt");
            }
            #endif
        }

        bspTrans->mSet2 = 0;
        char* use2;
        strcpy(use2, "xxxxxx");

        iVar1 = getEvFloatListData(&bspTrans->mSet2, "Set2");
        if (iVar1 != 0) {
            bspTrans->mSplinePath2.Init(iVar1, bspTrans->mTimer + 1);
            bspTrans->mSplinePath2.Step();
            getEvStringData(use2, "Use2", "xxooox");

            #ifdef DEBUG
            if (strlen(use2) != 6) {
                OSReport_Error("camera: event:                   bad length -> xxxxxx\n");
                strcpy(use2, "xxxxxx");
                JUTAssertion::showAssert(JUTAssertion::getSDevice(), "d_ev_camera.cpp", 0x1509, "0");
                OSPanic("d_ev_camera.cpp", 0x1509, "Halt");
            }
            #endif
        }

        bspTrans->mRelActorID = -1;
        bspTrans->mRelActor = getEvActor("RelActor");
        if (bspTrans->mRelActor) {
            getEvStringData(&bspTrans->mRelUseMask, "RelUseMask", "oo");

            #ifdef DEBUG
            if (strlen(bspTrans->mRelUseMask) != 2) {
                OSReport_Error("camera: event:                   bad length -> xx\n");
                strcpy(&bspTrans->mRelUseMask, "xx");
                JUTAssertion::showAssert(JUTAssertion::getSDevice(), "d_ev_camera.cpp", 0x1515, "0");
                OSPanic("d_ev_camera.cpp", 0x1515, "Halt");
            }
            #endif

            bspTrans->mRelActorID = fopAcM_GetID(bspTrans->mRelActor);
        }

        getEvXyzData(&bspTrans->field_0x94, "Center", mCenter);
        getEvXyzData(&bspTrans->field_0xa0, "Eye", mEye);
        getEvFloatData(&bspTrans->field_0xac, "Fovy", mFovy);
        getEvFloatData(&bspTrans->mCushion, "Cushion", 1.0f);

        for (int i = 0; i < 6; i++) {
            int iVar2, iVar3;
            if (isRelChar(*use1)) {
                if (!isRelChar(*use2)) {
                    iVar3 = 1;
                } else {
                    iVar3 = 2;
                }

                iVar2 = iVar3;
            } else {
                iVar2 = 0;
            }

            bspTrans->field_0xc0[i] = iVar2;
        }

        bspTrans->field_0x78 = mCenter;
        bspTrans->field_0x84 = mEye;
        bspTrans->field_0x90 = mFovy;
    }

    if (bspTrans->mRelActor == NULL || fopAcM_SearchByID(bspTrans->mRelActorID) == NULL) {
        OS_REPORT("camera: event: error: relational base actor dead\n");
        return 1;
    }

    cXyz sp60, sp70;
    if (mCurCamStyleTimer < bspTrans->mTimer) {
        struct {
            cXyz sp48;
        } pos;

        if (bspTrans->mRelActor == NULL) {
            if (isRelChar(bspTrans->mRelUseMask)) {
                pos.sp48 = relationalPos(bspTrans->mRelActor, &bspTrans->field_0x94);
            } else {
                pos.sp48 = bspTrans->field_0x94;
            }

            if (isRelChar(bspTrans->field_0xb9)) {
                sp3c = relationalPos(bspTrans->mRelActor, &bspTrans->field_0xa0);
            } else {
                sp3c = bspTrans->field_0xa0;
            }
        } else {
            pos.sp48 = bspTrans->field_0x94;
            sp3c = bspTrans->field_0xa0;
        }

        mEventData.field_0xf0.Step();
        local_7c[0] = mEventData.field_0xf0.Calc(bspTrans->mBase);
        if (bspTrans->mSet1 != 0) {
            bspTrans->mSplinePath1.Step();
            local_7c[1] = bspTrans->mSplinePath1.Calc(bspTrans->mSet1);
        }

        if (bspTrans->mSet2 != 0) {
            bspTrans->mSplinePath2.Step();
            local_7c[2] = bspTrans->mSplinePath2.Calc(bspTrans->mSet2);
        }

        sp64.x = bspTrans->field_0x78.x + (pos.sp48.x - bspTrans->field_0x78.x) * local_7c[bspTrans->field_0xc0[1]];
        sp64.y = bspTrans->field_0x78.y + (pos.sp48.y - bspTrans->field_0x78.y) * local_7c[bspTrans->field_0xc0[0]];
        sp64.z = bspTrans->field_0x78.z + (pos.sp48.z - bspTrans->field_0x78.z) * local_7c[bspTrans->field_0xc0[1]];

        field_0x5c.mCenter += (sp64 - field_0x5c.mCenter) * bspTrans->mCushion;

        cSGlobe cStack_130(bspTrans->field_0x84 - bspTrans->field_0x78);
        cSGlobe cStack_138(sp3c - pos.sp48);
        cSGlobe cStack_140;

        cStack_140.R(cStack_130.R() + ((cStack_138.R() - cStack_130.R()) * local_7c[bspTrans->field_0xc0[2]]));
        cStack_140.V(cStack_130.V() + ((cStack_138.V() - cStack_130.V()) * local_7c[bspTrans->field_0xc0[3]]));
        cStack_140.U(cStack_130.U() + ((cStack_138.U() - cStack_130.U()) * local_7c[bspTrans->field_0xc0[4]]));

        sp70 = field_0x5c.mCenter + cStack_140.Xyz();
        field_0x5c.mEye += (sp70 - field_0x5c.mEye) * bspTrans->mCushion;
        field_0x5c.mFovy += bspTrans->mCushion * ((bspTrans->field_0x90 + (bspTrans->field_0xac - bspTrans->field_0x90) * local_7c[bspTrans->field_0xc0[5]]) - field_0x5c.mFovy);
        field_0x5c.mDirection.Val(field_0x5c.mEye - field_0x5c.mCenter);
        return 0;
    } else {
        return 1;
    }
}

/* 80097694-8009769C 091FD4 0008+00 0/0 1/0 0/0 .text            portalWarpEvCamera__9dCamera_cFv */
bool dCamera_c::portalWarpEvCamera() {
    return true;
}

/* 8009771C-80097738 09205C 001C+00 11/11 22/22 0/0 .text attentionPos__9dCamera_cFP10fopAc_ac_c */
cXyz dCamera_c::attentionPos(fopAc_ac_c* a_this) {
    return a_this->attention_info.position;
}

/* 80097738-8009775C 092078 0024+00 10/10 10/10 0/0 .text directionOf__9dCamera_cFP10fopAc_ac_c */
cSAngle dCamera_c::directionOf(fopAc_ac_c* a_this) {
    return a_this->shape_angle.y;
}

/* 8009775C-80097778 09209C 001C+00 9/9 20/20 0/0 .text positionOf__9dCamera_cFP10fopAc_ac_c */
cXyz dCamera_c::positionOf(fopAc_ac_c* a_this) {
    return a_this->current.pos;
}

/* 8009778C-800977A8 0920CC 001C+00 1/1 2/2 0/0 .text            eyePos__9dCamera_cFP10fopAc_ac_c */
cXyz dCamera_c::eyePos(fopAc_ac_c* a_this) {
    return a_this->eyePos;
}

/* 80097810-8009784C 092150 003C+00 1/1 0/0 0/0 .text
 * __dt__Q29dCamera_c26@class$5983d_ev_camera_cppFv             */
void func_80097810() {
    // NONMATCHING
    return;
}

/* 8009784C-80097850 09218C 0004+00 1/1 0/0 0/0 .text
 * __ct__Q29dCamera_c26@class$5983d_ev_camera_cppFv             */
void func_8009784C() {
    /* empty function */
}
