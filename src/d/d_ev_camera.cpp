//
// Generated By: dol2asm
// Translation Unit: d/d_ev_camera
//

#include "d/d_ev_camera.h"
#include "d/d_debug_viewer.h"
#include "dol2asm.h"
#include "d/d_demo.h"
#include "m_Do/m_Do_controller_pad.h"
#include "d/actor/d_a_midna.h"

//
// Forward References:
//

extern "C" static bool func_800889F8(int);
extern "C" void StartEventCamera__9dCamera_cFiie();
extern "C" void EndEventCamera__9dCamera_cFi();
extern "C" void searchEventArgData__9dCamera_cFPc();
extern "C" void getEvIntData__9dCamera_cFPiPc();
extern "C" void getEvFloatData__9dCamera_cFPfPc();
extern "C" void getEvFloatListData__9dCamera_cFPPfPc();
extern "C" void getEvXyzListData__9dCamera_cFPP4cXyzPc();
extern "C" void getEvStringPntData__9dCamera_cFPc();
extern "C" void getEvIntData__9dCamera_cFPiPci();
extern "C" void getEvFloatData__9dCamera_cFPfPcf();
extern "C" void getEvXyzData__9dCamera_cFP4cXyzPc4cXyz();
extern "C" void getEvStringData__9dCamera_cFPcPcPc();
extern "C" void getEvStringPntData__9dCamera_cFPcPc();
extern "C" void getEvActor__9dCamera_cFPc();
extern "C" void getEvActor__9dCamera_cFPcPc();
extern "C" void pauseEvCamera__9dCamera_cFv();
extern "C" void fixedFrameEvCamera__9dCamera_cFv();
extern "C" void stokerEvCamera__9dCamera_cFv();
extern "C" void rollingEvCamera__9dCamera_cFv();
extern "C" void fixedPositionEvCamera__9dCamera_cFv();
extern "C" void uniformTransEvCamera__9dCamera_cFv();
extern "C" void uniformBrakeEvCamera__9dCamera_cFv();
extern "C" void uniformAcceleEvCamera__9dCamera_cFv();
extern "C" void transEvCamera__9dCamera_cFi();
extern "C" static bool func_8008E750(char);
extern "C" void __as__7cSGlobeFRC7cSGlobe();
extern "C" void abs__4cXyzCFv();
extern "C" void U__7cSGlobeFRC7cSAngle();
extern "C" void __ami__4cXyzFRC3Vec();
extern "C" void __apl__4cXyzFRC3Vec();
extern "C" void watchActorEvCamera__9dCamera_cFv();
extern "C" void V__7cSGlobeFRC7cSAngle();
extern "C" static void func_8008FA94();
extern "C" void restorePosEvCamera__9dCamera_cFv();
extern "C" void talktoEvCamera__9dCamera_cFv();
extern "C" void maptoolIdEvCamera__9dCamera_cFv();
extern "C" void styleEvCamera__9dCamera_cFv();
extern "C" void gameOverEvCamera__9dCamera_cFv();
extern "C" void tactEvCamera__9dCamera_cFv();
extern "C" static void dComIfGp_saveCameraPosition__FiP4cXyzP4cXyzfs();
extern "C" bool turnToActorEvCamera__9dCamera_cFv();
extern "C" void stbWaitEvCamera__9dCamera_cFv();
extern "C" void saveEvCamera__9dCamera_cFv();
extern "C" void loadEvCamera__9dCamera_cFv();
extern "C" void useItem0EvCamera__9dCamera_cFv();
extern "C" void useItem1EvCamera__9dCamera_cFv();
extern "C" void getItemEvCamera__9dCamera_cFv();
extern "C" void possessedEvCamera__9dCamera_cFv();
extern "C" void fixedFramesEvCamera__9dCamera_cFv();
extern "C" void bSplineEvCamera__9dCamera_cFv();
extern "C" void twoActor0EvCamera__9dCamera_cFv();
extern "C" void peepHoleEvCamera__9dCamera_cFv();
extern "C" void digHoleEvCamera__9dCamera_cFv();
extern "C" void hintTalkEvCamera__9dCamera_cFv();
extern "C" void bspTransEvCamera__9dCamera_cFv();
extern "C" bool portalWarpEvCamera__9dCamera_cFv();
extern "C" void __sinit_d_ev_camera_cpp();
extern "C" void attentionPos__9dCamera_cFP10fopAc_ac_c();
extern "C" void directionOf__9dCamera_cFP10fopAc_ac_c();
extern "C" void positionOf__9dCamera_cFP10fopAc_ac_c();
extern "C" void setFlag__9dCamera_cFUl();
extern "C" void eyePos__9dCamera_cFP10fopAc_ac_c();
extern "C" void checkNoDraw__9daMidna_cCFv();
extern "C" void checkMidnaRide__9daPy_py_cCFv();
extern "C" void fopAcM_GetID__FPCv();
extern "C" void __as__4cXyzFRC4cXyz();
extern "C" void __ct__4cXyzFRC4cXyz();
extern "C" void func_80097810();
extern "C" void func_8009784C();
extern "C" bool checkCanoeRide__9daPy_py_cCFv();
extern "C" bool checkBoardRide__9daPy_py_cCFv();
extern "C" bool checkSpinnerRide__9daPy_py_cCFv();
extern "C" bool checkBoarRide__9daPy_py_cCFv();
extern "C" void getShadowTalkAtnPos__9daAlink_cFv();
extern "C" extern char const* const d_d_ev_camera__stringBase0;

//
// External References:
//

extern "C" void __dt__4cXyzFv();
extern "C" void mDoLib_project__FP3VecP3Vec();
extern "C" void fopAcIt_Judge__FPFPvPv_PvPv();
extern "C" void fopAcM_searchFromName4Event__FPCcs();
extern "C" void __dt__8cM3dGPlaFv();
extern "C" void fopCamM_GetParam__FP12camera_class();
extern "C" void fpcSch_JudgeForPName__FPvPv();
extern "C" void fpcSch_JudgeByID__FPvPv();
extern "C" void __dt__7cSAngleFv();
extern "C" void __dt__8cM3dGLinFv();
extern "C" void getActiveCamera__14dDemo_object_cFv();
extern "C" void convPId__14dEvt_control_cFUi();
extern "C" void searchMapEventData__14dEvt_control_cFUc();
extern "C" void getMySubstanceP__16dEvent_manager_cFiPCci();
extern "C" void getMySubstanceNum__16dEvent_manager_cFiPCc();
extern "C" void setGoal__16dEvent_manager_cFP4cXyz();
extern "C" void __dt__7cSGlobeFv();
extern "C" void GetTriPla__4cBgSCFRC13cBgS_PolyInfoP8cM3dGPla();
extern "C" void ChkCamera__4dCcSFR4cXyzR4cXyzfP10fopAc_ac_cP10fopAc_ac_cP10fopAc_ac_c();
extern "C" void rationalBezierRatio__8dCamMathFff();
extern "C" void xyzRotateY__8dCamMathFR4cXyz7cSAngle();
extern "C" void xyzHorizontalDistance__8dCamMathFR4cXyzR4cXyz();
extern "C" void SearchStyle__11dCamParam_cFUl();
extern "C" void Init__14d2DBSplinePathFll();
extern "C" void Step__14d2DBSplinePathFv();
extern "C" void Calc__14d2DBSplinePathFP4cXyz();
extern "C" void Calc__14d2DBSplinePathFPf();
extern "C" void GetCameraTypeFromMapToolID__9dCamera_cFll();
extern "C" void pushInfo__9dCamera_cFPQ29dCamera_c10dCamInfo_cs();
extern "C" void relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz();
extern "C" void relationalPos__9dCamera_cFP10fopAc_ac_cP10fopAc_ac_cP4cXyzf();
extern "C" void pointInSight__9dCamera_cFP4cXyz();
extern "C" void lineBGCheck__9dCamera_cFP4cXyzP4cXyzP4cXyzUl();
extern "C" void lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl();
extern "C" void Reset__9dCamera_cFv();
extern "C" void StartBlure__9dCamera_cFiP10fopAc_ac_cff();
extern "C" void SetBlureAlpha__9dCamera_cFf();
extern "C" void SetBlureScale__9dCamera_cFfff();
extern "C" void SetBlurePosition__9dCamera_cFfff();
extern "C" void __pl__4cXyzCFRC3Vec();
extern "C" void __mi__4cXyzCFRC3Vec();
extern "C" void __ml__4cXyzCFf();
extern "C" void norm__4cXyzCFv();
extern "C" void normalize__4cXyzFv();
extern "C" void cM_atan2s__Fff();
extern "C" void cM_rndFX__Ff();
extern "C" void cM3d_Len3dSqPntAndSegLine__FPC8cM3dGLinPC3VecP3VecPf();
extern "C" void __ct__8cM3dGLinFRC4cXyzRC4cXyz();
extern "C" void __ct__7cSAngleFRC7cSAngle();
extern "C" void __ct__7cSAngleFs();
extern "C" void __ct__7cSAngleFf();
extern "C" void Val__7cSAngleFf();
extern "C" void Degree__7cSAngleCFv();
extern "C" void Abs__7cSAngleCFv();
extern "C" void Inv__7cSAngleCFv();
extern "C" void Cos__7cSAngleCFv();
extern "C" void __mi__7cSAngleCFv();
extern "C" void __pl__7cSAngleCFRC7cSAngle();
extern "C" void __mi__7cSAngleCFRC7cSAngle();
extern "C" void __apl__7cSAngleFRC7cSAngle();
extern "C" void __pl__7cSAngleCFs();
extern "C" void __ml__7cSAngleCFf();
extern "C" void __amu__7cSAngleFf();
extern "C" void __pl__FsRC7cSAngle();
extern "C" void __ct__7cSGlobeFRC7cSGlobe();
extern "C" void __ct__7cSGlobeFfRC7cSAngleRC7cSAngle();
extern "C" void __ct__7cSGlobeFRC4cXyz();
extern "C" void Val__7cSGlobeFfRC7cSAngleRC7cSAngle();
extern "C" void Val__7cSGlobeFRC4cXyz();
extern "C" void Xyz__7cSGlobeCFv();
extern "C" void Norm__7cSGlobeCFv();
extern "C" void Invert__7cSGlobeFv();
extern "C" void __dl__FPv();
extern "C" void __register_global_object();
extern "C" void __ptmf_scall();
extern "C" void _savegpr_24();
extern "C" void _savegpr_25();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_24();
extern "C" void _restgpr_25();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" extern void* __vt__8cM3dGPla[3];
extern "C" u8 engine_tbl__9dCamera_c[240];
extern "C" u8 m_cpadInfo__8mDoCPd_c[256];
extern "C" f32 Zero__4cXyz[3];
extern "C" u8 m_object__7dDemo_c[4];
extern "C" extern u8 struct_80450F88[8];
extern "C" u8 m_midnaActor__9daPy_py_c[4];
extern "C" u8 _0__7cSAngle[2 + 2 /* padding */];
extern "C" u8 _90__7cSAngle[2 + 2 /* padding */];

//
// Declarations:
//

/* 800889F8-80088A7C 083338 0084+00 1/1 0/0 0/0 .text isStageEvent__25@unnamed@d_ev_camera_cpp@Fi
 */
static bool func_800889F8(int param_0) {
    dStage_MapEventInfo_c* info = dComIfGp_getStage()->getMapEventInfo();
    if (info != NULL) {
        for (int i = 0; i < info->mCount; i++) {
            if (param_0 == info->mData[i].field_0x4) {
                return true;
            }
        }
    }

    return false;
}

/* 80088A7C-80088BBC 0833BC 0140+00 0/0 15/15 2/2 .text            StartEventCamera__9dCamera_cFiie
 */
int dCamera_c::StartEventCamera(int param_0, int param_1, ...) {
    if (chkFlag(0x20000000)) {
        return 0;
    }

    mEventData.field_0x14 = param_1;
    mEventData.field_0x18 = param_0;

    va_list args;
    va_start(args, param_1);
    for (int i = 0; i < 8; i++) {
        char* param_name = va_arg(args, char*);
        if (param_name != NULL) {
            strcpy(mEventData.mEventParams[i].name, param_name);
            mEventData.mEventParams[i].field_0x10 = va_arg(args, int);
            mEventData.mEventParams[i].value = va_arg(args, int);
        } else {
            mEventData.mEventParams[i].name[0] = 0;
            break;
        }
    }
    va_end(args);

    setFlag(0x20000000);
    mCurCamStyleTimer = 0;
    mEventData.field_0x0 = 0;
    return 1;
}

/* 80088BBC-80088C24 0834FC 0068+00 0/0 3/3 4/4 .text            EndEventCamera__9dCamera_cFi */
int dCamera_c::EndEventCamera(int param_0) {
    if (!chkFlag(0x20000000)) {
        return 0;
    }

    if (mEventData.field_0x14 == -1 || mEventData.field_0x14 == param_0) {
        clrFlag(0x20000000);
        mEventData.field_0x0 = 1;

        if (dComIfGp_getEvent().runCheck()) {
            dComIfGp_getEventManager().setCameraPlay(2);
        }

        return 1;
    }

    return 0;
}

/* 80088C24-80088CB0 083564 008C+00 10/10 0/0 0/0 .text            searchEventArgData__9dCamera_cFPc
 */
int dCamera_c::searchEventArgData(char* i_eventName) {
    int i;
    bool found_event = false;

    for (i = 0; i < 8; i++) {
        if (*mEventData.mEventParams[i].name == 0) {
            break;
        }

        if (strcmp(mEventData.mEventParams[i].name, i_eventName) == 0) {
            found_event = true;
            break;
        }
    }

    return found_event ? i : -1;
}

/* 80088CB0-80088D90 0835F0 00E0+00 3/3 1/1 0/0 .text            getEvIntData__9dCamera_cFPiPc */
bool dCamera_c::getEvIntData(int* i_data, char* i_event) {
    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            return 0;
        }

        if (mEventData.mEventParams[index].field_0x10 < 0) {
            *i_data = mEventData.mEventParams[index].value;
        } else {
            *i_data = *(int*)mEventData.mEventParams[index].value;
        }
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event) != 0) {
        *i_data = *dComIfGp_evmng_getMyIntegerP(mEventData.field_0x4, i_event);
    } else {
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: (int) not found\n", i_event);
        }
#endif

        mEventData.field_0x10 = 1;
        return 0;
    }
#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %d\n", i_event, *i_data);
    }
#endif

    return 1;
}

/* 80088D90-80088E58 0836D0 00C8+00 0/0 1/1 0/0 .text            getEvFloatData__9dCamera_cFPfPc */
bool dCamera_c::getEvFloatData(f32* i_data, char* i_event) {
    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            return 0;
        }

        *i_data = *(f32*)mEventData.mEventParams[index].value;
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event) != 0) {
        *i_data = *dComIfGp_evmng_getMyFloatP(mEventData.field_0x4, i_event);
    } else {
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: (float) not found\n", i_event);
        }
#endif

        mEventData.field_0x10 = 1;
        return 0;
    }
#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %f\n", i_event, *i_data);
    }
#endif

    return 1;
}

/* 80088E58-80088F1C 083798 00C4+00 4/4 0/0 0/0 .text getEvFloatListData__9dCamera_cFPPfPc */
int dCamera_c::getEvFloatListData(f32** i_data, char* i_event) {
    int num = 0;

    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            return 0;
        }

        *i_data = (f32*)mEventData.mEventParams[index].value;
        num = mEventData.mEventParams[index].field_0x10;
    } else if (num = dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event)) {
        *i_data = dComIfGp_evmng_getMyFloatP(mEventData.field_0x4, i_event);
    } else {
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: (float[]) not found\n", i_event);
        }
#endif
        mEventData.field_0x10 = 1;
        return 0;
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %f ... [%d]\n", i_event, **i_data, num);
    }
#endif

    return num;
}

/* 80088F1C-80088FE0 08385C 00C4+00 1/1 0/0 0/0 .text getEvXyzListData__9dCamera_cFPP4cXyzPc */
int dCamera_c::getEvXyzListData(cXyz** i_data, char* i_event) {
    int num = 0;

    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            return 0;
        }

        *i_data = (cXyz*)mEventData.mEventParams[index].value;
        return mEventData.mEventParams[index].field_0x10;
    } else if (num = dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event)) {
        *i_data = dComIfGp_evmng_getMyXyzP(mEventData.field_0x4, i_event);
    } else {
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: (xyz[]) not found\n", i_event);
        }
#endif
        mEventData.field_0x10 = 1;
        return 0;
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %f %f %f ... [%d]\n", i_event, (*i_data)->x, (*i_data)->y, (*i_data)->z, num);
    }
#endif

    return num;
}

/* 80088FE0-8008908C 083920 00AC+00 1/1 0/0 0/0 .text            getEvStringPntData__9dCamera_cFPc
 */
char* dCamera_c::getEvStringPntData(char* i_event) {
    char* string = NULL;

    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            return 0;
        }

        string = (char*)mEventData.mEventParams[index].value;
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event)) {
        string = dComIfGp_evmng_getMyStringP(mEventData.field_0x4, i_event);
    } else {
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: (string) not found\n", i_event);
        }
#endif
        mEventData.field_0x10 = 1;
        return 0;
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %s\n", i_event, string);
    }
#endif

    return string;
}

/* 8008908C-80089154 0839CC 00C8+00 20/20 5/5 0/0 .text            getEvIntData__9dCamera_cFPiPci */
bool dCamera_c::getEvIntData(int* i_data, char* i_event, int param_2) {
    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            *i_data = param_2;
        } else {
            *i_data = *(int*)mEventData.mEventParams[index].value;
        }
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event) != 0) {
        *i_data = *dComIfGp_evmng_getMyIntegerP(mEventData.field_0x4, i_event);
    } else {
        *i_data = param_2;
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: %d (d)\n", i_event, *i_data);
        }
#endif

        return 0;
    }
#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %d\n", i_event, *i_data);
    }
#endif

    return 1;
}

/* 80089154-8008922C 083A94 00D8+00 11/11 1/1 0/0 .text            getEvFloatData__9dCamera_cFPfPcf
 */
bool dCamera_c::getEvFloatData(f32* i_data, char* i_event, f32 param_2) {
    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            *i_data = param_2;
        } else {
            *i_data = *(f32*)mEventData.mEventParams[index].value;
        }
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event) != 0) {
        *i_data = *dComIfGp_evmng_getMyFloatP(mEventData.field_0x4, i_event);
    } else {
        *i_data = param_2;
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: %f (d)\n", i_event, *i_data);
        }
#endif
        return 0;
    }
#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %f\n", i_event, *i_data);
    }
#endif

    return 1;
}

/* 8008922C-8008933C 083B6C 0110+00 10/10 0/0 0/0 .text getEvXyzData__9dCamera_cFP4cXyzPc4cXyz */
bool dCamera_c::getEvXyzData(cXyz* i_data, char* i_event, cXyz param_2) {
    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            *i_data = param_2;
        } else {
            *i_data = *(cXyz*)mEventData.mEventParams[index].value;
        }
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event) != 0) {
        *i_data = *dComIfGp_evmng_getMyXyzP(mEventData.field_0x4, i_event);
    } else {
        *i_data = param_2;
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: %f %f %f (d)\n", i_event, i_data->x, i_data->y, i_data->z);
        }
#endif
        return 0;
    }
#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %f %f %f\n", i_event, i_data->x, i_data->y, i_data->z);
    }
#endif

    return 1;
}

/* 8008933C-8008941C 083C7C 00E0+00 7/7 1/1 0/0 .text            getEvStringData__9dCamera_cFPcPcPc
 */
bool dCamera_c::getEvStringData(char* i_data, char* i_event, char* param_2) {
    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            strcpy(i_data, param_2);
        } else {
            strcpy(i_data, (char*)mEventData.mEventParams[index].value);
        }
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event) != 0) {
        strcpy(i_data, dComIfGp_evmng_getMyStringP(mEventData.field_0x4, i_event));
    } else {
        strcpy(i_data, param_2);
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: %s (d)\n", i_event, i_data);
        }
#endif
        return 0;
    }
#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %s\n", i_event, i_data);
    }
#endif

    return 1;
}

/* 8008941C-800894C4 083D5C 00A8+00 1/1 0/0 0/0 .text            getEvStringPntData__9dCamera_cFPcPc
 */
char* dCamera_c::getEvStringPntData(char* i_event, char* param_1) {
    char* string = NULL;

    if (chkFlag(0x20000000)) {
        int index = searchEventArgData(i_event);
        if (index == -1) {
            string = param_1;
        } else {
            string = (char*)mEventData.mEventParams[index].value;
        }
    } else if (dComIfGp_evmng_getMySubstanceNum(mEventData.field_0x4, i_event)) {
        string = dComIfGp_evmng_getMyStringP(mEventData.field_0x4, i_event);
    } else {
        string = param_1;
#if DEBUG
        if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
            OS_REPORT("camera: event: %16s: %s (d)\n", i_event, string);
        }
#endif
        return string;
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        OS_REPORT("camera: event: %16s: %s\n", i_event, string);
    }
#endif

    return string;
}

/* 800894C4-800895F4 083E04 0130+00 7/7 1/1 0/0 .text            getEvActor__9dCamera_cFPc */
fopAc_ac_c* dCamera_c::getEvActor(char* i_event) {
    char* string = getEvStringPntData(i_event);
    if (string == NULL) {
        return NULL;
    }

    fopAc_ac_c* actor;
    if (*(u32*)string == '@PLA') {
        actor = mpPlayerActor;
    } else if (*(u32*)string == '@STA') {
        actor = dComIfGp_event_getPt1();
    } else if (*(u32*)string == '@PAR') {
        actor = dComIfGp_event_getPt2();
    } else if (*(u32*)string == '@TAL') {
        actor = dComIfGp_event_getTalkPartner();
    } else if (*(u32*)string == '@DOO') {
        actor = dComIfGp_event_getDoorPartner();
    } else if (*(u32*)string == '@TAR' || *(u32*)string == '@ITE') {
        actor = dComIfGp_event_getItemPartner();
    } else if (*(u32*)string == 'Link') {
        actor = dComIfGp_getLinkPlayer();
    } else {
        actor = fopAcM_searchFromName4Event(string, -1);
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        if (actor != NULL) {
            char name[16];
            fopAcM_getNameString(actor, name);
            OS_REPORT("camera: event:                   = %s\n", name);
        } else {
            OS_REPORT("camera: event:                   = (Who?)\n");
        }
    }
#endif

    return actor;
}

/* 800895F4-80089730 083F34 013C+00 8/8 1/1 0/0 .text            getEvActor__9dCamera_cFPcPc */
fopAc_ac_c* dCamera_c::getEvActor(char* i_event, char* param_1) {
    char string[16];
    string[0] = 0;
    getEvStringData(string, i_event, param_1);
    char* name_str = string;

    fopAc_ac_c* actor;
    if (*(u32*)string == '@PLA') {
        actor = mpPlayerActor;
    } else if (*(u32*)string == '@STA') {
        actor = dComIfGp_event_getPt1();
    } else if (*(u32*)string == '@PAR') {
        actor = dComIfGp_event_getPt2();
    } else if (*(u32*)string == '@TAL') {
        actor = dComIfGp_event_getTalkPartner();
    } else if (*(u32*)string == '@DOO') {
        actor = dComIfGp_event_getDoorPartner();
    } else if (*(u32*)string == '@TAR' || *(u32*)string == '@ITE') {
        actor = dComIfGp_event_getItemPartner();
    } else if (*(u32*)string == 'Link') {
        actor = dComIfGp_getLinkPlayer();
    } else {
        actor = fopAcM_searchFromName4Event(name_str, -1);
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        if (actor != NULL) {
            char name[16];
            fopAcM_getNameString(actor, name);
            OS_REPORT("camera: event:                   = %s\n", name);
        } else {
            OS_REPORT("camera: event:                   = (Who?)\n");
        }
    }
#endif

    return actor;
}

/* 80089730-800897E8 084070 00B8+00 0/0 3/0 0/0 .text            pauseEvCamera__9dCamera_cFv */
bool dCamera_c::pauseEvCamera() {
    if (mCurCamStyleTimer == 0) {
        Reset();
        field_0x158.field_0x0 = 1;
        mWork.event.field_0x0 = getEvIntData(&mWork.event.field_0x8, "Timer", -1);
        getEvIntData(&mWork.event.field_0x4, "Stay", 0);
    }

    if (mWork.event.field_0x4 != 0) {
        setFlag(1);
    }

    if (mWork.event.field_0x0 && mCurCamStyleTimer < mWork.event.field_0x8) {
        return false;
    }

    return true;
}

/* ############################################################################################## */
/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AAFF = "Eye";
SECTION_DEAD static char const* const stringBase_8037AB03 = "Center";
SECTION_DEAD static char const* const stringBase_8037AB0A = "BasePos";
SECTION_DEAD static char const* const stringBase_8037AB12 = "Fovy";
SECTION_DEAD static char const* const stringBase_8037AB17 = "Bank";
SECTION_DEAD static char const* const stringBase_8037AB1C = "RelUseMask";
SECTION_DEAD static char const* const stringBase_8037AB27 = "oo";
SECTION_DEAD static char const* const stringBase_8037AB2A = "RelActor";
#pragma pop

/* 804253A8-804253B4 0520C8 000C+00 1/1 0/0 0/0 .bss             @4202 */
static u8 lit_4202[12];

/* 804253B4-804253C0 0520D4 000C+00 2/3 0/0 0/0 .bss WolfAdditionVec__25@unnamed@d_ev_camera_cpp@
 */
static u8 data_804253B4[12];

/* 804528B8-804528C0 000EB8 0004+04 16/16 0/0 0/0 .sdata2          @5141 */
SECTION_SDATA2 static f32 lit_5141[1 + 1 /* padding */] = {
    0.0f,
    /* padding */
    0.0f,
};

/* 804528C0-804528C8 000EC0 0008+00 3/3 0/0 0/0 .sdata2          @5142 */
SECTION_SDATA2 static f64 lit_5142 = 0.5;

/* 804528C8-804528D0 000EC8 0008+00 3/3 0/0 0/0 .sdata2          @5143 */
SECTION_SDATA2 static f64 lit_5143 = 3.0;

/* 804528D0-804528D8 000ED0 0008+00 3/3 0/0 0/0 .sdata2          @5144 */
SECTION_SDATA2 static u8 lit_5144[8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/* 804528D8-804528DC 000ED8 0004+00 5/5 0/0 0/0 .sdata2          @5145 */
SECTION_SDATA2 static f32 lit_5145 = 182.04444885253906f;

/* 800897E8-8008A510 084128 0D28+00 0/0 1/0 0/0 .text            fixedFrameEvCamera__9dCamera_cFv */
bool dCamera_c::fixedFrameEvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AB33 = "EyeGap";
SECTION_DEAD static char const* const stringBase_8037AB3A = "CtrGap";
SECTION_DEAD static char const* const stringBase_8037AB41 = "EyeCus";
SECTION_DEAD static char const* const stringBase_8037AB48 = "CtrCus";
SECTION_DEAD static char const* const stringBase_8037AB4F = "Stoker";
SECTION_DEAD static char const* const stringBase_8037AB56 = "@STARTER";
SECTION_DEAD static char const* const stringBase_8037AB5F = "Target";
SECTION_DEAD static char const* const stringBase_8037AB66 = "@PLAYER";
#pragma pop

/* 804528DC-804528E0 000EDC 0004+00 10/10 0/0 0/0 .sdata2          @5346 */
SECTION_SDATA2 static f32 lit_5346 = 1.0f;

/* 8008A510-8008A974 084E50 0464+00 0/0 1/0 0/0 .text            stokerEvCamera__9dCamera_cFv */
bool dCamera_c::stokerEvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AB6E = "TransType";
SECTION_DEAD static char const* const stringBase_8037AB78 = "Roll";
SECTION_DEAD static char const* const stringBase_8037AB7D = "RadiusAdd";
SECTION_DEAD static char const* const stringBase_8037AB87 = "Latitude";
#pragma pop

/* 804528E0-804528E8 000EE0 0004+04 1/1 0/0 0/0 .sdata2          @5844 */
SECTION_SDATA2 static f32 lit_5844[1 + 1 /* padding */] = {
    2.0f,
    /* padding */
    0.0f,
};

/* 804528E8-804528F0 000EE8 0008+00 7/7 0/0 0/0 .sdata2          @5846 */
SECTION_SDATA2 static f64 lit_5846 = 4503599627370496.0 /* cast u32 to float */;

/* 8008A974-8008B9B0 0852B4 103C+00 0/0 1/0 0/0 .text            rollingEvCamera__9dCamera_cFv */
bool dCamera_c::rollingEvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AB90 = "Radius";
SECTION_DEAD static char const* const stringBase_8037AB97 = "StartRadius";
SECTION_DEAD static char const* const stringBase_8037ABA3 = "o";
#pragma pop

/* 804253C0-804253CC 0520E0 000C+00 0/1 0/0 0/0 .bss             @4203 */
#pragma push
#pragma force_active on
static u8 lit_4203[12];
#pragma pop

/* 804253CC-804253D8 0520EC 000C+00 1/2 0/0 0/0 .bss MidnaAdditionVec__25@unnamed@d_ev_camera_cpp@
 */
static u8 data_804253CC[12];

/* 804253D8-804253E4 0520F8 000C+00 1/1 0/0 0/0 .bss             @5852 */
static u8 lit_5852[12];

/* 804253E4-804253F0 052104 000C+00 1/1 0/0 0/0 .bss             DefaultGap$5851 */
static f32 DefaultGap_5851[3];

/* 804528F0-804528F8 000EF0 0004+04 1/1 0/0 0/0 .sdata2          @5959 */
SECTION_SDATA2 static f32 lit_5959[1 + 1 /* padding */] = {
    100000.0f,
    /* padding */
    0.0f,
};

/* 804528F8-80452900 000EF8 0008+00 10/10 0/0 0/0 .sdata2          @5962 */
SECTION_SDATA2 static f64 lit_5962 = 4503601774854144.0 /* cast s32 to float */;

/* 8008B9B0-8008BE2C 0862F0 047C+00 0/0 1/0 0/0 .text            fixedPositionEvCamera__9dCamera_cFv
 */
bool dCamera_c::fixedPositionEvCamera() {
    // NONMATCHING
}

/* 8008BE2C-8008BE50 08676C 0024+00 0/0 1/0 0/0 .text            uniformTransEvCamera__9dCamera_cFv
 */
bool dCamera_c::uniformTransEvCamera() {
    transEvCamera(1);
}

/* 8008BE50-8008BE74 086790 0024+00 0/0 1/0 0/0 .text            uniformBrakeEvCamera__9dCamera_cFv
 */
bool dCamera_c::uniformBrakeEvCamera() {
    transEvCamera(2);
}

/* 8008BE74-8008BE98 0867B4 0024+00 0/0 1/0 0/0 .text            uniformAcceleEvCamera__9dCamera_cFv
 */
bool dCamera_c::uniformAcceleEvCamera() {
    transEvCamera(3);
}

/* ############################################################################################## */
/* 8037A7F0-8037A7FC 006E50 000C+00 1/1 0/0 0/0 .rodata          @3871 */
SECTION_RODATA static u8 const lit_3871[12] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037A7F0, &lit_3871);

/* 8037A7FC-8037A80C 006E5C 0010+00 0/1 0/0 0/0 .rodata          @5984 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_5984[16] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037A7FC, &lit_5984);
#pragma pop

/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037ABA5 = "BSpCurve";
SECTION_DEAD static char const* const stringBase_8037ABAE = "BSpPoints";
SECTION_DEAD static char const* const stringBase_8037ABB8 = "EndSlot";
SECTION_DEAD static char const* const stringBase_8037ABC0 = "StartSlot";
SECTION_DEAD static char const* const stringBase_8037ABCA = "StartEye";
SECTION_DEAD static char const* const stringBase_8037ABD3 = "StartCenter";
SECTION_DEAD static char const* const stringBase_8037ABDF = "StartFovy";
SECTION_DEAD static char const* const stringBase_8037ABE9 = "StartBank";
SECTION_DEAD static char const* const stringBase_8037ABF3 = "--oo";
SECTION_DEAD static char const* const stringBase_8037ABF8 = "Cushion";
#pragma pop

/* 80452900-80452904 000F00 0004+00 1/1 0/0 0/0 .sdata2          @6682 */
SECTION_SDATA2 static f32 lit_6682 = 360.0f;

/* 80452904-80452908 000F04 0004+00 1/1 0/0 0/0 .sdata2          @6683 */
SECTION_SDATA2 static f32 lit_6683 = -360.0f;

/* 8008BE98-8008E750 0867D8 28B8+00 3/3 0/0 0/0 .text            transEvCamera__9dCamera_cFi */
void dCamera_c::transEvCamera(int param_0) {
    // NONMATCHING
}

/* 8008E750-8008E774 089090 0024+00 1/1 0/0 0/0 .text isRelChar__25@unnamed@d_ev_camera_cpp@Fc */
static bool func_8008E750(char param_0) {
    return param_0 != '-' && param_0 != 'x';
}

/* ############################################################################################## */
/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AC00 = "NearDist";
SECTION_DEAD static char const* const stringBase_8037AC09 = "ZoomDist";
SECTION_DEAD static char const* const stringBase_8037AC12 = "ZoomVAngle";
SECTION_DEAD static char const* const stringBase_8037AC1D = "FarDist";
SECTION_DEAD static char const* const stringBase_8037AC25 = "NearTimer";
SECTION_DEAD static char const* const stringBase_8037AC2F = "FarTimer";
SECTION_DEAD static char const* const stringBase_8037AC38 = "FrontAngle";
SECTION_DEAD static char const* const stringBase_8037AC43 = "Blure";
#pragma pop

/* 804253F0-804253FC 052110 000C+00 1/1 0/0 0/0 .bss             @6756 */
static u8 lit_6756[12];

/* 804253FC-80425408 05211C 000C+00 1/1 0/0 0/0 .bss             DefaultGap$6755 */
static u8 DefaultGap_6755[12];

/* 80452908-8045290C 000F08 0004+00 2/2 0/0 0/0 .sdata2          @7334 */
SECTION_SDATA2 static f32 lit_7334 = 750.0f;

/* 8045290C-80452910 000F0C 0004+00 1/1 0/0 0/0 .sdata2          @7335 */
SECTION_SDATA2 static f32 lit_7335 = 400.0f;

/* 80452910-80452914 000F10 0004+00 2/2 0/0 0/0 .sdata2          @7336 */
SECTION_SDATA2 static f32 lit_7336 = 1500.0f;

/* 80452914-80452918 000F14 0004+00 1/1 0/0 0/0 .sdata2          @7337 */
SECTION_SDATA2 static f32 lit_7337 = 62.0f;

/* 80452918-8045291C 000F18 0004+00 1/1 0/0 0/0 .sdata2          @7338 */
SECTION_SDATA2 static f32 lit_7338 = 179.0f;

/* 8045291C-80452920 000F1C 0004+00 6/6 0/0 0/0 .sdata2          @7339 */
SECTION_SDATA2 static f32 lit_7339 = 10.0f;

/* 80452920-80452924 000F20 0004+00 4/4 0/0 0/0 .sdata2          @7340 */
SECTION_SDATA2 static f32 lit_7340 = 5.0f;

/* 80452924-80452928 000F24 0004+00 4/4 0/0 0/0 .sdata2          @7341 */
SECTION_SDATA2 static f32 lit_7341 = -5.0f;

/* 80452928-8045292C 000F28 0004+00 5/5 0/0 0/0 .sdata2          @7342 */
SECTION_SDATA2 static f32 lit_7342 = 120.0f;

/* 8045292C-80452930 000F2C 0004+00 2/2 0/0 0/0 .sdata2          @7343 */
SECTION_SDATA2 static f32 lit_7343 = -8.0f;

/* 80452930-80452934 000F30 0004+00 2/2 0/0 0/0 .sdata2          @7344 */
SECTION_SDATA2 static f32 lit_7344 = 8.0f;

/* 80452934-80452938 000F34 0004+00 6/6 0/0 0/0 .sdata2          @7345 */
SECTION_SDATA2 static f32 lit_7345 = 70.0f;

/* 80452938-8045293C 000F38 0004+00 1/1 0/0 0/0 .sdata2          @7346 */
SECTION_SDATA2 static f32 lit_7346 = 1.0f / 10.0f;

/* 8045293C-80452940 000F3C 0004+00 6/6 0/0 0/0 .sdata2          @7347 */
SECTION_SDATA2 static f32 lit_7347 = 30.0f;

/* 8008E938-8008FA58 089278 1120+00 0/0 1/0 0/0 .text            watchActorEvCamera__9dCamera_cFv */
bool dCamera_c::watchActorEvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 80452940-80452944 000F40 0004+00 5/5 0/0 0/0 .sdata2          @7357 */
SECTION_SDATA2 static f32 lit_7357 = 15.0f;

/* ############################################################################################## */
/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AC49 = "Dest";
SECTION_DEAD static char const* const stringBase_8037AC4E = "TargetType";
#pragma pop

/* 80425408-80425414 052128 000C+00 1/1 0/0 0/0 .bss             @7364 */
static u8 lit_7364[12];

/* 80425414-80425420 052134 000C+00 1/1 0/0 0/0 .bss             DefaultGap$7363 */
static f32 DefaultGap_7363[3];

/* 8008FAE8-80090174 08A428 068C+00 0/0 1/0 0/0 .text            restorePosEvCamera__9dCamera_cFv */
bool dCamera_c::restorePosEvCamera() {
    // NONMATCHING
}

/* 80090174-80090230 08AAB4 00BC+00 0/0 1/0 0/0 .text            talktoEvCamera__9dCamera_cFv */
bool dCamera_c::talktoEvCamera() {
    dComIfGp_event_getPt1();
    s32 style = mCamTypeData[mEventData.field_0xc].field_0x18[mIsWolf][3];

    if (mCurCamStyleTimer == 0) {
        clrFlag(0x200000);
    }

    if (style < 0) {
        style = mCamParam.SearchStyle('TT01');
    }

#if DEBUG
    if (mCurCamStyleTimer == 0 && mCamSetup.CheckFlag(0x40)) {
        u32 id = mCamParam.Id(style);
        OS_REPORT("camera: event: %16s  = %d (%c%c%c%c)\n", "style", style, (u8)(id >> 0x18), (u8)(id >> 0x10), (u8)(id >> 0x8), (u8)(id));
    }
#endif

    return (this->*engine_tbl[mCamParam.Algorythmn(style)])(style);
}


/* ############################################################################################## */
/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AC59 = "ID";
SECTION_DEAD static char const* const stringBase_8037AC5C = "CameraID";
#pragma pop

/* 80090230-80090478 08AB70 0248+00 0/0 1/0 0/0 .text            maptoolIdEvCamera__9dCamera_cFv */
bool dCamera_c::maptoolIdEvCamera() {
    if (mCurCamStyleTimer == 0) {
        int id;
        getEvIntData(&id, "ID", g_dComIfG_gameInfo.play.getEvent().getMapToolId());

        mEventData.field_0x8 = 0;
        field_0x160 = 0;
        mCurCamStyleTimer = 0;
        mEventData.field_0xec = dEvt_control_c::searchMapEventData(id);
#ifdef DEBUG
        OSReport("%06d: %s: %d: map data ID %d  %x\n", field_0xa8, __FILE__, 2792, id,
                 mEventData.field_0xec);
#endif

        int var_r6 = 0xFF;
        if (mEventData.field_0xec != NULL && mEventData.field_0xec->mType == 0) {
            var_r6 = mEventData.field_0xec->field_0x16;
        }

        getEvIntData(&mEventData.field_0x24, "CameraID", var_r6);
    }

    int temp_r31 = mEventData.field_0x24;
    if (mEventData.field_0xec == NULL || temp_r31 == 0xFF) {
#ifdef DEBUG
        OSReport("%d: %s: %d: ERROR!! no map data!!!\n", field_0xa8, __FILE__, 2805);
#endif
        return true;
    }

    int room_no = dComIfGp_roomControl_getStayNo();
    if (func_800889F8(mEventData.field_0xec->field_0x4)) {
        room_no = -1;
    }

    if (mEventData.field_0xec->mType == 0 && mEventData.field_0xec->field_0xC != 0xFF) {
        if (mEventData.field_0xec->field_0xC & 1) {
            clrFlag(0x200000);
        }

        if (mEventData.field_0xec->field_0xC & 2) {
            field_0x88 = 0;
        }
    }

    mEventData.field_0xc = GetCameraTypeFromMapToolID(temp_r31, room_no);
    bool var_r31 = false;

    if (mEventData.field_0xc != 0xFF) {
        s32 style = mCamTypeData[mEventData.field_0xc].field_0x18[mIsWolf][0];
#ifdef DEBUG
        if (mCurCamStyleTimer == 0) {
            OSReport("type %d mode %d style %d\n", mEventData.field_0xc, 0, style);
        }
#endif
        bool var_r3 = (this->*engine_tbl[mCamParam.Algorythmn(style)])(style);

        if (mEventData.field_0xec->mType == 0) {
            if (mEventData.field_0xec->field_0x14 == 0xFF ||
                mCurCamStyleTimer > mEventData.field_0xec->field_0x14)
            {
                var_r31 = true;
            }
        } else {
            return var_r3;
        }
    } else {
        mEventData.field_0xec = NULL;
        var_r31 = true;
    }

    if (var_r31) {
        if (mEventData.field_0xec->mType == 0 && (mEventData.field_0xec->field_0xC & 0x20)) {
            return mDoCPd_c::getHoldA(mPadID) || mDoCPd_c::getHoldB(mPadID);
        }
        return true;
    }

    return false;
}


/* ############################################################################################## */
/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AC65 = "Name";
SECTION_DEAD static char const* const stringBase_8037AC6A = "FN01";
#pragma pop

/* 80090478-80090514 08ADB8 009C+00 0/0 1/0 0/0 .text            styleEvCamera__9dCamera_cFv */
bool dCamera_c::styleEvCamera() {
    if (mCurCamStyleTimer == 0) {
        mEventData.field_0x8 = 0;
        field_0x160 = 0;
    }

    s32 style = mCamParam.SearchStyle(*(u32*)getEvStringPntData("Name", "FN01"));
    (this->*engine_tbl[mCamParam.Algorythmn(style)])(style);
    return isModeOK();
}

/* ############################################################################################## */
/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AC6F = "Type";
#pragma pop

/* 80452944-80452948 000F44 0004+00 4/4 0/0 0/0 .sdata2          @8178 */
SECTION_SDATA2 static f32 lit_8178 = -45.0f;

/* 80452948-8045294C 000F48 0004+00 2/2 0/0 0/0 .sdata2          @8179 */
SECTION_SDATA2 static f32 lit_8179 = 85.0f;

/* 8045294C-80452950 000F4C 0004+00 4/4 0/0 0/0 .sdata2          @8180 */
SECTION_SDATA2 static f32 lit_8180 = -50.0f;

/* 80452950-80452954 000F50 0004+00 4/4 0/0 0/0 .sdata2          @8181 */
SECTION_SDATA2 static f32 lit_8181 = 165.0f;

/* 80452954-80452958 000F54 0004+00 1/1 0/0 0/0 .sdata2          @8182 */
SECTION_SDATA2 static f32 lit_8182 = 72.0f;

/* 80452958-8045295C 000F58 0004+00 1/1 0/0 0/0 .sdata2          @8183 */
SECTION_SDATA2 static f32 lit_8183 = -64.0f;

/* 8045295C-80452960 000F5C 0004+00 6/6 0/0 0/0 .sdata2          @8184 */
SECTION_SDATA2 static f32 lit_8184 = 60.0f;

/* 80452960-80452964 000F60 0004+00 4/4 0/0 0/0 .sdata2          @8185 */
SECTION_SDATA2 static f32 lit_8185 = -20.0f;

/* 80452964-80452968 000F64 0004+00 4/4 0/0 0/0 .sdata2          @8186 */
SECTION_SDATA2 static f32 lit_8186 = 45.0f;

/* 80452968-8045296C 000F68 0004+00 6/6 0/0 0/0 .sdata2          @8187 */
SECTION_SDATA2 static f32 lit_8187 = 40.0f;

/* 8045296C-80452970 000F6C 0004+00 6/6 0/0 0/0 .sdata2          @8188 */
SECTION_SDATA2 static f32 lit_8188 = -70.0f;

/* 80452970-80452974 000F70 0004+00 3/3 0/0 0/0 .sdata2          @8189 */
SECTION_SDATA2 static f32 lit_8189 = 110.0f;

/* 80452974-80452978 000F74 0004+00 4/4 0/0 0/0 .sdata2          @8190 */
SECTION_SDATA2 static f32 lit_8190 = -10.0f;

/* 80452978-8045297C 000F78 0004+00 2/2 0/0 0/0 .sdata2          @8191 */
SECTION_SDATA2 static f32 lit_8191 = -120.0f;

/* 8045297C-80452980 000F7C 0004+00 3/3 0/0 0/0 .sdata2          @8192 */
SECTION_SDATA2 static f32 lit_8192 = 130.0f;

/* 80452980-80452984 000F80 0004+00 2/2 0/0 0/0 .sdata2          @8193 */
SECTION_SDATA2 static f32 lit_8193 = 35.0f;

/* 80452984-80452988 000F84 0004+00 5/5 0/0 0/0 .sdata2          @8194 */
SECTION_SDATA2 static f32 lit_8194 = 160.0f;

/* 80452988-8045298C 000F88 0004+00 3/3 0/0 0/0 .sdata2          @8195 */
SECTION_SDATA2 static f32 lit_8195 = 105.0f;

/* 8045298C-80452990 000F8C 0004+00 2/2 0/0 0/0 .sdata2          @8196 */
SECTION_SDATA2 static f32 lit_8196 = -65.0f;

/* 80452990-80452994 000F90 0004+00 1/1 0/0 0/0 .sdata2          @8197 */
SECTION_SDATA2 static f32 lit_8197 = 200.0f;

/* 80452994-80452998 000F94 0004+00 3/3 0/0 0/0 .sdata2          @8198 */
SECTION_SDATA2 static f32 lit_8198 = 100.0f;

/* 80452998-8045299C 000F98 0004+00 4/4 0/0 0/0 .sdata2          @8199 */
SECTION_SDATA2 static f32 lit_8199 = -60.0f;

/* 8045299C-804529A0 000F9C 0004+00 3/3 0/0 0/0 .sdata2          @8200 */
SECTION_SDATA2 static f32 lit_8200 = -80.0f;

/* 804529A0-804529A4 000FA0 0004+00 2/2 0/0 0/0 .sdata2          @8201 */
SECTION_SDATA2 static f32 lit_8201 = 25.0f;

/* 804529A4-804529A8 000FA4 0004+00 1/1 0/0 0/0 .sdata2          @8202 */
SECTION_SDATA2 static f32 lit_8202 = 12.0f;

/* 804529A8-804529AC 000FA8 0004+00 1/1 0/0 0/0 .sdata2          @8203 */
SECTION_SDATA2 static f32 lit_8203 = -140.0f;

/* 804529AC-804529B0 000FAC 0004+00 2/2 0/0 0/0 .sdata2          @8204 */
SECTION_SDATA2 static f32 lit_8204 = 190.0f;

/* 804529B0-804529B4 000FB0 0004+00 2/2 0/0 0/0 .sdata2          @8205 */
SECTION_SDATA2 static f32 lit_8205 = -150.0f;

/* 804529B4-804529B8 000FB4 0004+00 5/5 0/0 0/0 .sdata2          @8206 */
SECTION_SDATA2 static f32 lit_8206 = 20.0f;

/* 804529B8-804529BC 000FB8 0004+00 2/2 0/0 0/0 .sdata2          @8207 */
SECTION_SDATA2 static f32 lit_8207 = -75.0f;

/* 804529BC-804529C0 000FBC 0004+00 3/3 0/0 0/0 .sdata2          @8208 */
SECTION_SDATA2 static f32 lit_8208 = 115.0f;

/* 804529C0-804529C4 000FC0 0004+00 3/3 0/0 0/0 .sdata2          @8209 */
SECTION_SDATA2 static f32 lit_8209 = -40.0f;

/* 804529C4-804529C8 000FC4 0004+00 1/1 0/0 0/0 .sdata2          @8210 */
SECTION_SDATA2 static f32 lit_8210 = 135.0f;

/* 804529C8-804529CC 000FC8 0004+00 3/3 0/0 0/0 .sdata2          @8211 */
SECTION_SDATA2 static f32 lit_8211 = 140.0f;

/* 804529CC-804529D0 000FCC 0004+00 3/3 0/0 0/0 .sdata2          @8212 */
SECTION_SDATA2 static f32 lit_8212 = -100.0f;

/* 804529D0-804529D4 000FD0 0004+00 1/1 0/0 0/0 .sdata2          @8213 */
SECTION_SDATA2 static f32 lit_8213 = 112.0f;

/* 804529D4-804529D8 000FD4 0004+00 3/3 0/0 0/0 .sdata2          @8214 */
SECTION_SDATA2 static f32 lit_8214 = 150.0f;

/* 804529D8-804529DC 000FD8 0004+00 3/3 0/0 0/0 .sdata2          @8215 */
SECTION_SDATA2 static f32 lit_8215 = 65.0f;

/* 804529DC-804529E0 000FDC 0004+00 2/2 0/0 0/0 .sdata2          @8216 */
SECTION_SDATA2 static f32 lit_8216 = 180.0f;

/* 804529E0-804529E4 000FE0 0004+00 2/2 0/0 0/0 .sdata2          @8217 */
SECTION_SDATA2 static f32 lit_8217 = -200.0f;

/* 804529E4-804529E8 000FE4 0004+00 7/7 0/0 0/0 .sdata2          @8218 */
SECTION_SDATA2 static f32 lit_8218 = 50.0f;

/* 804529E8-804529EC 000FE8 0004+00 1/1 0/0 0/0 .sdata2          @8219 */
SECTION_SDATA2 static f32 lit_8219 = 230.0f;

/* 804529EC-804529F0 000FEC 0004+00 1/1 0/0 0/0 .sdata2          @8220 */
SECTION_SDATA2 static f32 lit_8220 = 9.0f / 10.0f;

/* 804529F0-804529F4 000FF0 0004+00 2/2 0/0 0/0 .sdata2          @8221 */
SECTION_SDATA2 static f32 lit_8221 = 75.0f;

/* 804529F4-804529F8 000FF4 0004+00 1/1 0/0 0/0 .sdata2          @8222 */
SECTION_SDATA2 static f32 lit_8222 = 0.004999999888241291f;

/* 804529F8-804529FC 000FF8 0004+00 4/4 0/0 0/0 .sdata2          @8223 */
SECTION_SDATA2 static f32 lit_8223 = 55.0f;

/* 804529FC-80452A00 000FFC 0004+00 1/1 0/0 0/0 .sdata2          @8224 */
SECTION_SDATA2 static f32 lit_8224 = 1.0f / 50.0f;

/* 80452A00-80452A04 001000 0004+00 3/3 0/0 0/0 .sdata2          @8225 */
SECTION_SDATA2 static f32 lit_8225 = 350.0f;

/* 80452A04-80452A08 001004 0004+00 2/2 0/0 0/0 .sdata2          @8226 */
SECTION_SDATA2 static f32 lit_8226 = 49.0f / 50.0f;

/* 80090514-80091468 08AE54 0F54+00 0/0 1/0 0/0 .text            gameOverEvCamera__9dCamera_cFv */
bool dCamera_c::gameOverEvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 8037A80C-8037A828 006E6C 001C+00 0/0 0/0 0/0 .rodata          @5985 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_5985[28] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xCC, 0xCC, 0xCD, 0x3F, 0x33,
    0x33, 0x33, 0x3F, 0x66, 0x66, 0x66, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037A80C, &lit_5985);
#pragma pop

/* 8037A828-8037A844 006E88 001C+00 0/0 0/0 0/0 .rodata          @5986 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_5986[28] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0xCC, 0xCC, 0xCD, 0x3E, 0x99,
    0x99, 0x9A, 0x3F, 0x19, 0x99, 0x9A, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037A828, &lit_5986);
#pragma pop

/* 8037A844-8037A858 006EA4 0014+00 0/0 0/0 0/0 .rodata          @5987 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_5987[20] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037A844, &lit_5987);
#pragma pop

/* 8037A858-8037A86C 006EB8 0014+00 0/0 0/0 0/0 .rodata          @5988 */
#pragma push
#pragma force_active on
SECTION_RODATA static u8 const lit_5988[20] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037A858, &lit_5988);
#pragma pop

/* 8037A86C-8037A884 006ECC 0018+00 1/1 0/0 0/0 .rodata          @8236 */
SECTION_RODATA static u8 const lit_8236[24] = {
    0x3F, 0x40, 0x00, 0x00, 0x3E, 0xB3, 0x33, 0x33, 0x3F, 0x4C, 0xCC, 0xCD,
    0x3F, 0x4C, 0xCC, 0xCD, 0x3F, 0x4C, 0xCC, 0xCD, 0x3F, 0x4C, 0xCC, 0xCD,
};
COMPILER_STRIP_GATE(0x8037A86C, &lit_8236);

/* 803AC528-803AC5A0 -00001 0078+00 1/1 0/0 0/0 .data            @8754 */
SECTION_DATA static void* lit_8754[30] = {
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xE68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0x808),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0x8E4),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xA20),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xEC0),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xC68),
    (void*)(((char*)tactEvCamera__9dCamera_cFv) + 0xE68),
};

/* 80452A08-80452A0C 001008 0004+00 1/1 0/0 0/0 .sdata2          @8722 */
SECTION_SDATA2 static f32 lit_8722 = 215.0f;

/* 80452A0C-80452A10 00100C 0004+00 1/1 0/0 0/0 .sdata2          @8723 */
SECTION_SDATA2 static f32 lit_8723 = -26.0f;

/* 80452A10-80452A14 001010 0004+00 2/2 0/0 0/0 .sdata2          @8724 */
SECTION_SDATA2 static f32 lit_8724 = 80.0f;

/* 80452A14-80452A18 001014 0004+00 1/1 0/0 0/0 .sdata2          @8725 */
SECTION_SDATA2 static f32 lit_8725 = -4.0f;

/* 80452A18-80452A1C 001018 0004+00 1/1 0/0 0/0 .sdata2          @8726 */
SECTION_SDATA2 static f32 lit_8726 = 28.0f;

/* 80452A1C-80452A20 00101C 0004+00 1/1 0/0 0/0 .sdata2          @8727 */
SECTION_SDATA2 static f32 lit_8727 = 220.0f;

/* 80452A20-80452A24 001020 0004+00 2/2 0/0 0/0 .sdata2          @8728 */
SECTION_SDATA2 static f32 lit_8728 = -15.0f;

/* 80452A24-80452A28 001024 0004+00 2/2 0/0 0/0 .sdata2          @8729 */
SECTION_SDATA2 static f32 lit_8729 = 240.0f;

/* 80452A28-80452A2C 001028 0004+00 1/1 0/0 0/0 .sdata2          @8730 */
SECTION_SDATA2 static f32 lit_8730 = 380.0f;

/* 80452A2C-80452A30 00102C 0004+00 1/1 0/0 0/0 .sdata2          @8731 */
SECTION_SDATA2 static f32 lit_8731 = 450.0f;

/* 80452A30-80452A34 001030 0004+00 1/1 0/0 0/0 .sdata2          @8732 */
SECTION_SDATA2 static f32 lit_8732 = -235.0f;

/* 80452A34-80452A38 001034 0004+00 1/1 0/0 0/0 .sdata2          @8733 */
SECTION_SDATA2 static f32 lit_8733 = -142.0f;

/* 80452A38-80452A3C 001038 0004+00 1/1 0/0 0/0 .sdata2          @8734 */
SECTION_SDATA2 static f32 lit_8734 = 470.0f;

/* 80452A3C-80452A40 00103C 0004+00 3/3 0/0 0/0 .sdata2          @8735 */
SECTION_SDATA2 static f32 lit_8735 = -260.0f;

/* 80452A40-80452A44 001040 0004+00 1/1 0/0 0/0 .sdata2          @8736 */
SECTION_SDATA2 static f32 lit_8736 = -66.0f;

/* 80452A44-80452A48 001044 0004+00 1/1 0/0 0/0 .sdata2          @8737 */
SECTION_SDATA2 static f32 lit_8737 = 390.0f;

/* 80452A48-80452A4C 001048 0004+00 1/1 0/0 0/0 .sdata2          @8738 */
SECTION_SDATA2 static f32 lit_8738 = 56.0f;

/* 80452A4C-80452A50 00104C 0004+00 1/1 0/0 0/0 .sdata2          @8739 */
SECTION_SDATA2 static f32 lit_8739 = -16.0f;

/* 80452A50-80452A54 001050 0004+00 1/1 0/0 0/0 .sdata2          @8740 */
SECTION_SDATA2 static f32 lit_8740 = 14.0f;

/* 80452A54-80452A58 001054 0004+00 2/2 0/0 0/0 .sdata2          @8741 */
SECTION_SDATA2 static f32 lit_8741 = -18.0f;

/* 80452A58-80452A5C 001058 0004+00 3/3 0/0 0/0 .sdata2          @8742 */
SECTION_SDATA2 static f32 lit_8742 = -12.0f;

/* 80452A5C-80452A60 00105C 0004+00 1/1 0/0 0/0 .sdata2          @8743 */
SECTION_SDATA2 static f32 lit_8743 = -128.0f;

/* 80452A60-80452A64 001060 0004+00 2/2 0/0 0/0 .sdata2          @8744 */
SECTION_SDATA2 static f32 lit_8744 = -28.0f;

/* 80452A64-80452A68 001064 0004+00 1/1 0/0 0/0 .sdata2          @8745 */
SECTION_SDATA2 static f32 lit_8745 = 172.0f;

/* 80452A68-80452A6C 001068 0004+00 1/1 0/0 0/0 .sdata2          @8746 */
SECTION_SDATA2 static f32 lit_8746 = 58.0f;

/* 80452A6C-80452A70 00106C 0004+00 2/2 0/0 0/0 .sdata2          @8747 */
SECTION_SDATA2 static f32 lit_8747 = -25.0f;

/* 80452A70-80452A74 001070 0004+00 1/1 0/0 0/0 .sdata2          @8748 */
SECTION_SDATA2 static f32 lit_8748 = -56.0f;

/* 80452A74-80452A78 001074 0004+00 1/1 0/0 0/0 .sdata2          @8749 */
SECTION_SDATA2 static f32 lit_8749 = -54.0f;

/* 80452A78-80452A7C 001078 0004+00 2/2 0/0 0/0 .sdata2          @8750 */
SECTION_SDATA2 static f32 lit_8750 = 108.0f;

/* 80452A7C-80452A80 00107C 0004+00 1/1 0/0 0/0 .sdata2          @8751 */
SECTION_SDATA2 static f32 lit_8751 = -78.0f;

/* 80452A80-80452A84 001080 0004+00 3/3 0/0 0/0 .sdata2          @8752 */
SECTION_SDATA2 static f32 lit_8752 = -30.0f;

/* 80452A84-80452A88 001084 0004+00 1/1 0/0 0/0 .sdata2          @8753 */
SECTION_SDATA2 static f32 lit_8753 = -160.0f;

/* 80091468-8009236C 08BDA8 0F04+00 1/0 1/0 0/0 .text            tactEvCamera__9dCamera_cFv */
bool dCamera_c::tactEvCamera() {
    // NONMATCHING
}

/* 800923B8-800923C0 08CCF8 0008+00 0/0 1/0 0/0 .text            turnToActorEvCamera__9dCamera_cFv
 */
bool dCamera_c::turnToActorEvCamera() {
    return true;
}

/* 800923C0-800924D0 08CD00 0110+00 0/0 1/0 0/0 .text            stbWaitEvCamera__9dCamera_cFv */
bool dCamera_c::stbWaitEvCamera() {
    dDemo_camera_c* demo_cam = dDemo_c::getCamera();
#if DEBUG
    char* enabled_report = "-----";
#endif

    if (demo_cam != NULL) {
        if (demo_cam->checkEnable(0x40)) {
            field_0x5c.mCenter = demo_cam->getTarget();
#if DEBUG
            enabled_report[0] = 'C';
#endif
        }

        if (demo_cam->checkEnable(0x10)) {
            field_0x5c.mEye = demo_cam->getTrans();
#if DEBUG
            enabled_report[1] = 'E';
#endif
        }

        if (demo_cam->checkEnable(0x4)) {
            field_0x5c.mFovy = demo_cam->getFovy();
#if DEBUG
            enabled_report[2] = 'F';
#endif
        }

        if (demo_cam->checkEnable(0x20)) {
            mUp = demo_cam->getUp();
#if DEBUG
            enabled_report[3] = 'U';
#endif
        }

        if (demo_cam->checkEnable(0x80)) {
            field_0x5c.mBank = cAngle::d2s(-demo_cam->getRoll());
#if DEBUG
            enabled_report[4] = 'B';
#endif
        }

#if DEBUG
        if (mCamSetup.CheckFlag(0x8000)) {
            dDbVw_Report(90, 190, "%s", enabled_report);
        }
#endif

        field_0x5c.mDirection.Val(field_0x5c.mEye - field_0x5c.mCenter);
    }

    return true;
}


/* 800924D0-8009258C 08CE10 00BC+00 0/0 1/0 0/0 .text            saveEvCamera__9dCamera_cFv */
bool dCamera_c::saveEvCamera() {
    int slot;
    getEvIntData(&slot, "Slot", 0);

    if (slot == 9) {
        dComIfGp_saveCameraPosition(0, &field_0x5c.mCenter, &field_0x5c.mEye, field_0x5c.mFovy, field_0x5c.mBank.Val());
    } else {
        pushInfo(&field_0xd0[slot], 1);
    }

    field_0x158.field_0x0 = 1;
    return true;
}

/* ############################################################################################## */
/* 8037A884-8037A89C 006EE4 0018+00 1/1 0/0 0/0 .rodata          @8840 */
SECTION_RODATA static u8 const lit_8840[24] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
    0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037A884, &lit_8840);

/* 8009258C-800929AC 08CECC 0420+00 0/0 1/0 0/0 .text            loadEvCamera__9dCamera_cFv */
bool dCamera_c::loadEvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 8037A89C-8037AA08 006EFC 016C+00 1/1 0/0 0/0 .rodata          @8969 */
SECTION_RODATA static u8 const lit_8969[364] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x42, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x49, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x42, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x42, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x34, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x0A, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x42, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x42, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3C, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
};
COMPILER_STRIP_GATE(0x8037A89C, &lit_8969);

/* 80452A88-80452A8C 001088 0004+00 1/1 0/0 0/0 .sdata2          @9395 */
SECTION_SDATA2 static f32 lit_9395 = 64.0f;

/* 80452A8C-80452A90 00108C 0004+00 1/1 0/0 0/0 .sdata2          @9396 */
SECTION_SDATA2 static f32 lit_9396 = 118.0f;

/* 80452A90-80452A94 001090 0004+00 1/1 0/0 0/0 .sdata2          @9397 */
SECTION_SDATA2 static f32 lit_9397 = -32.0f;

/* 80452A94-80452A98 001094 0004+00 1/1 0/0 0/0 .sdata2          @9398 */
SECTION_SDATA2 static f32 lit_9398 = -52.0f;

/* 80452A98-80452A9C 001098 0004+00 1/1 0/0 0/0 .sdata2          @9399 */
SECTION_SDATA2 static f32 lit_9399 = 34.0f;

/* 80452A9C-80452AA0 00109C 0004+00 1/1 0/0 0/0 .sdata2          @9400 */
SECTION_SDATA2 static f32 lit_9400 = 116.0f;

/* 80452AA0-80452AA4 0010A0 0004+00 1/1 0/0 0/0 .sdata2          @9401 */
SECTION_SDATA2 static f32 lit_9401 = 88.0f;

/* 80452AA4-80452AA8 0010A4 0004+00 1/1 0/0 0/0 .sdata2          @9402 */
SECTION_SDATA2 static f32 lit_9402 = -33.0f;

/* 80452AA8-80452AAC 0010A8 0004+00 1/1 0/0 0/0 .sdata2          @9403 */
SECTION_SDATA2 static f32 lit_9403 = -55.0f;

/* 80452AAC-80452AB0 0010AC 0004+00 1/1 0/0 0/0 .sdata2          @9404 */
SECTION_SDATA2 static f32 lit_9404 = 16.0f;

/* 80452AB0-80452AB4 0010B0 0004+00 1/1 0/0 0/0 .sdata2          @9405 */
SECTION_SDATA2 static f32 lit_9405 = 52.0f;

/* 80452AB4-80452AB8 0010B4 0004+00 3/3 0/0 0/0 .sdata2          @9406 */
SECTION_SDATA2 static f32 lit_9406 = -85.0f;

/* 80452AB8-80452ABC 0010B8 0004+00 1/1 0/0 0/0 .sdata2          @9407 */
SECTION_SDATA2 static f32 lit_9407 = -95.0f;

/* 80452ABC-80452AC0 0010BC 0004+00 1/1 0/0 0/0 .sdata2          @9408 */
SECTION_SDATA2 static f32 lit_9408 = 92.0f;

/* 80452AC0-80452AC4 0010C0 0004+00 1/1 0/0 0/0 .sdata2          @9409 */
SECTION_SDATA2 static f32 lit_9409 = 155.0f;

/* 80452AC4-80452AC8 0010C4 0004+00 2/2 0/0 0/0 .sdata2          @9410 */
SECTION_SDATA2 static f32 lit_9410 = -27.0f;

/* 80452AC8-80452ACC 0010C8 0004+00 1/1 0/0 0/0 .sdata2          @9411 */
SECTION_SDATA2 static f32 lit_9411 = -90.0f;

/* 80452ACC-80452AD0 0010CC 0004+00 1/1 0/0 0/0 .sdata2          @9412 */
SECTION_SDATA2 static f32 lit_9412 = -68.0f;

/* 80452AD0-80452AD4 0010D0 0004+00 1/1 0/0 0/0 .sdata2          @9413 */
SECTION_SDATA2 static f32 lit_9413 = 114.0f;

/* 80452AD4-80452AD8 0010D4 0004+00 1/1 0/0 0/0 .sdata2          @9414 */
SECTION_SDATA2 static f32 lit_9414 = -110.0f;

/* 80452AD8-80452ADC 0010D8 0004+00 1/1 0/0 0/0 .sdata2          @9415 */
SECTION_SDATA2 static f32 lit_9415 = 30.240999221801758f;

/* 80452ADC-80452AE0 0010DC 0004+00 1/1 0/0 0/0 .sdata2          @9416 */
SECTION_SDATA2 static f32 lit_9416 = 12.652999877929688f;

/* 80452AE0-80452AE4 0010E0 0004+00 1/1 0/0 0/0 .sdata2          @9417 */
SECTION_SDATA2 static f32 lit_9417 = 13.949999809265137f;

/* 80452AE4-80452AE8 0010E4 0004+00 1/1 0/0 0/0 .sdata2          @9418 */
SECTION_SDATA2 static f32 lit_9418 = 23.638999938964844f;

/* 80452AE8-80452AEC 0010E8 0004+00 1/1 0/0 0/0 .sdata2          @9419 */
SECTION_SDATA2 static f32 lit_9419 = 96.63600158691406f;

/* 80452AEC-80452AF0 0010EC 0004+00 1/1 0/0 0/0 .sdata2          @9420 */
SECTION_SDATA2 static f32 lit_9420 = 57.31800079345703f;

/* 80452AF0-80452AF4 0010F0 0004+00 1/1 0/0 0/0 .sdata2          @9421 */
SECTION_SDATA2 static f32 lit_9421 = -2.8489999771118164f;

/* 80452AF4-80452AF8 0010F4 0004+00 1/1 0/0 0/0 .sdata2          @9422 */
SECTION_SDATA2 static f32 lit_9422 = 96.63899993896484f;

/* 80452AF8-80452AFC 0010F8 0004+00 1/1 0/0 0/0 .sdata2          @9423 */
SECTION_SDATA2 static f32 lit_9423 = 42.75299835205078f;

/* 80452AFC-80452B00 0010FC 0004+00 2/2 0/0 0/0 .sdata2          @9424 */
SECTION_SDATA2 static f32 lit_9424 = -130.0f;

/* 80452B00-80452B04 001100 0004+00 1/1 0/0 0/0 .sdata2          @9425 */
SECTION_SDATA2 static f32 lit_9425 = -420.0f;

/* 80452B04-80452B08 001104 0004+00 1/1 0/0 0/0 .sdata2          @9426 */
SECTION_SDATA2 static f32 lit_9426 = -400.0f;

/* 80452B08-80452B0C 001108 0004+00 1/1 0/0 0/0 .sdata2          @9427 */
SECTION_SDATA2 static f32 lit_9427 = 95.0f;

/* 80452B0C-80452B10 00110C 0004+00 1/1 0/0 0/0 .sdata2          @9428 */
SECTION_SDATA2 static f32 lit_9428 = -245.0f;

/* 80452B10-80452B14 001110 0004+00 1/1 0/0 0/0 .sdata2          @9429 */
SECTION_SDATA2 static f32 lit_9429 = -58.0f;

/* 80452B14-80452B18 001114 0004+00 1/1 0/0 0/0 .sdata2          @9430 */
SECTION_SDATA2 static f32 lit_9430 = -250.0f;

/* 80452B18-80452B1C 001118 0004+00 1/1 0/0 0/0 .sdata2          @9431 */
SECTION_SDATA2 static f32 lit_9431 = -105.0f;

/* 80452B1C-80452B20 00111C 0004+00 1/1 0/0 0/0 .sdata2          @9432 */
SECTION_SDATA2 static f32 lit_9432 = 1.5f;

/* 80452B20-80452B24 001120 0004+00 1/1 0/0 0/0 .sdata2          @9433 */
SECTION_SDATA2 static f32 lit_9433 = 47.0f;

/* 80452B24-80452B28 001124 0004+00 1/1 0/0 0/0 .sdata2          @9434 */
SECTION_SDATA2 static f32 lit_9434 = 113.0f;

/* 80452B28-80452B2C 001128 0004+00 1/1 0/0 0/0 .sdata2          @9435 */
SECTION_SDATA2 static f32 lit_9435 = 96.0f;

/* 80452B2C-80452B30 00112C 0004+00 1/1 0/0 0/0 .sdata2          @9436 */
SECTION_SDATA2 static f32 lit_9436 = 38.0f;

/* 80452B30-80452B34 001130 0004+00 1/1 0/0 0/0 .sdata2          @9437 */
SECTION_SDATA2 static f32 lit_9437 = 82.0f;

/* 80452B34-80452B38 001134 0004+00 1/1 0/0 0/0 .sdata2          @9438 */
SECTION_SDATA2 static f32 lit_9438 = 340.0f;

/* 80452B38-80452B3C 001138 0004+00 1/1 0/0 0/0 .sdata2          @9439 */
SECTION_SDATA2 static f32 lit_9439 = -115.0f;

/* 80452B3C-80452B40 00113C 0004+00 1/1 0/0 0/0 .sdata2          @9440 */
SECTION_SDATA2 static f32 lit_9440 = 270.0f;

/* 80452B40-80452B44 001140 0004+00 2/2 0/0 0/0 .sdata2          @9441 */
SECTION_SDATA2 static f32 lit_9441 = 300.0f;

/* 800929AC-800937AC 08D2EC 0E00+00 0/0 1/0 0/0 .text            useItem0EvCamera__9dCamera_cFv */
bool dCamera_c::useItem0EvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 8037AA08-8037AA40 007068 0038+00 1/1 0/0 0/0 .rodata          @9468 */
SECTION_RODATA static u8 const lit_9468[56] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x82,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x41, 0xF0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
};
COMPILER_STRIP_GATE(0x8037AA08, &lit_9468);

/* 80452B44-80452B48 001144 0004+00 2/2 0/0 0/0 .sdata2          @9798 */
SECTION_SDATA2 static f32 lit_9798 = 1.0f / 20.0f;

/* 80452B48-80452B4C 001148 0004+00 1/1 0/0 0/0 .sdata2          @9799 */
SECTION_SDATA2 static f32 lit_9799 = 90.0f;

/* 80452B4C-80452B50 00114C 0004+00 1/1 0/0 0/0 .sdata2          @9800 */
SECTION_SDATA2 static f32 lit_9800 = -180.0f;

/* 80452B50-80452B54 001150 0004+00 1/1 0/0 0/0 .sdata2          @9801 */
SECTION_SDATA2 static f32 lit_9801 = 170.0f;

/* 800937AC-80094240 08E0EC 0A94+00 0/0 1/0 0/0 .text            useItem1EvCamera__9dCamera_cFv */
bool dCamera_c::useItem1EvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 8037AA40-8037AAA4 0070A0 0064+00 1/1 0/0 0/0 .rodata          @9811 */
SECTION_RODATA static u8 const lit_9811[100] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x48,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x42, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x11, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x48,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037AA40, &lit_9811);

/* 8037AAA4-8037AABC 007104 0018+00 1/1 0/0 0/0 .rodata          @9812 */
SECTION_RODATA static u8 const lit_9812[24] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0xCC, 0xCC, 0xCD,
    0x3F, 0x33, 0x33, 0x33, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037AAA4, &lit_9812);

/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AC79 = "CurvePoints";
#pragma pop

/* 80452B54-80452B58 001154 0004+00 1/1 0/0 0/0 .sdata2          @10118 */
SECTION_SDATA2 static f32 lit_10118 = 32.0f;

/* 80452B58-80452B5C 001158 0004+00 1/1 0/0 0/0 .sdata2          @10119 */
SECTION_SDATA2 static f32 lit_10119 = 84.0f;

/* 80452B5C-80452B60 00115C 0004+00 1/1 0/0 0/0 .sdata2          @10120 */
SECTION_SDATA2 static f32 lit_10120 = 134.0f;

/* 80452B60-80452B64 001160 0004+00 1/1 0/0 0/0 .sdata2          @10121 */
SECTION_SDATA2 static f32 lit_10121 = 17.0f;

/* 80452B64-80452B68 001164 0004+00 1/1 0/0 0/0 .sdata2          @10122 */
SECTION_SDATA2 static f32 lit_10122 = 128.0f;

/* 80452B68-80452B6C 001168 0004+00 1/1 0/0 0/0 .sdata2          @10123 */
SECTION_SDATA2 static f32 lit_10123 = -62.0f;

/* 80452B6C-80452B70 00116C 0004+00 1/1 0/0 0/0 .sdata2          @10124 */
SECTION_SDATA2 static f32 lit_10124 = -84.0f;

/* 80452B70-80452B74 001170 0004+00 1/1 0/0 0/0 .sdata2          @10125 */
SECTION_SDATA2 static f32 lit_10125 = -164.0f;

/* 80452B74-80452B78 001174 0004+00 1/1 0/0 0/0 .sdata2          @10126 */
SECTION_SDATA2 static f32 lit_10126 = -220.0f;

/* 80094240-80094A70 08EB80 0830+00 0/0 1/0 0/0 .text            getItemEvCamera__9dCamera_cFv */
bool dCamera_c::getItemEvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AC85 = "Longitude";
#pragma pop

/* 80452B78-80452B7C 001178 0004+00 1/1 0/0 0/0 .sdata2          @10278 */
SECTION_SDATA2 static f32 lit_10278 = 0.5f;

/* 80452B7C-80452B80 00117C 0004+00 1/1 0/0 0/0 .sdata2          @10279 */
SECTION_SDATA2 static f32 lit_10279 = 99.0f / 100.0f;

/* 80452B80-80452B84 001180 0004+00 1/1 0/0 0/0 .sdata2          @10280 */
SECTION_SDATA2 static f32 lit_10280 = 63.0f / 100.0f;

/* 80452B84-80452B88 001184 0004+00 1/1 0/0 0/0 .sdata2          @10281 */
SECTION_SDATA2 static f32 lit_10281 = 7.0f / 10.0f;

/* 80452B88-80452B8C 001188 0004+00 1/1 0/0 0/0 .sdata2          @10282 */
SECTION_SDATA2 static f32 lit_10282 = 11.0f / 10.0f;

/* 80452B8C-80452B90 00118C 0004+00 1/1 0/0 0/0 .sdata2          @10283 */
SECTION_SDATA2 static f32 lit_10283 = 9.0f / 100.0f;

/* 80452B90-80452B94 001190 0004+00 1/1 0/0 0/0 .sdata2          @10284 */
SECTION_SDATA2 static f32 lit_10284 = 9.0f / 50.0f;

/* 80094A70-80095010 08F3B0 05A0+00 0/0 1/0 0/0 .text            possessedEvCamera__9dCamera_cFv */
bool dCamera_c::possessedEvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AC8F = "Centers";
SECTION_DEAD static char const* const stringBase_8037AC97 = "Eyes";
SECTION_DEAD static char const* const stringBase_8037AC9C = "Fovys";
SECTION_DEAD static char const* const stringBase_8037ACA2 = "Choice";
#pragma pop

/* 80452B94-80452B98 001194 0004+00 1/1 0/0 0/0 .sdata2          @10437 */
SECTION_SDATA2 static f32 lit_10437 = 1.0f / 100.0f;

/* 80095010-8009544C 08F950 043C+00 0/0 1/0 0/0 .text            fixedFramesEvCamera__9dCamera_cFv
 */
bool dCamera_c::fixedFramesEvCamera() {
    // NONMATCHING
}

/* 8009544C-800956E4 08FD8C 0298+00 0/0 1/0 0/0 .text            bSplineEvCamera__9dCamera_cFv */
bool dCamera_c::bSplineEvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037ACA9 = "Actor1";
SECTION_DEAD static char const* const stringBase_8037ACB0 = "Actor2";
SECTION_DEAD static char const* const stringBase_8037ACB7 = "CtrRatio";
SECTION_DEAD static char const* const stringBase_8037ACC0 = "RadiusMin";
SECTION_DEAD static char const* const stringBase_8037ACCA = "RadiusMax";
SECTION_DEAD static char const* const stringBase_8037ACD4 = "LatitudeMin";
SECTION_DEAD static char const* const stringBase_8037ACE0 = "LatitudeMax";
SECTION_DEAD static char const* const stringBase_8037ACEC = "LongitudeMin";
SECTION_DEAD static char const* const stringBase_8037ACF9 = "LongitudeMax";
SECTION_DEAD static char const* const stringBase_8037AD06 = "LongitudeType";
#pragma pop

/* 80425420-8042542C 052140 000C+00 1/1 0/0 0/0 .bss             @10516 */
static u8 lit_10516[12];

/* 8042542C-80425438 05214C 000C+00 1/1 0/0 0/0 .bss             DefaultGap$10515 */
static f32 DefaultGap_10515[3];

/* 80452B98-80452B9C 001198 0004+00 1/1 0/0 0/0 .sdata2          @10780 */
SECTION_SDATA2 static f32 lit_10780 = -1.0f / 10.0f;

/* 80452B9C-80452BA0 00119C 0004+00 1/1 0/0 0/0 .sdata2          @10781 */
SECTION_SDATA2 static f32 lit_10781 = 10000.0f;

/* 80452BA0-80452BA4 0011A0 0004+00 1/1 0/0 0/0 .sdata2          @10782 */
SECTION_SDATA2 static f32 lit_10782 = 0.25f;

/* 800956E4-80095E7C 090024 0798+00 0/0 1/0 0/0 .text            twoActor0EvCamera__9dCamera_cFv */
bool dCamera_c::twoActor0EvCamera() {
    // NONMATCHING
}

/* 80095E7C-80095FD0 0907BC 0154+00 0/0 1/0 0/0 .text            peepHoleEvCamera__9dCamera_cFv */
bool dCamera_c::peepHoleEvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AD14 = "R_SP01";
#pragma pop

/* 80452BA4-80452BA8 0011A4 0004+00 1/1 0/0 0/0 .sdata2          @11068 */
SECTION_SDATA2 static f32 lit_11068 = 245.0f;

/* 80095FD0-800965AC 090910 05DC+00 0/0 1/0 0/0 .text            digHoleEvCamera__9dCamera_cFv */
bool dCamera_c::digHoleEvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 8037AABC-8037AAE4 00711C 0028+00 1/1 0/0 0/0 .rodata          @11087 */
SECTION_RODATA static u8 const lit_11087[40] = {
    0x42, 0x20, 0x00, 0x00, 0x42, 0x70, 0x00, 0x00, 0x41, 0xC8, 0x00, 0x00, 0x42, 0x48,
    0x00, 0x00, 0x42, 0x96, 0x00, 0x00, 0x42, 0x0C, 0x00, 0x00, 0x41, 0x70, 0x00, 0x00,
    0x42, 0xB4, 0x00, 0x00, 0x42, 0xDC, 0x00, 0x00, 0x43, 0x0C, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037AABC, &lit_11087);

/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AD1B = "Teacher";
SECTION_DEAD static char const* const stringBase_8037AD23 = "Midna";
SECTION_DEAD static char const* const stringBase_8037AD29 = "Student";
SECTION_DEAD static char const* const stringBase_8037AD31 = "CtrGapY";
#pragma pop

/* 80452BA8-80452BAC 0011A8 0004+00 1/1 0/0 0/0 .sdata2          @11415 */
SECTION_SDATA2 static f32 lit_11415 = 280.0f;

/* 80452BAC-80452BB0 0011AC 0004+00 1/1 0/0 0/0 .sdata2          @11416 */
SECTION_SDATA2 static f32 lit_11416 = 4.0f / 5.0f;

/* 80452BB0-80452BB4 0011B0 0004+00 1/1 0/0 0/0 .sdata2          @11417 */
SECTION_SDATA2 static f32 lit_11417 = -1.0f;

/* 80452BB4-80452BB8 0011B4 0004+00 1/1 0/0 0/0 .sdata2          @11418 */
SECTION_SDATA2 static f32 lit_11418 = 1.0f / 5.0f;

/* 80452BB8-80452BBC 0011B8 0004+00 1/1 0/0 0/0 .sdata2          @11419 */
SECTION_SDATA2 static f32 lit_11419 = -2.5f;

/* 80452BBC-80452BC0 0011BC 0004+00 1/1 0/0 0/0 .sdata2          @11420 */
SECTION_SDATA2 static f32 lit_11420 = 4.5f;

/* 80452BC0-80452BC4 0011C0 0004+00 1/1 0/0 0/0 .sdata2          @11421 */
SECTION_SDATA2 static f32 lit_11421 = 0.75f;

/* 80452BC4-80452BC8 0011C4 0004+00 1/1 0/0 0/0 .sdata2          @11422 */
SECTION_SDATA2 static f32 lit_11422 = 2.0f / 5.0f;

/* 800965AC-80096EDC 090EEC 0930+00 0/0 1/0 0/0 .text            hintTalkEvCamera__9dCamera_cFv */
bool dCamera_c::hintTalkEvCamera() {
    // NONMATCHING
}

/* ############################################################################################## */
/* 8037AAE4-8037AAF4 007144 0010+00 1/1 0/0 0/0 .rodata          @11437 */
SECTION_RODATA static u8 const lit_11437[16] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};
COMPILER_STRIP_GATE(0x8037AAE4, &lit_11437);

/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8037AD39 = "Base";
SECTION_DEAD static char const* const stringBase_8037AD3E = "xxxxxx";
SECTION_DEAD static char const* const stringBase_8037AD45 = "Set1";
SECTION_DEAD static char const* const stringBase_8037AD4A = "Use1";
SECTION_DEAD static char const* const stringBase_8037AD4F = "ooxxxx";
SECTION_DEAD static char const* const stringBase_8037AD56 = "Set2";
SECTION_DEAD static char const* const stringBase_8037AD5B = "Use2";
SECTION_DEAD static char const* const stringBase_8037AD60 = "xxooox";
#pragma pop

/* 80096EDC-80097694 09181C 07B8+00 0/0 1/0 0/0 .text            bspTransEvCamera__9dCamera_cFv */
bool dCamera_c::bspTransEvCamera() {
    // NONMATCHING
}

/* 80097694-8009769C 091FD4 0008+00 0/0 1/0 0/0 .text            portalWarpEvCamera__9dCamera_cFv */
bool dCamera_c::portalWarpEvCamera() {
    return true;
}

/* 8009769C-8009771C 091FDC 0080+00 0/0 1/0 0/0 .text            __sinit_d_ev_camera_cpp */
void __sinit_d_ev_camera_cpp(){// NONMATCHING
}

#pragma push
#pragma force_active on
REGISTER_CTORS(0x8009769C, __sinit_d_ev_camera_cpp);
#pragma pop

/* 8009771C-80097738 09205C 001C+00 11/11 22/22 0/0 .text attentionPos__9dCamera_cFP10fopAc_ac_c
 */
cXyz dCamera_c::attentionPos(fopAc_ac_c* param_0) {
    // NONMATCHING
}

/* 80097738-8009775C 092078 0024+00 10/10 10/10 0/0 .text directionOf__9dCamera_cFP10fopAc_ac_c */
// cSAngle dCamera_c::directionOf(fopAc_ac_c* param_0) {
extern "C" void directionOf__9dCamera_cFP10fopAc_ac_c() {
    // NONMATCHING
}

/* 8009775C-80097778 09209C 001C+00 9/9 20/20 0/0 .text positionOf__9dCamera_cFP10fopAc_ac_c */
// void dCamera_c::positionOf(fopAc_ac_c* param_0) {
extern "C" void positionOf__9dCamera_cFP10fopAc_ac_c() {
    // NONMATCHING
}

/* 80097778-8009778C 0920B8 0014+00 1/1 4/4 0/0 .text            setFlag__9dCamera_cFUl */
// void dCamera_c::setFlag(u32 param_0) {
extern "C" void setFlag__9dCamera_cFUl() {
    // NONMATCHING
}

/* 8009778C-800977A8 0920CC 001C+00 1/1 2/2 0/0 .text            eyePos__9dCamera_cFP10fopAc_ac_c */
cXyz dCamera_c::eyePos(fopAc_ac_c* param_0) {
    // NONMATCHING
}

/* 800977A8-800977B4 0920E8 000C+00 1/1 0/0 0/0 .text            checkNoDraw__9daMidna_cCFv */
// BOOL daMidna_c::checkNoDraw() const
extern "C" void checkNoDraw__9daMidna_cCFv() {
    // NONMATCHING
}

/* 800977B4-800977C0 0920F4 000C+00 1/1 1/1 0/0 .text            checkMidnaRide__9daPy_py_cCFv */
// void daPy_py_c::checkMidnaRide() const {
extern "C" void checkMidnaRide__9daPy_py_cCFv() {
    // NONMATCHING
}

/* 800977C0-800977D8 092100 0018+00 1/1 1/1 0/0 .text            fopAcM_GetID__FPCv */
// void fopAcM_GetID(void const* param_0) {
extern "C" void fopAcM_GetID__FPCv() {
    // NONMATCHING
}

/* 800977D8-800977F4 092118 001C+00 5/5 9/9 0/0 .text            __as__4cXyzFRC4cXyz */
// void cXyz::operator=(cXyz const& param_0) {
extern "C" void __as__4cXyzFRC4cXyz() {
    // NONMATCHING
}

/* 800977F4-80097810 092134 001C+00 5/5 9/9 0/0 .text            __ct__4cXyzFRC4cXyz */
// cXyz::cXyz(cXyz const& param_0) {
extern "C" void __ct__4cXyzFRC4cXyz() {
    // NONMATCHING
}

/* 80097810-8009784C 092150 003C+00 1/1 0/0 0/0 .text
 * __dt__Q29dCamera_c26@class$5983d_ev_camera_cppFv             */
void func_80097810() {
    // NONMATCHING
}

/* 8009784C-80097850 09218C 0004+00 1/1 0/0 0/0 .text
 * __ct__Q29dCamera_c26@class$5983d_ev_camera_cppFv             */
void func_8009784C() {
    /* empty function */
}

/* 80097850-80097858 092190 0008+00 0/0 1/0 0/0 .text            checkCanoeRide__9daPy_py_cCFv */
// bool daPy_py_c::checkCanoeRide() const {
extern "C" bool checkCanoeRide__9daPy_py_cCFv() {
    return false;
}

/* 80097858-80097860 092198 0008+00 0/0 1/0 0/0 .text            checkBoardRide__9daPy_py_cCFv */
// bool daPy_py_c::checkBoardRide() const {
extern "C" bool checkBoardRide__9daPy_py_cCFv() {
    return false;
}

/* 80097860-80097868 0921A0 0008+00 0/0 1/0 0/0 .text            checkSpinnerRide__9daPy_py_cCFv */
// bool daPy_py_c::checkSpinnerRide() const {
extern "C" bool checkSpinnerRide__9daPy_py_cCFv() {
    return false;
}

/* 80097868-80097870 0921A8 0008+00 0/0 1/0 0/0 .text            checkBoarRide__9daPy_py_cCFv */
// bool daPy_py_c::checkBoarRide() const {
extern "C" bool checkBoarRide__9daPy_py_cCFv() {
    return false;
}

/* 80097870-80097878 0921B0 0008+00 0/0 1/0 0/0 .text            getShadowTalkAtnPos__9daAlink_cFv
 */
// void daAlink_c::getShadowTalkAtnPos() {
extern "C" void getShadowTalkAtnPos__9daAlink_cFv() {
    // NONMATCHING
}

/* 8037AAF4-8037AAF4 007154 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
