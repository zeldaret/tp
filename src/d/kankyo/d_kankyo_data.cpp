//
// Generated By: dol2asm
// Translation Unit: d/kankyo/d_kankyo_data
//

#include "d/kankyo/d_kankyo_data.h"
#include "d/d_stage.h"
#include "dolphin/types.h"

//
// Types:
//

// Invented name. TODO: this should be renamed and probably moved to the header
// file once l_vr_box_data is looked into more.
struct dKyd_l_vr_box_data_struct {
    u8 data[21];
};

//
// Forward References:
//

//
// Declarations:
//

/* 803A8E98-803A9198 005FB8 0300+00 1/1 0/0 0/0 .data            l_kydata_BloomInf_tbl */
static dkydata_bloomInfo_info_class l_kydata_BloomInf_tbl[BLOOMINFO_MAX] = {
    {BLOOM_SOFT, 0xFF, 0x40, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00},
    {BLOOM_CLEAR, 0x28, 0x46, 0x87, 0xCF, 0xB1, 0x38, 0xD2, 0xFF, 0xFF, 0xFF, 0x60},  // Twilight
    {BLOOM_CLEAR, 0x2D, 0x46, 0x73, 0xCF, 0xB1, 0x38, 0xD2, 0xFF, 0xFF, 0xFF,
     0x60},  // Twilight Weak
    {BLOOM_CLEAR, 0x00, 0x40, 0x30, 0x60, 0xBA, 0xEC, 0xFF, 0xFF, 0xFF, 0xFF, 0x00},  // Senses
    {BLOOM_SOFT, 0x40, 0x50, 0x40, 0x86, 0x83, 0x96, 0xFF, 0xFF, 0xFF, 0xFF,
     0x00},  // Field Normal (Morning 0)
    {BLOOM_SOFT, 0x64, 0x50, 0x50, 0xFF, 0xD7, 0x96, 0xFF, 0xFF, 0xFF, 0xFF,
     0x00},  // Field Normal (Morning 1)
    {BLOOM_SOFT, 0xA0, 0x30, 0xC8, 0x81, 0x77, 0x6F, 0xFF, 0xFF, 0xFF, 0xFF,
     0x00},  // Field Normal (Afternoon)
    {BLOOM_SOFT, 0x64, 0x40, 0x60, 0xFF, 0x60, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
     0x00},  // Field Normal (Evening 0)
    {BLOOM_SOFT, 0x60, 0x5E, 0x60, 0x69, 0x86, 0xA5, 0xFF, 0xFF, 0xFF, 0xFF,
     0x00},  // Field Normal (Evening 1)
    {BLOOM_SOFT, 0x40, 0x60, 0x6E, 0x58, 0xA5, 0x8C, 0xFF, 0xFF, 0xFF, 0xFF,
     0x00},  // Field Normal (Night)
    {BLOOM_CLEAR, 0x23, 0x2F, 0x9B, 0x7D, 0x6E, 0x50, 0xFF, 0xFF, 0xFF, 0xFF,
     0x00},  // Bulblin Camp Fire
    {BLOOM_SOFT, 0x30, 0x40, 0x80, 0x3C, 0xB7, 0xA0, 0xFF, 0xFF, 0xFF, 0xFF,
     0x00},  // Palace of Twilight
    {BLOOM_SOFT, 0x38, 0x5F, 0x82, 0x7D, 0x87, 0x93, 0xFF, 0xFF, 0xFF, 0xFF, 0x00},  // demo28_03
    {BLOOM_SOFT, 0x73, 0x6C, 0xFF, 0xED, 0xFF, 0xCA, 0xFF, 0xFF, 0xFF, 0xFF,
     0x00},  // Golden Bug Glow
    {BLOOM_SOFT, 0x31, 0x30, 0xC8, 0x97, 0xAB, 0xA0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00},  // Cloud Sea
    {BLOOM_CLEAR, 0x28, 0x46, 0x78, 0x42, 0x2E, 0x30, 0xFF, 0x80, 0xFF, 0xFF,
     0x54},  // Zora's Domain Outside (Twilight)
    {BLOOM_CLEAR, 0x28, 0x46, 0x87, 0x96, 0xB4, 0x64, 0xD2, 0xFF, 0xFF, 0xFF,
     0x54},  // Zora's Domain Inside (Twilight)
    {BLOOM_SOFT, 0x28, 0x46, 0x73, 0x78, 0x96, 0xA0, 0x0D, 0x00, 0x00, 0x00, 0x00},  // Senses-like
    {BLOOM_SOFT, 0x00, 0x7D, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF,
     0xFF},  // Sacred Grove Time Travel
    {BLOOM_CLEAR, 0x62, 0x69, 0x80, 0xB2, 0x5F, 0x00, 0xFF, 0xE4, 0xFF, 0xFF, 0x90},  // Sewers
    {BLOOM_SOFT, 0x30, 0x40, 0x59, 0xFF, 0xEF, 0x86, 0xCE, 0xFF, 0xD5, 0x8C,
     0xC8},  // Flashback Scene
    {BLOOM_SOFT, 0x6E, 0x46, 0x9A, 0xFF, 0xD7, 0x06, 0xE0, 0xFF, 0xDC, 0xA7,
     0x49},  // Twilight Gate
    {BLOOM_SOFT, 0x40, 0x60, 0x40, 0x6E, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0xFF,
     0x00},  // Underwater (Normal)
    {BLOOM_CLEAR, 0x80, 0x40, 0x80, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x00},  // Empty
    {BLOOM_CLEAR, 0x80, 0x40, 0x80, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x00},  // Empty
    {BLOOM_SOFT, 0x8C, 0x2D, 0xA0, 0x63, 0x55, 0x49, 0xFF, 0xFF, 0xFF, 0xFF,
     0x00},  // Dungeon Normal Weak
    {BLOOM_SOFT, 0x5F, 0x59, 0x5A, 0x96, 0x91, 0x84, 0xFF, 0xFF, 0xFF, 0xFF,
     0x00},  // Dungeon Normal Strong
    {BLOOM_CLEAR, 0x52, 0x64, 0x3C, 0xFF, 0xC2, 0x70, 0xBA, 0xFF, 0xFF, 0xFF, 0x00},  // Lava
    {BLOOM_CLEAR, 0x8C, 0x2D, 0xA0, 0x63, 0x55, 0x49, 0xFF, 0xFF, 0xFF, 0xFF,
     0x00},  // Goron Mines - No Lava
    {BLOOM_SOFT, 0x46, 0x5A, 0x41, 0x3C, 0x50, 0x46, 0xFF, 0xFA, 0xFF, 0x9B,
     0x78},  // Sacred Grove Past
    {BLOOM_SOFT, 0x2E, 0x60, 0x7D, 0x64, 0x96, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x00},   // Castle
    {BLOOM_CLEAR, 0x00, 0x83, 0xFF, 0x72, 0xD1, 0xFF, 0xFF, 0xFF, 0xE2, 0xFE, 0x7D},  // Empty
    {BLOOM_CLEAR, 0x5F, 0x14, 0xB4, 0x50, 0x96, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0x64},  // Empty
    {BLOOM_CLEAR, 0x28, 0x46, 0x87, 0x82, 0xC8, 0xFA, 0xD2, 0xFF, 0xFF, 0xFF, 0x32},  // Empty
    {BLOOM_CLEAR, 0x20, 0x10, 0x50, 0x64, 0x64, 0x32, 0xFF, 0x96, 0xFF, 0xFF, 0x82},  // Empty
    {BLOOM_CLEAR, 0x00, 0x00, 0x30, 0x00, 0xBA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00},  // Empty
    {BLOOM_SOFT, 0x40, 0x50, 0x40, 0x86, 0x83, 0x96, 0xFF, 0xFF, 0xFF, 0xFF, 0x00},   // Empty
    {BLOOM_SOFT, 0x64, 0x50, 0x50, 0xFF, 0xD7, 0x96, 0xFF, 0xFF, 0xFF, 0xFF, 0x00},   // Empty
    {BLOOM_SOFT, 0xA0, 0x30, 0xC8, 0x81, 0x77, 0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00},   // Empty
    {BLOOM_SOFT, 0x64, 0x40, 0x60, 0xFF, 0x60, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00},   // Empty
    {BLOOM_SOFT, 0x30, 0x30, 0x60, 0x6F, 0x69, 0x52, 0xFF, 0xC0, 0xB9, 0xA1,
     0x80},  // Demo: Flashback Scene
    {BLOOM_SOFT, 0x2D, 0x60, 0x87, 0xFF, 0xE0, 0x46, 0xFF, 0xFF, 0x85, 0x79,
     0x60},  // Demo: Fake Twilight
    {BLOOM_CLEAR, 0x00, 0x88, 0x6A, 0x85, 0x3E, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF,
     0x11},  // Demo: demo32_03
    {BLOOM_CLEAR, 0x2E, 0x41, 0x64, 0xF9, 0xE7, 0x7C, 0xD0, 0xFF, 0xDA, 0x9A,
     0xBB},  // Demo: Twilight Flashback Scene
    {BLOOM_CLEAR, 0x00, 0xFF, 0xFF, 0xBE, 0xB9, 0xB4, 0xE6, 0xFF, 0xFF, 0xFF,
     0x00},  // Demo: demo31_20
    {BLOOM_CLEAR, 0x2D, 0x46, 0x50, 0xCF, 0xB1, 0x38, 0xD2, 0xFF, 0xFF, 0xFF,
     0x60},  // Demo: Lava W
    {BLOOM_CLEAR, 0xA0, 0x14, 0x32, 0xE6, 0xFF, 0x96, 0xF3, 0xE6, 0xFF, 0x96, 0x6E},  // Empty
    {BLOOM_CLEAR, 0x52, 0x64, 0x3C, 0xFF, 0xC2, 0x70, 0xBA, 0xFF, 0xFF, 0xFF, 0x00},  // Empty
    {BLOOM_CLEAR, 0x80, 0x40, 0x80, 0xFF, 0xFF, 0xFF, 0xF1, 0xFF, 0xFF, 0xFF, 0x00},  // Empty
    {BLOOM_SOFT, 0x80, 0x40, 0x80, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0x00},   // Empty
    {BLOOM_CLEAR, 0x00, 0x7D, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF},  // Empty
    {BLOOM_CLEAR, 0x62, 0x69, 0x80, 0xB2, 0x5F, 0x00, 0xFF, 0xE4, 0xFF, 0xFF, 0x90},  // Empty
    {BLOOM_SOFT, 0x30, 0x40, 0x59, 0xFF, 0xEF, 0x86, 0xCE, 0xFF, 0xD5, 0x8C, 0xC8},   // Empty
    {BLOOM_SOFT, 0x6E, 0x46, 0x9A, 0xFF, 0xD7, 0x06, 0xE0, 0xFF, 0xDC, 0xA7, 0x49},   // Empty
    {BLOOM_CLEAR, 0x80, 0x40, 0x80, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x00},  // Empty
    {BLOOM_CLEAR, 0x80, 0x40, 0x80, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x00},  // Empty
    {BLOOM_CLEAR, 0x80, 0x40, 0x80, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x00},  // Empty
    {BLOOM_CLEAR, 0x80, 0x40, 0x80, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x00},  // Empty
    {BLOOM_CLEAR, 0x80, 0x40, 0x80, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x00},  // Empty
    {BLOOM_CLEAR, 0x80, 0x40, 0x80, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x00},  // Empty
    {BLOOM_CLEAR, 0x80, 0x40, 0x80, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x00},  // Empty
    {BLOOM_CLEAR, 0x80, 0x40, 0x80, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x00},  // Empty
    {BLOOM_CLEAR, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // Empty
    {BLOOM_CLEAR, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // Empty
};

/* 803A9198-803A92A8 -00001 0110+00 1/1 0/0 0/0 .data            l_darkworld_tbl */
static dKydata_darkworldInfo_c l_darkworld_tbl[34] = {
    {"R_SP30", UNCLEARABLE},   // UNUSED - Unknown Room
    {"T_SP05", TEST},          // UNUSED - E3 2005 Warp Test (Old)
    {"T_SP05A", TEST},         // UNUSED - Ito Warp Test
    {"T_WARP2", TEST},         // UNUSED - Unknown Test
    {"T_IMAI", TEST},          // UNUSED - Imai Shape Check (Level 2)
    {"T_IMAI0", TEST},         // UNUSED - Imai Shape Check (Level 3)
    {"T_TOMI", TEST},          // UNUSED - Tominaga Test 1
    {"T_TOMI", TEST},          // UNUSED - Same as above
    {"T_TOMI", TEST},          // UNUSED - Same as above
    {"T_SASA1", TEST},         // UNUSED - Sasaki Test 1
    {"F_SP105", FARON},        // UNUSED - L1 Forest Field
    {"F_SP05", TEST},          // UNUSED - Statue Forest
    {"R_SP107", LANAYRU},      // Castle Sewers/Rooftops/Tower
    {"F_SP108", FARON},        // Faron Woods
    {"R_SP108", FARON},        // Coro's Lantern Shop
    {"TEST11", TEST},          // UNUSED - Local Map C
    {"F_SP109", ELDIN},        // Kakariko Village
    {"F_SP110", ELDIN},        // Death Mountain
    {"R_SP109", ELDIN},        // Kakariko Interiors
    {"F_SP111", ELDIN},        // Kakariko Graveyard
    {"F_SP112", LANAYRU},      // Zora's River
    {"F_SP113", LANAYRU},      // Zora's Domain
    {"F_SP115", LANAYRU},      // Lake Hylia
    {"F_SP116", LANAYRU},      // Hyrule Castle Town
    {"F_SP122", LANAYRU},      // Castle Town Gates
    {"F_SP121", ELDIN},        // Hyrule Field
    {"F_SP126", LANAYRU},      // Upper Zora's River
    {"R_SP209", ELDIN},        // Sanctuary Basement
    {"R_SP116", LANAYRU},      // Hyrule Castle Town Interiors
    {"D_MN08", UNCLEARABLE},   // Palace of Twilight
    {"D_MN08B", UNCLEARABLE},  // Palace of Twilight Miniboss A
    {"D_MN08C", UNCLEARABLE},  // Palace of Twilight Miniboss B
    {"D_MN08A", UNCLEARABLE},  // Palace of Twilight Throne Room
    {"D_SB10", FARON},         // Faron Woods Cave
};

/* 803A92A8-803A93C8 -00001 0120+00 1/1 0/0 0/0 .data            l_light_size_tbl */
static dKydata_lightsizeInfo_c l_light_size_tbl[36] = {
    {"R_SP01", 0},   // Ordon Interiors
    {"R_SP108", 0},  // Coro's Lantern Shop
    {"F_SP109", 2},  // Kakariko Village
    {"F_SP110", 2},  // Death Mountain
    {"R_SP109", 0},  // Kakariko Interiors
    {"R_SP209", 0},  // Sanctuary Basement
    {"R_SP128", 0},  // Impaz's House
    {"F_SP114", 2},  // Snowpeak
    {"F_SP115", 2},  // Lake Hylia
    {"F_SP121", 3},  // Hyrule Field
    {"F_SP102", 3},  // Bridge of Eldin Battle
    {"F_SP122", 3},  // Castle Town Gates
    {"F_SP123", 3},  // Great Bridge of Hylia Battle
    {"R_SP116", 0},  // Hyrule Castle Town Interiors
    {"R_SP160", 0},  // Hyrule Castle Town Shops
    {"R_SP161", 0},  // STAR Tent
    {"F_SP118", 2},  // Sanctuary Basement
    {"F_SP124", 3},  // Gerudo Desert
    {"F_SP125", 2},  // Mirror Chamber
    {"R_SP127", 0},  // Hena's Cabin
    {"D_MN01A", 2},  // Lakebed Temple Boss
    {"D_MN10A", 2},  // Arbiter's Grounds Boss
    {"D_MN06A", 2},  // Temple of Time Boss
    {"D_MN07A", 2},  // City in the Sky Boss
    {"D_MN08", 2},   // Palace of Twilight
    {"D_MN08A", 2},  // Palace of Twilight Throne Room
    {"D_MN08B", 2},  // Palace of Twilight Miniboss A
    {"D_MN08C", 2},  // Palace of Twilight Miniboss B
    {"D_MN08D", 2},  // Palace of Twilight Boss
    {"D_MN09", 2},   // Hyrule Castle
    {"D_MN09B", 3},  // Final Battle (Hyrule Field)
    {"D_MN09C", 3},  // Hyrule Field (Cutscene)
    {"R_SP300", 2},  // Light Spirits' Chamber
    {"D_SB02", 0},   // Kakariko Gorge Lantern Cave
    {"D_SB03", 0},   // Lake Hylia Lantern Cave
    {"D_SB10", 0},   // Faron Woods Cave
};

/* 803A93C8-803A9410 -00001 0048+00 1/1 0/0 0/0 .data            l_light_size_tbl_tw */
static dKydata_lightsizeInfo_c l_light_size_tbl_tw[9] = {
    {"F_SP109", 2},  // Kakariko Village
    {"F_SP110", 2},  // Death Mountain
    {"R_SP209", 2},  // Sanctuary Basement
    {"F_SP113", 0},  // Zora's Domain
    {"F_SP126", 2},  // Upper Zora's River
    {"F_SP115", 2},  // Lake Hylia
    {"F_SP121", 3},  // Hyrule Field
    {"F_SP102", 3},  // Bridge of Eldin Battle
    {"F_SP122", 3},  // Castle Town Gates
};

// Maple color. Used in Fishing Hole. Values are RGB. TODO: struct here?
/* 803A9410-803A9434 006530 0024+00 1/1 0/0 0/0 .data            l_maple_col */
static u8 l_maple_col[36] = {
    // leaf color blend major
    0x56, 0x4B, 0x39,  // spring
    0x37, 0x28, 0x1E,  // summer
    0x6E, 0x32, 0x0F,  // fall
    0x64, 0x64, 0x80,  // winter
    // leaf color blend minor
    0x52, 0x41, 0x66,  // spring
    0x19, 0x0F, 0x00,  // summer
    0x46, 0x00, 0x0F,  // fall
    0x64, 0x64, 0x80,  // winter
    // leaf color base
    0x65, 0x5E, 0x69,  // spring
    0x0E, 0x23, 0x0B,  // summer
    0x28, 0x14, 0x05,  // fall
    0x5A, 0x5A, 0x6E,  // winter
};

/* 803A9434-803A94B8 006554 0084+00 1/1 0/0 0/0 .data            l_time_attribute */
static dKyd_lightSchejule l_time_attribute[11] = {
    {0.0f, 75.0f, 5, 5},    {75.0f, 90.0f, 5, 0},   {90.0f, 105.0f, 0, 1},  {105.0f, 105.0f, 1, 1},
    {105.0f, 135.0f, 1, 2}, {135.0f, 240.0f, 2, 2}, {240.0f, 255.0f, 2, 3}, {255.0f, 270.0f, 3, 3},
    {270.0f, 285.0f, 3, 4}, {285.0f, 300.0f, 4, 5}, {300.0f, 360.0f, 5, 5},
};

/* 803A94B8-803A953C 0065D8 0084+00 1/1 0/0 0/0 .data            l_time_attribute_boss */
static dKyd_lightSchejule l_time_attribute_boss[11] = {
    {0.0f, 45.0f, 0, 1},    {45.0f, 90.0f, 1, 2},   {90.0f, 180.0f, 2, 3},  {180.0f, 225.0f, 3, 4},
    {225.0f, 270.0f, 4, 5}, {270.0f, 360.0f, 5, 0}, {360.0f, 360.0f, 5, 5}, {360.0f, 360.0f, 5, 5},
    {360.0f, 360.0f, 5, 5}, {360.0f, 360.0f, 5, 5}, {360.0f, 360.0f, 5, 5},
};

/* 803A953C-803A987C 00665C 0340+00 1/1 0/0 0/0 .data            l_field_data */
static stage_palette_info_class l_field_data[16] = {
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40,0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
    {
        {0x40, 0x40, 0x40},
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
            {0x40, 0x40, 0x40},
        },
        {0x40, 0x40, 0x40},
        -5000.0f,
        30000.0f,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    },
};

/* 800569DC-800569E8 05131C 000C+00 0/0 1/1 0/0 .text            dKyd_dmpalet_getp__Fv */
void* dKyd_dmpalet_getp() {
    return l_field_data;
}

/* ############################################################################################## */
/* 803A987C-803A9894 00699C 0018+00 1/1 0/0 0/0 .data            l_pselect_default */
static stage_pselect_info_class l_pselect_default[2] = {
    {
        {0x00, 0x00, 0x01, 0x02, 0x02, 0x03, 0x00, 0x00},
        0.0f,
    },
    {
        {0x04, 0x04, 0x05, 0x06, 0x06, 0x07, 0x00, 0x00},
        0.0f,
    },
};

/* 800569E8-800569F4 051328 000C+00 0/0 1/1 0/0 .text            dKyd_dmpselect_getp__Fv */
void* dKyd_dmpselect_getp() {
    return l_pselect_default;
}

/* ############################################################################################## */
/* 803A9894-803A9918 0069B4 0082+02 1/1 0/0 0/0 .data            l_envr_default */
static stage_envr_info_class l_envr_default[2] = {
    {
        {0x00, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    },
    {
        {0x04, 0x05, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    },
};

/* 800569F4-80056A00 051334 000C+00 0/0 1/1 0/0 .text            dKyd_dmenvr_getp__Fv */
void* dKyd_dmenvr_getp() {
    return l_envr_default;
}

/* ############################################################################################## */
/* 803A9918-803A9A94 006A38 017A+02 1/1 0/0 0/0 .data            l_vr_box_data */
static dKyd_l_vr_box_data_struct l_vr_box_data[18] = {
    {{0x2F, 0x1A, 0x07, 0x44, 0x1E, 0x10, 0xF5, 0xA5, 0x6C, 0x9A, 0x5C,
      0x3B, 0xFF, 0x44, 0x1E, 0x10, 0xA3, 0xFF, 0x5B, 0x49, 0x72}},
    {{0x39, 0x5B, 0xA7, 0xFF, 0xF7, 0xF7, 0x83, 0x7E, 0x7D, 0x1D, 0x1E,
      0x20, 0x00, 0xFF, 0xF7, 0xF7, 0xFF, 0xE5, 0xF5, 0xFF, 0xFF}},
    {{0x45, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC6, 0x00, 0x4E, 0xC3, 0xFF}},
    {{0xFF, 0xAD, 0x85, 0xEE, 0x70, 0x27, 0x33, 0x2E, 0x28, 0x9A, 0x5C,
      0x3B, 0xFF, 0xE1, 0x2E, 0x27, 0x86, 0xFF, 0x66, 0x43, 0xFF}},
    {{0x18, 0x1A, 0x1B, 0x3C, 0x30, 0x28, 0x4B, 0x3C, 0x2A, 0x8A, 0x5E,
      0x43, 0xFF, 0x35, 0x1A, 0x10, 0x00, 0xB2, 0x6F, 0x63, 0x2B}},
    {{0x00, 0x00, 0x18, 0x31, 0x18, 0x2F, 0x00, 0x0A, 0x88, 0x50, 0x50,
      0x50, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x61, 0x72, 0x9D, 0x78}},
    {{0x2F, 0x1A, 0x07, 0x44, 0x1E, 0x10, 0xF5, 0xA5, 0x6C, 0x9A, 0x5C,
      0x3B, 0xFF, 0x44, 0x1E, 0x10, 0xA3, 0xFF, 0x5B, 0x49, 0x72}},
    {{0x39, 0x5B, 0xA7, 0xFF, 0xF7, 0xF7, 0x83, 0x7E, 0x7D, 0x1D, 0x1E,
      0x20, 0x00, 0xFF, 0xF7, 0xF7, 0xFF, 0xE5, 0xF5, 0xFF, 0xFF}},
    {{0x45, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC6, 0x00, 0x4E, 0xC3, 0xFF}},
    {{0xFF, 0xAD, 0x85, 0xEE, 0x70, 0x27, 0x33, 0x2E, 0x28, 0x9A, 0x5C,
      0x3B, 0xFF, 0xE1, 0x2E, 0x27, 0x86, 0xFF, 0x66, 0x43, 0xFF}},
    {{0x18, 0x1A, 0x1B, 0x3C, 0x30, 0x28, 0x4B, 0x3C, 0x2A, 0x8A, 0x5E,
      0x43, 0xFF, 0x35, 0x1A, 0x10, 0x00, 0xB2, 0x6F, 0x63, 0x2B}},
    {{0x00, 0x00, 0x18, 0x31, 0x18, 0x2F, 0x00, 0x0A, 0x88, 0x50, 0x50,
      0x50, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x61, 0x72, 0x9D, 0x78}},
    {{0x2F, 0x1A, 0x07, 0x44, 0x1E, 0x10, 0xF5, 0xA5, 0x6C, 0x9A, 0x5C,
      0x3B, 0xFF, 0x44, 0x1E, 0x10, 0xA3, 0xFF, 0x5B, 0x49, 0x72}},
    {{0x39, 0x5B, 0xA7, 0xFF, 0xF7, 0xF7, 0x83, 0x7E, 0x7D, 0x1D, 0x1E,
      0x20, 0x00, 0xFF, 0xF7, 0xF7, 0xFF, 0xE5, 0xF5, 0xFF, 0xFF}},
    {{0x45, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC6, 0x00, 0x4E, 0xC3, 0xFF}},
    {{0xFF, 0xAD, 0x85, 0xEE, 0x70, 0x27, 0x33, 0x2E, 0x28, 0x9A, 0x5C,
      0x3B, 0xFF, 0xE1, 0x2E, 0x27, 0x86, 0xFF, 0x66, 0x43, 0xFF}},
    {{0x18, 0x1A, 0x1B, 0x3C, 0x30, 0x28, 0x4B, 0x3C, 0x2A, 0x8A, 0x5E,
      0x43, 0xFF, 0x35, 0x1A, 0x10, 0x00, 0xB2, 0x6F, 0x63, 0x2B}},
    {{0x00, 0x00, 0x18, 0x31, 0x18, 0x2F, 0x00, 0x0A, 0x88, 0x50, 0x50,
      0x50, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x61, 0x72, 0x9D, 0x78}},
};

/* 80056A00-80056A0C 051340 000C+00 0/0 1/1 0/0 .text            dKyd_dmvrbox_getp__Fv */
void* dKyd_dmvrbox_getp() {
    return l_vr_box_data;
}

/* 80056A0C-80056A18 05134C 000C+00 0/0 1/1 0/0 .text            dKyd_schejule_getp__Fv */
dKyd_lightSchejule* dKyd_schejule_getp() {
    return l_time_attribute;
}

/* 80056A18-80056A24 051358 000C+00 0/0 1/1 0/0 .text            dKyd_schejule_boss_getp__Fv */
dKyd_lightSchejule* dKyd_schejule_boss_getp() {
    return l_time_attribute_boss;
}

/* 803A9A94-803A9AC0 006BB4 0028+04 1/1 0/0 0/0 .data            S_xfog_table_data */
static GXFogAdjTable S_xfog_table_data[2] = {
    {
        {260, 260, 270, 280, 290, 300, 310, 320, 330, 340},
    },
    {
        {250, 260, 280, 320, 350, 400, 480, 550, 600, 800},
    },
};

/* 80056A24-80056A64 051364 0040+00 0/0 2/2 0/0 .text            dKyd_xfog_table_set__FUc */
void dKyd_xfog_table_set(u8 tblIdx) {
    for (int i = 0; i < 10; i++) {
        u16 fogAdjTableEntry = S_xfog_table_data[tblIdx & 0xff].fogVals[i];
        g_env_light.mXFogTbl.fogVals[i] = fogAdjTableEntry;
    }
}

/* 80056A64-80056A70 0513A4 000C+00 0/0 1/1 0/0 .text            dKyd_maple_col_getp__Fv */
void* dKyd_maple_col_getp() {
    return l_maple_col;
}

/* 80056A70-80056A7C 0513B0 000C+00 0/0 4/4 0/0 .text            dKyd_darkworld_tbl_getp__Fv */
dKydata_darkworldInfo_c* dKyd_darkworld_tbl_getp() {
    return l_darkworld_tbl;
}

/* 80056A7C-80056A88 0513BC 000C+00 0/0 1/1 0/0 .text            dKyd_light_size_tbl_getp__Fv */
dKydata_lightsizeInfo_c* dKyd_light_size_tbl_getp() {
    return l_light_size_tbl;
}

/* 80056A88-80056A94 0513C8 000C+00 0/0 1/1 0/0 .text            dKyd_light_tw_size_tbl_getp__Fv */
dKydata_lightsizeInfo_c* dKyd_light_tw_size_tbl_getp() {
    return l_light_size_tbl_tw;
}

/* 80056A94-80056AA8 0513D4 0014+00 0/0 1/1 0/0 .text            dKyd_BloomInf_tbl_getp__Fi */
dkydata_bloomInfo_info_class* dKyd_BloomInf_tbl_getp(int tblIdx) {
    return &l_kydata_BloomInf_tbl[tblIdx];
}

/* 8037A1C0-8037A1C0 006820 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
