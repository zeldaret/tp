//
// Generated By: dol2asm
// Translation Unit: d/bg/d_bg_s_poly_pass_chk
//

#include "d/bg/d_bg_s_poly_pass_chk.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Forward References:
//

extern "C" void __ct__16dBgS_PolyPassChkFv();
extern "C" void __dt__16dBgS_PolyPassChkFv();
extern "C" void SetPassChkInfo__16dBgS_PolyPassChkFR16dBgS_PolyPassChk();
extern "C" void SetObj__16dBgS_PolyPassChkFv();
extern "C" void ClrObj__16dBgS_PolyPassChkFv();
extern "C" void SetCam__16dBgS_PolyPassChkFv();
extern "C" void ClrCam__16dBgS_PolyPassChkFv();
extern "C" void SetLink__16dBgS_PolyPassChkFv();
extern "C" void ClrLink__16dBgS_PolyPassChkFv();
extern "C" void SetArrow__16dBgS_PolyPassChkFv();
extern "C" void SetBomb__16dBgS_PolyPassChkFv();
extern "C" void ClrBomb__16dBgS_PolyPassChkFv();
extern "C" void SetBoomerang__16dBgS_PolyPassChkFv();
extern "C" void SetRope__16dBgS_PolyPassChkFv();
extern "C" void SetUnderwaterRoof__16dBgS_PolyPassChkFv();
extern "C" void SetHorse__16dBgS_PolyPassChkFv();
extern "C" void ChkNoHorse__16dBgS_PolyPassChkFv();
extern "C" void SetStatue__16dBgS_PolyPassChkFv();
extern "C" void ClrStatue__16dBgS_PolyPassChkFv();
extern "C" void SetIronBall__16dBgS_PolyPassChkFv();
extern "C" void ClrIronBall__16dBgS_PolyPassChkFv();
extern "C" void __dt__16cBgS_PolyPassChkFv();

//
// External References:
//

extern "C" void __dl__FPv();

//
// Declarations:
//

/* ############################################################################################## */
/* 803ABA38-803ABA44 008B58 000C+00 2/2 0/0 0/0 .data            __vt__16dBgS_PolyPassChk */
SECTION_DATA extern void* __vt__16dBgS_PolyPassChk[3] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__16dBgS_PolyPassChkFv,
};

/* 803ABA44-803ABA50 008B64 000C+00 3/3 0/0 0/0 .data            __vt__16cBgS_PolyPassChk */
SECTION_DATA extern void* __vt__16cBgS_PolyPassChk[3] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__16cBgS_PolyPassChkFv,
};

dBgS_PolyPassChk::dBgS_PolyPassChk()
    : mObject(false), mCamera(false), mLink(false), mArrow(false), mBomb(false), mBoomerang(false),
      mRope(false), mUnderwaterRoof(false), mHorse(false), mStatue(false), mIronBall(false) {}

/* 80078DB0-80078E0C 0736F0 005C+00 1/0 1/1 0/0 .text            __dt__16dBgS_PolyPassChkFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dBgS_PolyPassChk::~dBgS_PolyPassChk() {
    nofralloc
#include "asm/d/bg/d_bg_s_poly_pass_chk/__dt__16dBgS_PolyPassChkFv.s"
}
#pragma pop

void dBgS_PolyPassChk::SetPassChkInfo(dBgS_PolyPassChk& chk) {
    *this = chk;
}

void dBgS_PolyPassChk::SetObj() {
    mObject = true;
}

void dBgS_PolyPassChk::ClrObj() {
    mObject = false;
}

void dBgS_PolyPassChk::SetCam() {
    mCamera = true;
}

void dBgS_PolyPassChk::ClrCam() {
    mCamera = false;
}

void dBgS_PolyPassChk::SetLink() {
    mLink = true;
}

void dBgS_PolyPassChk::ClrLink() {
    mLink = false;
}

void dBgS_PolyPassChk::SetArrow() {
    mArrow = true;
}

void dBgS_PolyPassChk::SetBomb() {
    mBomb = true;
}

void dBgS_PolyPassChk::ClrBomb() {
    mBomb = false;
}

void dBgS_PolyPassChk::SetBoomerang() {
    mBoomerang = true;
}

void dBgS_PolyPassChk::SetRope() {
    mRope = true;
}

void dBgS_PolyPassChk::SetUnderwaterRoof() {
    mUnderwaterRoof = true;
}

void dBgS_PolyPassChk::SetHorse() {
    mHorse = true;
}

bool dBgS_PolyPassChk::ChkNoHorse() {
    if (ChkObj() || ChkCam() || ChkLink() || ChkArrow() || ChkBomb() || ChkBoomerang() ||
        ChkRope() || ChkUnderwaterRoof()) {
        return true;
    }
    return !ChkHorse();
}

void dBgS_PolyPassChk::SetStatue() {
    mStatue = true;
}

void dBgS_PolyPassChk::ClrStatue() {
    mStatue = false;
}

void dBgS_PolyPassChk::SetIronBall() {
    mIronBall = true;
}

void dBgS_PolyPassChk::ClrIronBall() {
    mIronBall = false;
}

cBgS_PolyPassChk::~cBgS_PolyPassChk() {}
