//
// Generated By: dol2asm
// Translation Unit: JAUSectionHeap
//

#include "JSystem/JAudio2/JAUSectionHeap.h"
#include "JSystem/JAudio2/JASBNKParser.h"
#include "JSystem/JAudio2/JASBankTable.h"
#include "JSystem/JAudio2/JASBasicWaveBank.h"
#include "JSystem/JAudio2/JASCriticalSection.h"
#include "JSystem/JAudio2/JASHeapCtrl.h"
#include "JSystem/JAudio2/JASResArcLoader.h"
#include "JSystem/JAudio2/JASVoiceBank.h"
#include "JSystem/JAudio2/JASWSParser.h"
#include "JSystem/JAudio2/JAUSeqCollection.h"
#include "JSystem/JAudio2/JAUSoundInfo.h"
#include "JSystem/JAudio2/JAUSoundTable.h"
#include "JSystem/JAudio2/JAUStreamFileTable.h"
#include "JSystem/JKernel/JKRSolidHeap.h"
#include "stdlib.h"
#include "dol2asm.h"
#include "dolphin/dvd.h"

namespace {
    class TPushCurrentHeap {
    public:
        TPushCurrentHeap(JKRHeap* heap) { mHeap = JKRSetCurrentHeap(heap); }
        ~TPushCurrentHeap() { JKRSetCurrentHeap(mHeap); }

    private:
        JKRHeap* mHeap;
    };

    class TStreamDataMgr : public JAIStreamDataMgr {
    public:
        TStreamDataMgr(const void* param_0) {
            JAUStreamFileTable stack_14;
            stack_14.init(param_0);
            if (!stack_14.isValid()) {
                field_0x4 = 0;
                field_0x8 = NULL;
                return;
            }
            field_0x4 = stack_14.getNumFiles();
            field_0x8 = new s32[field_0x4];
            if (!field_0x8) {
                field_0x4 = NULL;
                return;
            }
            for (u32 i = 0; i < field_0x4; i++) {
                field_0x8[i] = DVDConvertPathToEntrynum(stack_14.getFilePath(i));
            }
        }
        virtual s32 getStreamFileEntry(JAISoundID id) {
            u32 short_id = id.mId.mAdvancedId.mShortId;
            if (short_id >= field_0x4) {
                return -1;
            }
            return field_0x8[short_id];
        }
        virtual ~TStreamDataMgr() {}

        bool isValid() { return field_0x4; }

        u32 field_0x4;
        s32* field_0x8;
    };
}

/* 802A4EE8-802A4F68 29F828 0080+00 1/1 0/0 0/0 .text __ct__Q210JAUSection12TSectionDataFv */
JAUSection::TSectionData::TSectionData() {
    resetRegisteredWaveBankTables();
    resetRegisteredBankTables();
    mBstDst = NULL;
    mBstnDst = NULL;
    field_0x80 = NULL;
    field_0xa0 = 0;
    field_0x9c = 0;
}

/* 8039B950-8039B950 027FB0 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8039B950 = "index out of range of bitset::reset";
#pragma pop

/* 802A4F68-802A4FE4 29F8A8 007C+00 1/1 0/0 0/0 .text
 * resetRegisteredBankTables__Q210JAUSection12TSectionDataFv    */
void JAUSection::TSectionData::resetRegisteredBankTables() {
    for (u32 i = 0; i < 255; i++) {
        registeredBankTables.reset(i);
    }
}

/* 802A4FE4-802A5060 29F924 007C+00 1/1 0/0 0/0 .text
 * resetRegisteredWaveBankTables__Q210JAUSection12TSectionDataFv */
void JAUSection::TSectionData::resetRegisteredWaveBankTables() {
    for (u32 i = 0; i < 255; i++) {
        registeredWaveBankTables.reset(i);
    }
}

/* 802A5060-802A50F8 29F9A0 0098+00 1/1 0/0 0/0 .text __ct__10JAUSectionFP14JAUSectionHeapUll */
JAUSection::JAUSection(JAUSectionHeap* param_0, u32 param_1, s32 param_2)
            : JSULink<JAUSection>(this), field_0x28(param_1), sectionHeap_(param_0) {
    buildingBankTable_ = NULL;
    field_0x2c = 1;
    data_.field_0x98 = param_2;
    if (this != sectionHeap_) {
        data_.field_0x00.setSeqDataArchive(sectionHeap_->sectionHeapData_.seqDataBlocks.getSeqDataArchive());
    }
}

/* 802A50F8-802A5160 29FA38 0068+00 0/0 1/1 0/0 .text            finishBuild__10JAUSectionFv */
void JAUSection::finishBuild() {
    JUT_ASSERT(143, isOpen());
    JUT_ASSERT(144, isBuilding());
    {
        TPushCurrentHeap push(getHeap_());
    }
    data_.field_0x98 -= getHeap_()->getFreeSize();
    getHeap_()->freeTail();
    field_0x2c = 0;
}

/* 802A5160-802A51E4 29FAA0 0084+00 2/0 0/0 0/0 .text            dispose__10JAUSectionFv */
void JAUSection::dispose() {
    /* JUT_ASSERT(267, ! data_.registeredBankTables.any());
    JUT_ASSERT(268, ! data_.registeredWaveBankTables.any()); */
    if (data_.mBstDst) {
        sectionHeap_->sectionHeapData_.soundTable->~JAUSoundTable();
        sectionHeap_->sectionHeapData_.soundTable = NULL;
    }
    if ((data_.mBstnDst)) {
        sectionHeap_->sectionHeapData_.soundNameTable->~JAUSoundNameTable();
        sectionHeap_->sectionHeapData_.soundNameTable = NULL;
    }
}

/* 802A51E4-802A52A0 29FB24 00BC+00 0/0 1/1 0/0 .text            newSoundTable__10JAUSectionFPCvUlb
 */
// NONMATCHING regalloc
JAUSoundTable* JAUSection::newSoundTable(void const* bst, u32 param_1, bool param_2) {
    JUT_ASSERT(285, isOpen());
    JUT_ASSERT(286, isBuilding());
    JUT_ASSERT(287, bst);
    JUT_ASSERT(288, asSectionHeap() == this);
    JUT_ASSERT(289, sectionHeap_->sectionHeapData_.soundTable == 0);
    {
        TPushCurrentHeap push(getHeap_());
        void* bstDst;
        if (param_1) {
            bstDst = newCopy(bst, param_1, 4);
            JUT_ASSERT(296, bstDst);
        }
        JAUSoundTable* soundTable = new JAUSoundTable(param_2);
        JUT_ASSERT(299, soundTable);
        soundTable->init(bstDst);
        sectionHeap_->sectionHeapData_.soundTable = soundTable;
        data_.mBstDst = bstDst;
    }
    return sectionHeap_->sectionHeapData_.soundTable;
}

/* 802A52A0-802A535C 29FBE0 00BC+00 0/0 1/1 0/0 .text newSoundNameTable__10JAUSectionFPCvUlb */
// NONMATCHING regalloc
JAUSoundNameTable* JAUSection::newSoundNameTable(void const* bstn, u32 param_1, bool param_2) {
    JUT_ASSERT(315, isOpen());
    JUT_ASSERT(316, isBuilding());
    JUT_ASSERT(317, bstn);
    JUT_ASSERT(318, asSectionHeap() == this);
    JUT_ASSERT(319, sectionHeap_->sectionHeapData_.soundNameTable == 0);
    {
        TPushCurrentHeap push(getHeap_());
        void* bstnDst;
        if (param_1) {
            bstnDst = newCopy(bstn, param_1, 4);
            JUT_ASSERT(326, bstnDst);
        }
        JAUSoundNameTable* soundNameTable = new JAUSoundNameTable(param_2);
        JUT_ASSERT(329, soundNameTable);
        soundNameTable->init(bstnDst);
        sectionHeap_->sectionHeapData_.soundNameTable = soundNameTable;
        data_.mBstnDst = bstnDst;
    }
    return sectionHeap_->sectionHeapData_.soundNameTable;
}

/* 802A535C-802A5500 29FC9C 01A4+00 0/0 1/1 0/0 .text newStreamFileTable__10JAUSectionFPCvb */
JAIStreamDataMgr* JAUSection::newStreamFileTable(void const* param_0, bool param_1) {
    JUT_ASSERT(345, asSectionHeap() == this);
    JUT_ASSERT(346, isOpen());
    JUT_ASSERT(347, isBuilding());
    JUT_ASSERT(348, sectionHeap_->sectionHeapData_.streamDataMgr_ == 0);
    {
        TPushCurrentHeap push(getHeap_());
        JAIStreamDataMgr* r28 = NULL;
        if (param_1) {
            TStreamDataMgr* r26 = new TStreamDataMgr(param_0);
            if (r26->isValid()) {
                r28 = r26;
            }
        } else {
            JAUStreamDataMgr_StreamFileTable* r25 = new JAUStreamDataMgr_StreamFileTable();
            r25->init(param_0);
            if (r25->isValid()) {
                r28 = r25;
            }
        }
        sectionHeap_->sectionHeapData_.streamDataMgr_ = r28;
    }
    return sectionHeap_->sectionHeapData_.streamDataMgr_;
}

/* 802A5500-802A5598 29FE40 0098+00 0/0 1/1 0/0 .text newSeSeqCollection__10JAUSectionFPCvUl */
JAISeqDataMgr* JAUSection::newSeSeqCollection(void const* bsc, u32 param_1) {
    // JUT_ASSERT(398, asSectionHeap() == this);
    JUT_ASSERT(399, sectionHeap_->sectionHeapData_.seSeqDataMgr_ == 0);
    if (param_1) {
        bsc = newCopy(bsc, param_1, 4);
    }
    JUT_ASSERT(405, bsc);
    {
        TPushCurrentHeap push(getHeap_());
        JAUSeqDataMgr_SeqCollection* seSeqDataMgr = new JAUSeqDataMgr_SeqCollection();
        JUT_ASSERT(409, seSeqDataMgr);
        seSeqDataMgr->init(bsc);
        sectionHeap_->sectionHeapData_.seSeqDataMgr_ = seSeqDataMgr;
        data_.field_0x80 = seSeqDataMgr;
    }
    return sectionHeap_->sectionHeapData_.seSeqDataMgr_;
}

/* 802A5598-802A56C8 29FED8 0130+00 2/2 0/0 0/0 .text
 * newStaticSeqDataBlock___10JAUSectionF10JAISoundIDUl          */
u8* JAUSection::newStaticSeqDataBlock_(JAISoundID param_0, u32 size) {
    JUT_ASSERT(419, isOpen());
    JUT_ASSERT(420, isBuilding());
    JUT_ASSERT(421, size);
    {
        TPushCurrentHeap push(getHeap_());
        JAUSeqDataBlock* seqDataBlock = new JAUSeqDataBlock();
        if (!seqDataBlock) {
            return NULL;
        }
        JSULink<JAUSeqDataBlock>* link = new JSULink<JAUSeqDataBlock>(seqDataBlock);
        if (!link) {
            return NULL;
        }
        u8* r28 = new(0x20) u8[size];
        if (!r28) {
            return NULL;
        }
        seqDataBlock->field_0x14.addr = r28;
        seqDataBlock->field_0x14.size = size;
        seqDataBlock->field_0x10 = param_0;
        JASCriticalSection cs;
        if(data_.field_0x00.appendDynamicSeqDataBlock(seqDataBlock)) {
            data_.field_0x28.append(link);
            return r28;
        }
    }
    return NULL;
}

/* 802A56C8-802A5730 2A0008 0068+00 0/0 1/1 0/0 .text
 * newStaticSeqData__10JAUSectionF10JAISoundIDPCvUl             */
bool JAUSection::newStaticSeqData(JAISoundID param_0, void const* param_1, u32 param_2) {
    u8* r30 = newStaticSeqDataBlock_(param_0, param_2);
    if (r30) {
        memcpy(r30, param_1, param_2);
        return true;
    }
    return false;
}

/* 802A5730-802A57F0 2A0070 00C0+00 0/0 1/1 0/0 .text newStaticSeqData__10JAUSectionF10JAISoundID
 */
bool JAUSection::newStaticSeqData(JAISoundID param_0) {
    JKRArchive* seqArchive = data_.field_0x00.getSeqDataArchive();
    JUT_ASSERT(481, seqArchive);
    JAUSoundInfo* soundInfo = JASGlobalInstance<JAUSoundInfo>::getInstance();
    if (!soundInfo) {
        return false;
    }
    u16 r26 = soundInfo->getBgmSeqResourceID(param_0);
    u32 r25 = JASResArcLoader::getResSize(seqArchive, r26);
    u8* r24 = newStaticSeqDataBlock_(0xffffffff, r25);
    if (r24) {
        data_.field_0x00.loadDynamicSeq(param_0, true, sectionHeap_->sectionHeapData_.seqDataUser);
        return true;
    }
    return false;
}

/* 802A57F0-802A5854 2A0130 0064+00 3/3 0/0 0/0 .text            newCopy__10JAUSectionFPCvUll */
void* JAUSection::newCopy(void const* param_0, u32 param_1, s32 param_2) {
    JUT_ASSERT(516, isOpen());
    JUT_ASSERT(517, isBuilding());
    u8* r31 = new(getHeap_(), param_2) u8[param_1];
    if (r31) {
        memcpy(r31, param_0, param_1);
    }
    return r31;
}

/* ############################################################################################## */
/* 8039B950-8039B950 027FB0 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8039B974 = "index out of range of bitset::test";
SECTION_DEAD static char const* const stringBase_8039B997 = "index out of range of bitset::set";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_8039B9B9 = "\0\0\0\0\0\0";
#pragma pop

/* 802A5854-802A5948 2A0194 00F4+00 0/0 1/1 0/0 .text            newWaveBank__10JAUSectionFUlPCv */
JASWaveBank* JAUSection::newWaveBank(u32 bank_no, void const* param_1) {
    JUT_ASSERT(528, isOpen());
    JUT_ASSERT(529, isBuilding());
    TPushCurrentHeap push(getHeap_());
    s32 r27 = getHeap_()->getFreeSize();
    JASWaveBank* waveBank = JASWSParser::createWaveBank(param_1, getHeap_());
    if (waveBank) {
        JUT_ASSERT(536, sectionHeap_->getWaveBankTable().getWaveBank( bank_no ) == 0);
        sectionHeap_->getWaveBankTable().registWaveBank(bank_no, waveBank);
        data_.registeredWaveBankTables.set(bank_no, true);
        data_.field_0xa0 += r27 - getHeap_()->getFreeSize();
        return waveBank;
    }
    return NULL;

}

/* 802A5948-802A5A50 2A0288 0108+00 0/0 1/1 0/0 .text            loadWaveArc__10JAUSectionFUlUl */
bool JAUSection::loadWaveArc(u32 param_0, u32 param_1) {
    if (data_.registeredWaveBankTables.test(param_0)) {
        JASWaveBank* waveBank = sectionHeap_->getWaveBankTable().getWaveBank(param_0);
        if (waveBank) {
            for (u32 i = 0; i < waveBank->getArcCount(); i++) {
                if (param_1 & 1 << i) {
                    waveBank->getWaveArc(i)->load(NULL);
                }
            }
            return true;
        }
    }
    return false;
}

/* 802A5A50-802A5B84 2A0390 0134+00 0/0 1/1 0/0 .text            newBank__10JAUSectionFPCvUl */
JASBank* JAUSection::newBank(void const* param_0, u32 param_1) {
    JUT_ASSERT(647, isOpen());
    JUT_ASSERT(648, isBuilding());
    JASWaveBank* waveBank = sectionHeap_->getWaveBankTable().getWaveBank(param_1);
    JUT_ASSERT(650, waveBank != 0);
    TPushCurrentHeap push(getHeap_());
    u32 bank_no = JASBNKParser::getBankNumber(param_0);
    s32 r25 = getHeap_()->getFreeSize();
    JASBank* bank = JASBNKParser::createBank(param_0, getHeap_());
    if (bank) {
        if (buildingBankTable_) {
            JUT_ASSERT(660, buildingBankTable_->getBank( bank_no ) == 0);
            buildingBankTable_->registBank(bank_no, bank);
        } else {
            JUT_ASSERT(665, JASDefaultBankTable::getInstance() ->getBank( bank_no ) == 0);
            JASDefaultBankTable::getInstance()->registBank(bank_no, bank);
            data_.registeredBankTables.set(bank_no, true);
        }
        bank->assignWaveBank(waveBank);
        data_.field_0x9c += r25 - getHeap_()->getFreeSize();
        return bank;
    }
    return 0;
}

/* 802A5B84-802A5CAC 2A04C4 0128+00 0/0 1/1 0/0 .text            newVoiceBank__10JAUSectionFUlUl */
// NONMATCHING regalloc
JASVoiceBank* JAUSection::newVoiceBank(u32 bank_no, u32 param_1) {
    JUT_ASSERT(685, isOpen());
    JUT_ASSERT(686, isBuilding());
    JASWaveBank* waveBank = sectionHeap_->getWaveBankTable().getWaveBank(param_1);
    JUT_ASSERT(688, waveBank != 0);
    TPushCurrentHeap push(getHeap_());
    JASVoiceBank* voiceBank = new JASVoiceBank();
    if (voiceBank) {
        if (buildingBankTable_) {
            JUT_ASSERT(696, buildingBankTable_->getBank( bank_no ) == 0);
            buildingBankTable_->registBank(bank_no, voiceBank);
        } else {
            JUT_ASSERT(701, JASDefaultBankTable::getInstance() ->getBank( bank_no ) == 0);
            JASDefaultBankTable::getInstance()->registBank(bank_no, voiceBank);
            data_.registeredBankTables.set(bank_no, true);
        }
        voiceBank->assignWaveBank(waveBank);
        return voiceBank;
    }
    return NULL;
}

/* 802A5CAC-802A5D9C 2A05EC 00F0+00 0/0 1/1 0/0 .text beginNewBankTable__10JAUSectionFUlUl */
bool JAUSection::beginNewBankTable(u32 param_0, u32 param_1) {
    JUT_ASSERT(714, isOpen());
    JUT_ASSERT(715, isBuilding());
    JUT_ASSERT(716, buildingBankTable_ == 0);
    JAUBankTableLink* bankTableLink = NULL;
    {
        TPushCurrentHeap push(getHeap_());
        JASBank** r26 = new JASBank*[param_1];
        if (r26) {
            bankTableLink = new JAUBankTableLink(param_0, r26, param_1);
            if (bankTableLink) {
                buildingBankTable_ = bankTableLink;
            } else {

            }
        } else {

        }
    }
    return bankTableLink;
}

/* 802A5D9C-802A5DF4 2A06DC 0058+00 0/0 1/1 0/0 .text            endNewBankTable__10JAUSectionFv */
JAUBankTable* JAUSection::endNewBankTable() {
    JAUBankTable* r29 = NULL;
    if (buildingBankTable_) {
        data_.field_0x74.appendBankTable(buildingBankTable_);
        buildingBankTable_ = NULL;
        r29 = buildingBankTable_;
    }
    return r29;
}

/* 802A5DF4-802A5E60 2A0734 006C+00 1/1 0/0 0/0 .text __ct__Q214JAUSectionHeap16TSectionHeapDataFv
 */
JAUSectionHeap::TSectionHeapData::TSectionHeapData() {
    seSeqDataMgr_ = NULL;
    streamDataMgr_ = NULL;
    soundTable = NULL;
    soundNameTable = NULL;
    seqDataUser = NULL;
}

/* 802A5E60-802A5EC0 2A07A0 0060+00 0/0 1/1 0/0 .text
 * setSeqDataArchive__14JAUSectionHeapFP10JKRArchive            */
void JAUSectionHeap::setSeqDataArchive(JKRArchive* param_0) {
    sectionHeapData_.seqDataBlocks.setSeqDataArchive(param_0);
    for (JSULink<JAUSection>* link = mSectionList.getFirst(); link; link = link->getNext()) {
        link->getObject()->data_.field_0x00.setSeqDataArchive(param_0);
    }
}

/* 802A5EC0-802A5EF8 2A0800 0038+00 0/0 1/1 0/0 .text
 * loadDynamicSeq__14JAUSectionHeapF10JAISoundIDb               */
bool JAUSectionHeap::loadDynamicSeq(JAISoundID param_0, bool param_1) {
    return sectionHeapData_.seqDataBlocks.loadDynamicSeq(param_0, param_1, sectionHeapData_.seqDataUser);
}

/* 802A5EF8-802A5F24 2A0838 002C+00 0/0 1/1 0/0 .text
 * releaseIdleDynamicSeqDataBlock__14JAUSectionHeapFv           */
void JAUSectionHeap::releaseIdleDynamicSeqDataBlock() {
    sectionHeapData_.seqDataBlocks.releaseIdleDynamicSeqDataBlock(sectionHeapData_.seqDataUser);
}

namespace {
    // TODO
    bool JKRSolidHeap_isEmpty(JKRSolidHeap*) { return 1; }
}

/* 802A5F24-802A5F9C 2A0864 0078+00 1/1 0/0 0/0 .text JAUNewSectionHeap__FP12JKRSolidHeapb */
static JAUSectionHeap* JAUNewSectionHeap(JKRSolidHeap* heap, bool param_1) {
    JUT_ASSERT(809, JKRSolidHeap_isEmpty( heap ));
    TPushCurrentHeap push(heap);
    s32 r29 = heap->getFreeSize();
    return new JAUSectionHeap(heap, param_1, r29);
}

/* 802A5F9C-802A5FE0 2A08DC 0044+00 0/0 1/1 0/0 .text            JAUNewSectionHeap__Fb */
JAUSectionHeap* JAUNewSectionHeap(bool param_0) {
    s32 freeSize = JASDram->getFreeSize();
    JKRSolidHeap* sectionHeap = JKRCreateSolidHeap(freeSize, JASDram, true);
    JUT_ASSERT(821, sectionHeap);
    return JAUNewSectionHeap(sectionHeap, param_0);
}

/* 802A5FE0-802A6094 2A0920 00B4+00 1/1 0/0 0/0 .text __ct__14JAUSectionHeapFP12JKRSolidHeapbl */
JAUSectionHeap::JAUSectionHeap(JKRSolidHeap* param_0, bool param_1, s32 param_2)
        : JAUSection(this, 0, param_2), JASGlobalInstance<JAUSectionHeap>(param_1), mHeap(param_0) {
    field_0xe4 = 0;
    mSectionList.append(this);
}

/* 802A6094-802A60A0 2A09D4 000C+00 0/0 1/1 0/0 .text            getOpenSection__14JAUSectionHeapFv
 */
JAUSection* JAUSectionHeap::getOpenSection() {
    return mSectionList.getLast()->getObject();
}

/* 802A60A0-802A60AC 2A09E0 000C+00 2/1 0/0 0/0 .text
 * setSeqDataUser__14JAUSectionHeapFP14JAISeqDataUser           */
bool JAUSectionHeap::setSeqDataUser(JAISeqDataUser* param_0) {
    sectionHeapData_.seqDataUser = param_0;
    return true;
}

/* 802A60AC-802A61D0 2A09EC 0124+00 0/0 2/2 0/0 .text newDynamicSeqBlock__14JAUSectionHeapFUl */
bool JAUSectionHeap::newDynamicSeqBlock(u32 size) {
    /* JUT_ASSERT(937, isOpen());
    JUT_ASSERT(938, isBuilding());
    JUT_ASSERT(939, sectionHeap_ == this); */
    TPushCurrentHeap push(getHeap_());
    JAUSeqDataBlock * seqDataBlock = new JAUSeqDataBlock();
    if (!seqDataBlock) {
        return false;
    }
    JSULink<JAUSeqDataBlock> * link = new JSULink<JAUSeqDataBlock>(seqDataBlock);
    if (!link) {
        return false;
    }
    u8* r25 = new(0x20) u8[size];
    if (!r25) {
        return false;
    }
    seqDataBlock->field_0x14.addr = r25;
    seqDataBlock->field_0x14.size = size;
    seqDataBlock->field_0x10.setAnonymous();
    JASCriticalSection cs;
    if (sectionHeap_->sectionHeapData_.seqDataBlocks.appendDynamicSeqDataBlock(seqDataBlock)) {
        return true;
    }
    return false;
}

/* 802A61D0-802A6270 2A0B10 00A0+00 2/1 0/0 0/0 .text
 * getSeqData__14JAUSectionHeapF10JAISoundIDP10JAISeqData       */
JAISeqDataMgr::SeqDataReturnValue JAUSectionHeap::getSeqData(JAISoundID param_0, JAISeqData* param_1) {
    for (JSULink<JAUSection> * link = mSectionList.getFirst(); link; link = link->getNext()) {
        s32 result = link->getObject()->data_.field_0x00.getSeqData(param_0, sectionHeapData_.seqDataUser, param_1, false);
        // JUT_ASSERT(994, result != JAI_ASYNC_RESULT_RETRY);
        if (result == 2) {
            return JAISeqDataMgr::SeqDataReturnValue_2;
        }
    }
    return (SeqDataReturnValue)sectionHeapData_.seqDataBlocks.getSeqData(param_0, sectionHeapData_.seqDataUser, param_1, true);
}

/* 802A6270-802A6278 2A0BB0 0008+00 2/1 0/0 0/0 .text            releaseSeqData__14JAUSectionHeapFv
 */
int JAUSectionHeap::releaseSeqData() {
    return 0;
}
