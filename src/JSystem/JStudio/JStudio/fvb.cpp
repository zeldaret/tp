//
// Generated By: dol2asm
// Translation Unit: fvb
//

#include "JSystem/JSystem.h" // IWYU pragma: keep

#include "JSystem/JStudio/JStudio/fvb.h"
#include "JSystem/JUtility/JUTException.h"
#include <string.h>

namespace JStudio {
namespace fvb {

TObject::~TObject() {}

// NONMATCHING regalloc, missing mr, addition order
void TObject::prepare(data::TParse_TBlock const& rBlock, TControl* pControl) {
    ASSERT(pfv_ != 0);

    ASSERT(pControl != 0);
    TFunctionValueAttributeSet set = pfv_->getAttributeSet();
    const void* pNext = rBlock.getNext();
    const void* pData = rBlock.getContent();
    while (pData < pNext) {
        data::TParse_TParagraph para(pData);
        data::TParse_TParagraph::TData dat;
        para.getData(&dat);
        u32 u32Type = dat.u32Type;
        u32 u32Size = dat.u32Size;
        const void* pContent = dat.pContent;
        switch (u32Type) {
        case 0:
            goto end;
        case 1:
            prepare_data_(dat, pControl);
            break;
        case 0x10: {
            JUT_EXPECT(u32Size >= 4);
            ASSERT(pContent != 0);
            TFunctionValueAttribute_refer* pfvaRefer = set.refer_get();
            JUT_EXPECT(pfvaRefer != NULL);
            if (pfvaRefer == NULL) {
                JUTWarn w;
                w << "invalid paragraph";
            } else {
                JGadget::TVector_pointer<TFunctionValue*>& rCnt = pfvaRefer->refer_referContainer();
                u32* content = (u32*)pContent;
                u32 i = content[0];
                u32* ptr = content + 1;
                for (; i != 0; ptr++, i--) {
                    u32 size = *ptr;
                    TObject* pObject = pControl->getObject(ptr + 1, size);
                    if (pObject == NULL) {
                        JUTWarn w;
                        w << "object not found by ID";
                    } else {
                        TFunctionValue* rfv = pObject->referFunctionValue();
                        rCnt.push_back(rfv);
                    }
                    ptr += align_roundUp(size, 4) >> 2;
                }
            }
        } break;
        case 0x11: {
            JUT_EXPECT(u32Size >= 4);
            ASSERT(pContent != 0);
            TFunctionValueAttribute_refer* pfvaRefer = set.refer_get();
            JUT_EXPECT(pfvaRefer != NULL);
            if (pfvaRefer == NULL) {
                JUTWarn w;
                w << "invalid paragraph";
            } else {
                JGadget::TVector_pointer<TFunctionValue*>& rCnt = pfvaRefer->refer_referContainer();
                u32* content = (u32*)pContent;
                u32* ptr = content;
                u32 i = content[0];
                for (; ptr++, i != 0; i--) {
                    u32 index = *ptr;
                    TObject* pObject = pControl->getObject_index(index);
                    if (pObject == NULL) {
                        JUTWarn w;
                        w << "object not found by index : " << index;
                    } else {
                        TFunctionValue& rfv = *pObject->referFunctionValue();
                        rCnt.push_back(&rfv);
                    }
                }
            }
        } break;
        case 0x12: {
            JUT_EXPECT(u32Size == 8);
            ASSERT(pContent != 0);
            TFunctionValueAttribute_range* pfvaRange = set.range_get();
            JUT_EXPECT(pfvaRange != NULL);
            if (pfvaRange == NULL) {
                JUTWarn w;
                w << "invalid paragraph";
            } else {
                f32* arr = (f32*)pContent;
                pfvaRange->range_set(arr[0], arr[1]);
            }
        } break;
        case 0x13: {
            JUT_EXPECT(u32Size == 4);
            ASSERT(pContent != 0);
            TFunctionValueAttribute_range* pfvaRange = set.range_get();
            JUT_EXPECT(pfvaRange != NULL);
            if (pfvaRange == NULL) {
                JUTWarn w;
                w << "invalid paragraph";
            } else {
                TFunctionValue::TEProgress prog = *(TFunctionValue::TEProgress*)pContent;
                pfvaRange->range_setProgress(prog);
            }
        } break;
        case 0x14: {
            JUT_EXPECT(u32Size == 4);
            ASSERT(pContent != 0);
            TFunctionValueAttribute_range* pfvaRange = set.range_get();
            JUT_EXPECT(pfvaRange != NULL);
            if (pfvaRange == NULL) {
                JUTWarn w;
                w << "invalid paragraph";
            } else {
                TFunctionValue::TEAdjust adjust = *(TFunctionValue::TEAdjust*)pContent;
                pfvaRange->range_setAdjust(adjust);
            }
        } break;
        case 0x15: {
            JUT_EXPECT(u32Size == 4);
            ASSERT(pContent != 0);
            TFunctionValueAttribute_range* pfvaRange = set.range_get();
            JUT_EXPECT(pfvaRange != NULL);
            if (pfvaRange == NULL) {
                JUTWarn w;
                w << "invalid paragraph";
            } else {
                u16* out = (u16*)pContent;
                pfvaRange->range_setOutside((TFunctionValue::TEOutside)out[0],
                                            (TFunctionValue::TEOutside)out[1]);
            }
        } break;
        case 0x16: {
            JUT_EXPECT(u32Size == 4);
            ASSERT(pContent != 0);
            TFunctionValueAttribute_interpolate* pfvaInterpolate = set.interpolate_get();
            JUT_EXPECT(pfvaInterpolate != NULL);
            if (pfvaInterpolate == NULL) {
                JUTWarn w;
                w << "invalid paragraph";
            } else {
                TFunctionValue::TEInterpolate interp = *(TFunctionValue::TEInterpolate*)pContent;
                pfvaInterpolate->interpolate_set(interp);
            }
        } break;
        default:
            JUTWarn w;
            w << "unknown paragraph : " << u32Type;
        }
        pData = dat.next;
        ASSERT(pData != 0);
    }
end:
    JUT_EXPECT(pData == pNext);
    pfv_->prepare();
}

namespace {

TFunctionValue_composite::TData getCompositeData_raw_(const void* arg1) {
    return TFunctionValue_composite::TData(*(const void**)arg1);
}

TFunctionValue_composite::TData getCompositeData_index_(const void* arg1) {
    return TFunctionValue_composite::TData(*(u32*)arg1);
}

TFunctionValue_composite::TData getCompositeData_parameter_(const void* arg1) {
    return TFunctionValue_composite::TData(*(f32*)arg1);
}

TFunctionValue_composite::TData getCompositeData_add_(const void* arg1) {
    return TFunctionValue_composite::TData(*(f32*)arg1);
}

TFunctionValue_composite::TData getCompositeData_subtract_(const void* arg1) {
    return TFunctionValue_composite::TData(*(f32*)arg1);
}

TFunctionValue_composite::TData getCompositeData_multiply_(const void* arg1) {
    return TFunctionValue_composite::TData(*(f32*)arg1);
}

TFunctionValue_composite::TData getCompositeData_divide_(const void* arg1) {
    return TFunctionValue_composite::TData(*(f32*)arg1);
}

const data::CompositeOperation saCompositeOperation_[8] = {
    {NULL, NULL},
    {&TFunctionValue_composite::composite_raw, &getCompositeData_raw_},
    {&TFunctionValue_composite::composite_index, &getCompositeData_index_},
    {&TFunctionValue_composite::composite_parameter, &getCompositeData_parameter_},
    {&TFunctionValue_composite::composite_add, &getCompositeData_add_},
    {&TFunctionValue_composite::composite_subtract, &getCompositeData_subtract_},
    {&TFunctionValue_composite::composite_multiply, &getCompositeData_multiply_},
    {&TFunctionValue_composite::composite_divide, &getCompositeData_divide_},
};

/* 80284240-80284254 27EB80 0014+00 1/1 0/0 0/0 .text
 * getCompositeOperation___Q37JStudio3fvb17@unnamed@fvb_cpp@FQ47JStudio3fvb4data11TEComposite */
static const data::CompositeOperation* getCompositeOperation_(data::TEComposite comp) {
    return &saCompositeOperation_[comp];
}

} // namespace

/* 80284254-802842D4 27EB94 0080+00 1/1 0/0 0/0 .text
    * __ct__Q37JStudio3fvb17TObject_compositeFRCQ47JStudio3fvb4data13TParse_TBlock */
TObject_composite::TObject_composite(const data::TParse_TBlock& block) : TObject(block, &fnValue) {}

void TObject_composite::prepare_data_(const data::TParse_TParagraph::TData& rData,
                                      TControl* control) {
    ASSERT(rData.u32Type == data::PARAGRAPH_DATA);

    u32 u32Size = rData.u32Size;
    JUT_EXPECT(u32Size == 8);

    struct unknown {
        data::TEComposite composite_type;
        u32 data;
    };

    const unknown* pContent = static_cast<const unknown*>(rData.pContent);
    ASSERT(pContent != NULL);

    const data::CompositeOperation* op = getCompositeOperation_(pContent->composite_type);
    fnValue.data_set(op->composite, op->getCompositeData(&pContent->data));
}

/* 80284338-802843B8 27EC78 0080+00 1/1 0/0 0/0 .text
 * __ct__Q37JStudio3fvb16TObject_constantFRCQ47JStudio3fvb4data13TParse_TBlock */
TObject_constant::TObject_constant(data::TParse_TBlock const& param_0)
    : TObject(param_0, &fnValue) {}

void TObject_constant::prepare_data_(const data::TParse_TParagraph::TData& rData,
                                     TControl* control) {
    ASSERT(rData.u32Type == data::PARAGRAPH_DATA);

    u32 u32Size = rData.u32Size;
    JUT_EXPECT(u32Size == 4);

    const f32* pContent = static_cast<const f32*>(rData.pContent);
    ASSERT(pContent != NULL);

    fnValue.data_set(pContent[0]);
}

/* 802843C8-80284448 27ED08 0080+00 1/1 0/0 0/0 .text
 * __ct__Q37JStudio3fvb18TObject_transitionFRCQ47JStudio3fvb4data13TParse_TBlock */
TObject_transition::TObject_transition(data::TParse_TBlock const& param_0)
    : TObject(param_0, &fnValue) {}

void TObject_transition::prepare_data_(const data::TParse_TParagraph::TData& rData,
                                       TControl* control) {
    ASSERT(rData.u32Type == data::PARAGRAPH_DATA);

    u32 u32Size = rData.u32Size;
    JUT_EXPECT(u32size == 8);

    const f32* pContent = static_cast<const f32*>(rData.pContent);
    ASSERT(pContent != NULL);

    fnValue.data_set(pContent[0], pContent[1]);
}

/* 80284460-802844E0 27EDA0 0080+00 1/1 0/0 0/0 .text
 * __ct__Q37JStudio3fvb12TObject_listFRCQ47JStudio3fvb4data13TParse_TBlock */
TObject_list::TObject_list(data::TParse_TBlock const& param_0) : TObject(param_0, &fnValue) {}

void TObject_list::prepare_data_(const data::TParse_TParagraph::TData& rData, TControl* control) {
    ASSERT(rData.u32Type == data::PARAGRAPH_DATA);

    u32 u32Size = rData.u32Size;
    JUT_EXPECT(u32size >= 8);

    const ListData* pContent = static_cast<const ListData*>(rData.pContent);
    ASSERT(pContent != NULL);

    fnValue.data_setInterval(pContent->_0);
    fnValue.data_set(pContent->_8, pContent->_4);
}

/* 80284500-80284580 27EE40 0080+00 1/1 0/0 0/0 .text
 * __ct__Q37JStudio3fvb22TObject_list_parameterFRCQ47JStudio3fvb4data13TParse_TBlock */
TObject_list_parameter::TObject_list_parameter(data::TParse_TBlock const& param_0)
    : TObject(param_0, &fnValue) {}

void TObject_list_parameter::prepare_data_(const data::TParse_TParagraph::TData& rData,
                                           TControl* control) {
    ASSERT(rData.u32Type == data::PARAGRAPH_DATA);

    u32 u32Size = rData.u32Size;
    JUT_EXPECT(u32size >= 8);

    const ListData* pContent = static_cast<const ListData*>(rData.pContent);
    ASSERT(pContent != NULL);

    fnValue.data_set(pContent->_4, pContent->_0);
}

/* 802845B0-80284630 27EEF0 0080+00 1/1 0/0 0/0 .text
 * __ct__Q37JStudio3fvb15TObject_hermiteFRCQ47JStudio3fvb4data13TParse_TBlock */
TObject_hermite::TObject_hermite(data::TParse_TBlock const& param_0) : TObject(param_0, &fnValue) {}

void TObject_hermite::prepare_data_(const data::TParse_TParagraph::TData& rData,
                                    TControl* control) {
    ASSERT(rData.u32Type == data::PARAGRAPH_DATA);

    u32 u32Size = rData.u32Size;
    JUT_EXPECT(u32size >= 8);

    const ListData* pContent = static_cast<const ListData*>(rData.pContent);
    ASSERT(pContent != NULL);

    fnValue.data_set(pContent->_4, pContent->_0 & 0xFFFFFFF, pContent->_0 >> 0x1C);
}

TControl::TControl() : pFactory(NULL) {}

TControl::~TControl() {
    JUT_EXPECT(ocObject_.empty());
}

/* 80284704-80284750 27F044 004C+00 1/1 0/0 0/0 .text
 * appendObject__Q37JStudio3fvb8TControlFPQ37JStudio3fvb7TObject */
void TControl::appendObject(TObject* object) {
    ocObject_.Push_back(object);
}

/* 80284750-80284780 27F090 0030+00 1/1 0/0 0/0 .text
 * removeObject__Q37JStudio3fvb8TControlFPQ37JStudio3fvb7TObject */
void TControl::removeObject(TObject* object) {
    ocObject_.Erase(object);
}

/* 80284780-802847D0 27F0C0 0050+00 1/1 0/0 0/0 .text
 * destroyObject__Q37JStudio3fvb8TControlFPQ37JStudio3fvb7TObject */
void TControl::destroyObject(TObject* object) {
    removeObject(object);
    getFactory()->destroy(object);
}

/* 802847D0-80284834 27F110 0064+00 0/0 2/2 0/0 .text destroyObject_all__Q37JStudio3fvb8TControlFv
 */
void TControl::destroyObject_all() {
    while (!ocObject_.empty()) {
        destroyObject(&ocObject_.back());
    }
}

/* 80284834-802848D4 27F174 00A0+00 2/2 1/1 0/0 .text getObject__Q37JStudio3fvb8TControlFPCvUl */
TObject* TControl::getObject(void const* id, u32 idSize) {
    typedef JGadget::TLinkList<TObject, -12>::iterator iterator;
    iterator begin = ocObject_.begin();
    iterator end = ocObject_.end();
    iterator it = std::find_if(begin, end, object::TPRObject_ID_equal(id, idSize));
    return it != end ? &*it : NULL;
}

/* 802848D4-80284918 27F214 0044+00 1/1 1/1 0/0 .text getObject_index__Q37JStudio3fvb8TControlFUl
 */
TObject* TControl::getObject_index(u32 index) {
    if (index >= ocObject_.size()) {
        return NULL;
    }

    JGadget::TLinkList<TObject, -12>::iterator it = ocObject_.begin();
    std::advance(it, index);
    return &*it;
}

TFactory::~TFactory() {}

TObject* TFactory::create(data::TParse_TBlock const& rBlock) {
    switch (rBlock.get_type()) {
    case 1:
        return new TObject_composite(rBlock);
    case 2:
        return new TObject_constant(rBlock);
    case 3:
        return new TObject_transition(rBlock);
    case 4:
        return new TObject_list(rBlock);
    case 5:
        return new TObject_list_parameter(rBlock);
    case 6:
        return new TObject_hermite(rBlock);
    default:
        JUTWarn w;
        w << "unknown type : ";
        return NULL;
    }
}

void TFactory::destroy(TObject* pObject) {
    delete pObject;
}

TParse::TParse(TControl* pControl) : pControl_(pControl) {
    ASSERT(pControl_ != 0);
}

TParse::~TParse() {}

bool TParse::parseHeader_next(void const** ppData_inout, u32* puBlock_out, u32 flags) {
    ASSERT(ppData_inout != 0);
    ASSERT(puBlock_out != 0);

    const void* pData = *ppData_inout;
    ASSERT(pData != 0);

    const data::TParse_THeader header(pData);
    *ppData_inout = header.getContent();
    *puBlock_out = header.get_blockNumber();

    if (memcmp(header.get_signature(), &data::ga4cSignature, 4) != 0) {
        JUTWarn w;
        w << "unknown signature";
        return false;
    }

    if (header.get_byteOrder() != 0xFEFF) {
        JUTWarn w;
        w << "illegal byte-order";
        return false;
    }
    u16 version = header.get_version();
    if (version < 2) {
        JUTWarn w;
        w << "obselete version : " << (long)0;
        return false;
    } else if (version > 0x100) {
        JUTWarn w;
        w << "unknown version : " << version;
        return false;
    }
    return true;
}

bool TParse::parseBlock_next(void const** ppData_inout, u32* puData_out, u32 flags) {
    ASSERT(ppData_inout != 0);
    ASSERT(puData_out != 0);

    const void* pData = *ppData_inout;
    ASSERT(pData != 0);
    data::TParse_TBlock blk(pData);
    *ppData_inout = blk.getNext();
    *puData_out = blk.get_size();

    TControl* pControl = getControl();
    ASSERT(pControl != 0);

    if (flags & 0x10) {
        if (pControl->getObject(blk.get_ID(), blk.get_IDSize()) != NULL)
            return 1;
    }
    if (flags & 0x20) {
        return 1;
    }

    TFactory* pFactory = pControl->getFactory();
    if (pFactory == NULL) {
        JUTWarn w;
        w << "factory not specified";
        return 0;
    }

    TObject* pObject = pFactory->create(blk);
    if (pObject == NULL) {
        JUTWarn w;
        w << "can't create function-value";
        if (flags & 0x40) {
            return 1;
        }
        return 0;
    }
    pObject->prepare(blk, pControl);
    pControl->appendObject(pObject);
    return 1;
}

}  // namespace fvb
}  // namespace JStudio
