//
// Generated By: dol2asm
// Translation Unit: JUTXfb
//

#include "JSystem/JSystem.h" // IWYU pragma: keep

#include "JSystem/JUtility/JUTXfb.h"
#include "JSystem/JKernel/JKRHeap.h"
#include "dolphin/gx.h"

void JUTXfb::clearIndex() {
    mDrawingXfbIndex = -1;
    mDrawnXfbIndex = -1;
    mDisplayingXfbIndex = -1;
}

void JUTXfb::common_init(int bufNum) {
    mBufferNum = bufNum;
    clearIndex();
    mSDrawingFlag = 99;
}

/* 802E5260-802E5308 2DFBA0 00A8+00 1/1 0/0 0/0 .text
 * __ct__6JUTXfbFPC16_GXRenderModeObjP7JKRHeapQ26JUTXfb10EXfbNumber */
JUTXfb::JUTXfb(GXRenderModeObj const* pObj, JKRHeap* pHeap, JUTXfb::EXfbNumber xfbNum) {
    common_init(xfbNum);

    if (pObj) {
        initiate(pObj->fbWidth, pObj->xfbHeight, pHeap, xfbNum);
    } else {
        u16 fbWidth = JUTVideo::getManager()->getRenderMode()->fbWidth;
        u16 efbHeight = (u32)JUTVideo::getManager()->getRenderMode()->efbHeight;
        u16 xfb_height = JUTVideo::getManager()->getRenderMode()->xfbHeight;
        f32 scale_factor = GXGetYScaleFactor(efbHeight, xfb_height);
        u16 xfb_lines = GXGetNumXfbLines(efbHeight, scale_factor);

        initiate(fbWidth, xfb_lines, pHeap, xfbNum);
    }
}

JUTXfb* JUTXfb::sManager;

JUTXfb::~JUTXfb() {
    for (int i = 0; i < 3; i++) {
        delXfb(i);
    }
    sManager = NULL;
}

void JUTXfb::delXfb(int xfbIdx) {
    if (mXfbAllocated[xfbIdx] && mBuffer[xfbIdx]) {
        delete mBuffer[xfbIdx];
    }
}

JUTXfb* JUTXfb::createManager(JKRHeap* pHeap, JUTXfb::EXfbNumber xfbNum) {
    if (sManager == NULL) {
        sManager = new JUTXfb(NULL, pHeap, xfbNum);
    }
    return sManager;
}

void JUTXfb::destroyManager() {
    delete sManager;
    sManager = NULL;
}

void JUTXfb::initiate(u16 width, u16 height, JKRHeap* pHeap, JUTXfb::EXfbNumber xfbNum) {
    if (pHeap == NULL) {
        pHeap = JKRHeap::getSystemHeap();
    }

    int size = ((u32)width + 0xf & 0xfff0) * (u32)height * 2;

    void* buf = ::operator new[](size, pHeap, 0x20);
    mBuffer[0] = buf;
    mXfbAllocated[0] = true;

    if (xfbNum >= 2) {
        buf = ::operator new[](size, pHeap, 0x20);
        mBuffer[1] = buf;
        mXfbAllocated[1] = true;
    } else {
        mBuffer[1] = NULL;
        mXfbAllocated[1] = false;
    }

    if (xfbNum >= 3) {
        buf = ::operator new[](size, pHeap, 0x20);
        mBuffer[2] = buf;
        mXfbAllocated[2] = true;
    } else {
        mBuffer[2] = NULL;
        mXfbAllocated[2] = false;
    }
}
