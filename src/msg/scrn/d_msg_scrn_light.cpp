//
// Generated By: dol2asm
// Translation Unit: msg/scrn/d_msg_scrn_light
//

#include "msg/scrn/d_msg_scrn_light.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Types:
//

struct JUtility {
    struct TColor {};
};

struct dMsgScrnLight_c {
    /* 80245934 */ dMsgScrnLight_c(u8, u8);
    /* 80245B00 */ ~dMsgScrnLight_c();
    /* 80245C04 */ void draw(f32*, f32, f32, f32, f32, f32, u8);
    /* 80245F90 */ void draw(f32*, f32, f32, f32, f32, f32, f32, JUtility::TColor,
                             JUtility::TColor);
    /* 802460DC */ void drawCommon(f32, f32, f32, f32, f32);
};

struct dMsgScrnLight_HIO_c {
    /* 8024575C */ dMsgScrnLight_HIO_c();
    /* 802457C4 */ void updateColor(u8);
    /* 80246348 */ ~dMsgScrnLight_HIO_c();
};

struct JKRFileLoader {
    /* 802D4270 */ void getGlbResource(char const*, JKRFileLoader*);
};

struct JKRExpHeap {};

struct JKRArchive {};

struct J2DGrafContext {};

struct J2DScreen {
    /* 802F8498 */ J2DScreen();
    /* 802F8648 */ void setPriority(char const*, u32, JKRArchive*);
    /* 802F8ED4 */ void draw(f32, f32, J2DGrafContext const*);
    /* 802F9690 */ void animation();
};

struct J2DPane {
    /* 802F7FCC */ void animationTransform();
};

struct J2DAnmLoaderDataBase {
    /* 80308A6C */ void load(void const*);
};

struct CPaneMgrAlpha {
    /* 802557D0 */ void setAlphaRate(f32);
    /* 80255828 */ void getAlphaRate();
};

struct CPaneMgr {
    /* 80253984 */ CPaneMgr(J2DScreen*, u64, u8, JKRExpHeap*);
    /* 80254458 */ void setBlackWhite(JUtility::TColor, JUtility::TColor);
};

//
// Forward References:
//

extern "C" void __ct__19dMsgScrnLight_HIO_cFv();
extern "C" void updateColor__19dMsgScrnLight_HIO_cFUc();
extern "C" void __ct__15dMsgScrnLight_cFUcUc();
extern "C" void __dt__15dMsgScrnLight_cFv();
extern "C" void draw__15dMsgScrnLight_cFPffffffUc();
extern "C" void draw__15dMsgScrnLight_cFPfffffffQ28JUtility6TColorQ28JUtility6TColor();
extern "C" void drawCommon__15dMsgScrnLight_cFfffff();
extern "C" void __dt__19dMsgScrnLight_HIO_cFv();
extern "C" void __sinit_d_msg_scrn_light_cpp();
extern "C" extern char const* const msg_scrn_d_msg_scrn_light__stringBase0;

//
// External References:
//

extern "C" void __ct__8CPaneMgrFP9J2DScreenUxUcP10JKRExpHeap();
extern "C" void setBlackWhite__8CPaneMgrFQ28JUtility6TColorQ28JUtility6TColor();
extern "C" void dPaneClass_showNullPane__FP9J2DScreen();
extern "C" void setAlphaRate__13CPaneMgrAlphaFf();
extern "C" void getAlphaRate__13CPaneMgrAlphaFv();
extern "C" void* __nw__FUl();
extern "C" void __dl__FPv();
extern "C" void getGlbResource__13JKRFileLoaderFPCcP13JKRFileLoader();
extern "C" void animationTransform__7J2DPaneFv();
extern "C" void __ct__9J2DScreenFv();
extern "C" void setPriority__9J2DScreenFPCcUlP10JKRArchive();
extern "C" void draw__9J2DScreenFffPC14J2DGrafContext();
extern "C" void animation__9J2DScreenFv();
extern "C" void load__20J2DAnmLoaderDataBaseFPCv();
extern "C" void __register_global_object();
extern "C" extern u8 g_dComIfG_gameInfo[122384];
extern "C" extern u8 data_804510D8[8];

//
// Declarations:
//

/* ############################################################################################## */
/* 803C1298-803C12A4 01E3B8 000C+00 2/2 0/0 0/0 .data            __vt__15dMsgScrnLight_c */
SECTION_DATA extern void* __vt__15dMsgScrnLight_c[3] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__15dMsgScrnLight_cFv,
};

/* 803C12A4-803C12B0 01E3C4 000C+00 2/2 0/0 0/0 .data            __vt__19dMsgScrnLight_HIO_c */
SECTION_DATA extern void* __vt__19dMsgScrnLight_HIO_c[3] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__19dMsgScrnLight_HIO_cFv,
};

/* 8024575C-802457C4 24009C 0068+00 1/1 0/0 0/0 .text            __ct__19dMsgScrnLight_HIO_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMsgScrnLight_HIO_c::dMsgScrnLight_HIO_c() {
    nofralloc
#include "asm/msg/scrn/d_msg_scrn_light/__ct__19dMsgScrnLight_HIO_cFv.s"
}
#pragma pop

/* 802457C4-80245934 240104 0170+00 1/1 0/0 0/0 .text updateColor__19dMsgScrnLight_HIO_cFUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMsgScrnLight_HIO_c::updateColor(u8 param_0) {
    nofralloc
#include "asm/msg/scrn/d_msg_scrn_light/updateColor__19dMsgScrnLight_HIO_cFUc.s"
}
#pragma pop

/* ############################################################################################## */
/* 80399B08-80399B08 026168 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_80399B08 = "zelda_message_window_text_light.blo";
SECTION_DEAD static char const* const stringBase_80399B2C = "zelda_message_window_text_light.bck";
SECTION_DEAD static char const* const stringBase_80399B50 = "zelda_message_window_text_light.bpk";
/* @stringBase0 padding */
SECTION_DEAD static char const* const pad_80399B74 = "\0\0\0";
#pragma pop

/* 804306C8-804306D4 05D3E8 000C+00 1/1 0/0 0/0 .bss             @3735 */
static u8 lit_3735[12];

/* 804306D4-80430728 05D3F4 0050+04 3/3 0/0 0/0 .bss             g_MsgScrnLight_HIO_c */
static u8 g_MsgScrnLight_HIO_c[80 + 4 /* padding */];

/* 80454CD8-80454CDC 0032D8 0004+00 4/4 0/0 0/0 .sdata2          @3808 */
SECTION_SDATA2 static u8 lit_3808[4] = {
    0x00,
    0x00,
    0x00,
    0x00,
};

/* 80245934-80245B00 240274 01CC+00 0/0 4/4 1/1 .text            __ct__15dMsgScrnLight_cFUcUc */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMsgScrnLight_c::dMsgScrnLight_c(u8 param_0, u8 param_1) {
    nofralloc
#include "asm/msg/scrn/d_msg_scrn_light/__ct__15dMsgScrnLight_cFUcUc.s"
}
#pragma pop

/* 80245B00-80245C04 240440 0104+00 1/0 0/0 0/0 .text            __dt__15dMsgScrnLight_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMsgScrnLight_c::~dMsgScrnLight_c() {
    nofralloc
#include "asm/msg/scrn/d_msg_scrn_light/__dt__15dMsgScrnLight_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 80454CDC-80454CE0 0032DC 0004+00 2/2 0/0 0/0 .sdata2          @3869 */
SECTION_SDATA2 static f32 lit_3869 = 1.0f;

/* 80454CE0-80454CE8 0032E0 0008+00 2/2 0/0 0/0 .sdata2          @3871 */
SECTION_SDATA2 static f64 lit_3871 = 4503601774854144.0 /* cast s32 to float */;

/* 80245C04-80245F90 240544 038C+00 0/0 2/2 0/0 .text            draw__15dMsgScrnLight_cFPffffffUc
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMsgScrnLight_c::draw(f32* param_0, f32 param_1, f32 param_2, f32 param_3, f32 param_4,
                               f32 param_5, u8 param_6) {
    nofralloc
#include "asm/msg/scrn/d_msg_scrn_light/draw__15dMsgScrnLight_cFPffffffUc.s"
}
#pragma pop

/* 80245F90-802460DC 2408D0 014C+00 0/0 1/1 1/1 .text
 * draw__15dMsgScrnLight_cFPfffffffQ28JUtility6TColorQ28JUtility6TColor */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMsgScrnLight_c::draw(f32* param_0, f32 param_1, f32 param_2, f32 param_3, f32 param_4,
                               f32 param_5, f32 param_6, JUtility::TColor param_7,
                               JUtility::TColor param_8) {
    nofralloc
#include "asm/msg/scrn/d_msg_scrn_light/draw__15dMsgScrnLight_cFPfffffffQ28JUtility6TColorQ28JUtility6TColor.s"
}
#pragma pop

/* 802460DC-80246348 240A1C 026C+00 2/2 0/0 0/0 .text            drawCommon__15dMsgScrnLight_cFfffff
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void dMsgScrnLight_c::drawCommon(f32 param_0, f32 param_1, f32 param_2, f32 param_3,
                                     f32 param_4) {
    nofralloc
#include "asm/msg/scrn/d_msg_scrn_light/drawCommon__15dMsgScrnLight_cFfffff.s"
}
#pragma pop

/* 80246348-80246390 240C88 0048+00 2/1 0/0 0/0 .text            __dt__19dMsgScrnLight_HIO_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm dMsgScrnLight_HIO_c::~dMsgScrnLight_HIO_c() {
    nofralloc
#include "asm/msg/scrn/d_msg_scrn_light/__dt__19dMsgScrnLight_HIO_cFv.s"
}
#pragma pop

/* 80246390-802463CC 240CD0 003C+00 0/0 1/0 0/0 .text            __sinit_d_msg_scrn_light_cpp */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __sinit_d_msg_scrn_light_cpp() {
    nofralloc
#include "asm/msg/scrn/d_msg_scrn_light/__sinit_d_msg_scrn_light_cpp.s"
}
#pragma pop

#pragma push
#pragma force_active on
REGISTER_CTORS(0x80246390, __sinit_d_msg_scrn_light_cpp);
#pragma pop

/* 80399B08-80399B08 026168 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
