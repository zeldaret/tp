/* f_op_actor_mng.cpp autogenerated by split.py v0.4 at 2021-01-25 19:11:04.087407 */

#include "f/f_op/f_op_actor_mng.h"
#include "JSystem/J3DUClipper.h"
#include "JSystem/JMath/JMath.h"
#include "SComponent/c_lib.h"
#include "SComponent/c_malloc.h"
#include "d/d_com/d_com_inf_game/d_com_inf_game.h"
#include "d/d_item/d_item/d_item.h"
#include "d/d_stage/d_stage.h"
#include "f/f_op/f_op_actor_iter.h"
#include "m_Do/m_Do_ext/m_Do_ext.h"
#include "msl_c/math.h"
#include "msl_c/string.h"

#define FLOAT_LABEL(x) (*(f32*)&x)

const char* lbl_803788C8 = "アクターの削除";
const char* lbl_803788D7 = "アクターのヒープの生成";
const char* lbl_803788EE = "fopAcM_createHeap 確保失敗\n";
const char* lbl_8037890A = "アクターのヒープの破壊";
const char* lbl_80378921 = "見積もりヒープサイズ(%08x)で登録失敗しました。%08x[%s]\n";
const char* lbl_80378959 = "見積もりヒープが確保できませんでした。 %08x [%s]\n";
const char* lbl_8037898B = "最大空きヒープサイズで確保失敗。[%s]\n";
const char* lbl_803789B1 = "最大空きヒープサイズで登録失敗。%08x[%s]\n";
const char* lbl_803789DB = "ぴったりサイズで、登録失敗？(バグ)\n";
const char* lbl_803789FF = "ばぐばぐです\n";
const char* lbl_80378A0D = "緊急回避措置\n";
const char* lbl_80378A1B = "fopAcM_entrySolidHeap だめでした [%s]\n";
const char* lbl_80378A42 = "UNKOWN";
const char* lbl_80378A49 = "\x00\x00\x00\x00\x00\x00";

// can't migrate data because 2 are swapped
// static const f32 lbl_80451C00 = 10.0f;                                                   //
// 0x41200000 static const s32 lbl_80451C04 = 0; static const f64 lbl_80451C08 = 0.5; //
// 0x3fe0000000000000 static const f64 lbl_80451C10 = 3.0; // 0x4008000000000000 static const s64
// lbl_80451C18 = 0; static const f32 lbl_80451C20 = 40.0f; // 0x42200000 static const f32
// lbl_80451C24 = 55.0f;                                                   // 0x425c0000 static
// const s32 lbl_80451C28 = 0x417fff97; static const f32 lbl_80451C2C = 32767.0f; // 0x46fffe00
// static const f32 lbl_80451C30 = 2.0f;                                                    //
// 0x40000000 static const f32 lbl_80451C34 = 8192.0f; // 0x46000000 static const f32
// lbl_80451C38 = 1.0f;                                                    // 0x3f800000 static
// const f32 lbl_80451C3C = 0.3f; static const f32 lbl_80451C40 = 0.2f; static const f32
// lbl_80451C44 = 2048.0f;                                                 // 0x45000000 static
// const f32 lbl_80451C48 = 100.0f;                                                  // 0x42c80000
// static const f32 lbl_80451C4C = 50.0f;                                                   //
// 0x42480000 static const s32 lbl_80451C50 = 0x01b201b3; static const f32 lbl_80451C54 = 150.0f;
// // 0x43160000 static const f32 lbl_80451C58 = -1000000000.0f; // 0xce6e6b28 static const f32
// lbl_80451C5C = 1000000000.0f;                                           // 0x4e6e6b28 static
// const s64 lbl_80451C60 = 0x43fa000000000000; static const f32 lbl_80451C60 = 500.0f; //
// 0x43fa0000 static const u8 lbl_80451C64[4] = { 0x00, 0x00, 0x00, 0x00 }; // padding

// additional symbols needed for f_op_actor_mng.cpp
// autogenerated by split.py v0.4 at 2021-01-25 19:11:04.087547
extern "C" {
void fopScnM_SearchByID__FUi(void);
void setEffectMtx__13J3DTexMtxInfoFPA4_f(void);
void calcViewFrustum__11J3DUClipperFv(void);
void MtxPosition__FP4cXyzP4cXyz(void);
void SetObj__16dBgS_PolyPassChkFv(void);
void SetPos__11cBgS_GndChkFPC4cXyz(void);
void __ct__5csXyzFsss(void);
void __dl__FPv(void);
void __mi__4cXyzCFRC3Vec(void);
void atan2sX_Z__4cXyzCFv(void);
void ChkPolySafe__4cBgSFRC13cBgS_PolyInfo(void);
void GetTriPla__4cBgSCFRC13cBgS_PolyInfoP8cM3dGPla(void);
void GroundCross__4cBgSFP11cBgS_GndChk(void);
void LineCross__4cBgSFP11cBgS_LinChk(void);
void cLib_chaseAngleS__FPsss(void);
void cLib_memSet__FPviUl(void);
void cLib_targetAngleY__FPC3VecPC3Vec(void);
void __dt__8cM3dGPlaFv(void);
void cM_atan2s__Fff(void);
void cM_rndFX__Ff(void);
void cM_rndF__Ff(void);
void createAppend__FUsUlPC4cXyziPC5csXyzPC4cXyzScUi(void);
void __ct__11dBgS_GndChkFv(void);
void __ct__11dBgS_LinChkFv(void);
void Set__11dBgS_LinChkFPC4cXyzPC4cXyzPC10fopAc_ac_c(void);
void __dt__11dBgS_LinChkFv(void);
void GetPolyAtt0__4dBgSFRC13cBgS_PolyInfo(void);
void RoofChk__4dBgSFP12dBgS_RoofChk(void);
void SplGrpChk__4dBgSFP14dBgS_SplGrpChk(void);
void __dt__14dBgS_ObjGndChkFv(void);
void __ct__14dBgS_ObjLinChkFv(void);
void __dt__15dBgS_ObjRoofChkFv(void);
void __ct__12dBgS_RoofChkFv(void);
void __dt__12dBgS_RoofChkFv(void);
void Set__14dBgS_SplGrpChkFR4cXyzf(void);
void __dt__14dBgS_SplGrpChkFv(void);
void __ct__11dBgS_WtrChkFv(void);
void __dt__11dBgS_WtrChkFv(void);
void dCam_getCamera__Fv(void);
void getEventIdx__16dEvent_manager_cFP10fopAc_ac_cUc(void);
void getEventIdx__16dEvent_manager_cFP10fopAc_ac_cPCcUc(void);
void getEventPrio__16dEvent_manager_cFP10fopAc_ac_cs(void);
void convPId__14dEvt_control_cFUi(void);
void order__14dEvt_control_cFUsUsUsUsPvPvsUc(void);
void searchMapEventData__14dEvt_control_cFUcl(void);
void setGtItm__14dEvt_control_cFUc(void);
void dKy_Sound_get__Fv(void);
void getEmitter__Q213dPa_control_c7level_cFUl(void);
void setSimpleFoot__13dPa_control_cFUlPUlR13cBgS_PolyInfoPC4cXyzPC12dKy_tevstr_ciPC5csXyzPC4cXyzP18dPa_levelEcallBackScPC4cXyz(
    void);
void set__13dPa_control_cFUlUcUsPC4cXyzPC12dKy_tevstr_cPC5csXyzPC4cXyzUcP18dPa_levelEcallBackScPC8_GXColorPC8_GXColorPC4cXyzf(
    void);
void dPath_GetPolyRoomPathVec__FRC13cBgS_PolyInfoP4cXyzPi(void);
const char* dStage_getName2__FsSc(s16, s8);
void checkArea__13daTagStream_cFPC4cXyz(void);
void enemySearchJugge__FPvPv(void);
void event_second_actor__FUs(void);
void fopAcM_CreateAppend__Fv(void);
void fopAcM_DeleteHeap__FP10fopAc_ac_c(void);
void fopAcM_FastCreate__FsPFPv_iPvPv(void);
void fopAcM_Log__FPC10fopAc_ac_cPCc(void);
void fopAcM_SearchByID__FUiPP10fopAc_ac_c(void);
void fopAcM_calcSpeed__FP10fopAc_ac_c(void);
void fopAcM_callCallback__FP10fopAc_ac_cPFP10fopAc_ac_c_iP7JKRHeap(void);
void fopAcM_cancelCarryNow__FP10fopAc_ac_c(void);
void fopAcM_create__FsUsUlPC4cXyziPC5csXyzPC4cXyzScPFPv_i(void);
void fopAcM_createChild__FsUiUlPC4cXyziPC5csXyzPC4cXyzScPFPv_i(void);
void fopAcM_createDemoItem__FPC4cXyziiPC5csXyziPC4cXyzUc(void);
void fopAcM_createItem__FPC4cXyziiiPC5csXyzPC4cXyzi(void);
void fopAcM_createItemForDirectGet__FPC4cXyziiPC5csXyzPC4cXyzff(void);
void fopAcM_createItemForPresentDemo__FPC4cXyziUciiPC5csXyzPC4cXyz(void);
void fopAcM_createItemForSimpleDemo__FPC4cXyziiPC5csXyzPC4cXyzff(void);
void fopAcM_createItemForTrBoxDemo__FPC4cXyziiiPC5csXyzPC4cXyz(void);
void fopAcM_createItemFromTable__FPC4cXyziiiPC5csXyziPC4cXyzPfPfb(void);
void fopAcM_create__FsUlPC4cXyziPC5csXyzPC4cXyzSc(void);
void fopAcM_cullingCheck__FPC10fopAc_ac_c(void);
void fopAcM_delete__FP10fopAc_ac_c(void);
void fopAcM_delete__FUi(void);
void fopAcM_effHamonSet__FPUlPC4cXyzff(void);
void fopAcM_entrySolidHeap__FP10fopAc_ac_cPFP10fopAc_ac_c_iUl(void);
void fopAcM_entrySolidHeap___FP10fopAc_ac_cPFP10fopAc_ac_c_iUl(void);
void fopAcM_fastCreate__FsUlPC4cXyziPC5csXyzPC4cXyzScPFPv_iPv(void);
void fopAcM_fastCreateItem__FPC4cXyziiPC5csXyzPC4cXyzPfPfiiPFPv_i(void);
void fopAcM_fastCreateItem2__FPC4cXyziiiiPC5csXyzPC4cXyz(void);
void fopAcM_fastCreate__FPCcUlPC4cXyziPC5csXyzPC4cXyzPFPv_iPv(void);
void fopAcM_findObject4EventCB__FP10fopAc_ac_cPv(void);
void fopAcM_findObjectCB__FPC10fopAc_ac_cPv(void);
void gndCheck__11fopAcM_gc_cFPC4cXyz(void);
void fopAcM_getEventPartner__FPC10fopAc_ac_c(void);
void fopAcM_getItemEventPartner__FPC10fopAc_ac_c(void);
void fopAcM_getItemNoFromTableNo__FUc(void);
void fopAcM_getPolygonAngle__FRC13cBgS_PolyInfos(void);
void fopAcM_getPolygonAngle__FPC8cM3dGPlas(void);
void fopAcM_getProcNameString__FPC10fopAc_ac_c(void);
void fopAcM_getTalkEventPartner__FPC10fopAc_ac_c(void);
void fopAcM_getWaterStream__FPC4cXyzRC13cBgS_PolyInfoP4cXyzPii(void);
void fopAcM_getWaterY__FPC4cXyzPf(void);
void lineCheck__11fopAcM_lc_cFPC4cXyzPC4cXyzPC10fopAc_ac_c(void);
void fopAcM_orderCatchEvent__FP10fopAc_ac_cP10fopAc_ac_cUsUs(void);
void fopAcM_orderChangeEventId__FP10fopAc_ac_csUsUs(void);
void fopAcM_orderDoorEvent__FP10fopAc_ac_cP10fopAc_ac_cUsUs(void);
void fopAcM_orderItemEvent__FP10fopAc_ac_cUsUs(void);
void fopAcM_orderMapToolAutoNextEvent__FP10fopAc_ac_cUcsUsUsUs(void);
void fopAcM_orderMapToolEvent__FP10fopAc_ac_cUcsUsUsUs(void);
void fopAcM_orderOtherEvent__FP10fopAc_ac_cPCcUsUsUs(void);
void fopAcM_orderOtherEventId__FP10fopAc_ac_csUcUsUsUs(void);
void fopAcM_orderOtherEvent__FP10fopAc_ac_cP10fopAc_ac_cPCcUsUsUs(void);
void fopAcM_orderSpeakEvent__FP10fopAc_ac_cUsUs(void);
void fopAcM_orderTalkEvent__FP10fopAc_ac_cP10fopAc_ac_cUsUs(void);
void fopAcM_orderTalkItemBtnEvent__FUsP10fopAc_ac_cP10fopAc_ac_cUsUs(void);
void fopAcM_orderTreasureEvent__FP10fopAc_ac_cP10fopAc_ac_cUsUs(void);
void fopAcM_posMove__FP10fopAc_ac_cPC4cXyz(void);
void fopAcM_posMoveF__FP10fopAc_ac_cPC4cXyz(void);
void fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c(void);
void fopAcM_searchActorDistance__FPC10fopAc_ac_cPC10fopAc_ac_c(void);
void fopAcM_searchActorDistanceXZ__FPC10fopAc_ac_cPC10fopAc_ac_c(void);
void fopAcM_searchActorDistanceXZ2__FPC10fopAc_ac_cPC10fopAc_ac_c(void);
void fopAcM_searchFromName__FPCcUlUl(void);
void fopAcM_searchFromName4Event__FPCcs(void);
void fopAcM_seenActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c(void);
void fopAcM_setCarryNow__FP10fopAc_ac_ci(void);
void fopAcM_setCullSizeBox__FP10fopAc_ac_cffffff(void);
void fopAcM_setEffectMtx__FPC10fopAc_ac_cPC12J3DModelData(void);
void fopAcM_setRoomLayer__FPvi(void);
void fopAcM_setStageLayer__FPv(void);
void waterCheck__11fopAcM_wt_cFPC4cXyz(void);
BOOL fopAc_IsActor__FPv(void*);
void fopScnM_SearchByID(void);
void fpoAcM_relativePos__FPC10fopAc_ac_cPC4cXyzP4cXyz(void);
void fopAcM_SearchByName__FsPP10fopAc_ac_c(void);
void fopAcM_createChildFromOffset__FsUiUlPC4cXyziPC5csXyzPC4cXyzScPFPv_i(void);
void fopAcM_SetMin__FP10fopAc_ac_cfff(void);
void fopAcM_SetMax__FP10fopAc_ac_cfff(void);
void fopAcM_setCullSizeSphere__FP10fopAc_ac_cffff(void);
void fopAcM_setCullSizeBox2__FP10fopAc_ac_cP12J3DModelData(void);
void fopAcM_addAngleY__FP10fopAc_ac_css(void);
void fopAcM_searchActorAngleX__FPC10fopAc_ac_cPC10fopAc_ac_c(void);
void fopAcM_searchActorDistance2__FPC10fopAc_ac_cPC10fopAc_ac_c(void);
void fopAcM_rollPlayerCrash__FPC10fopAc_ac_cfUlffif(void);
void fopAcM_checkCullingBox__FPA4_fffffff(void);
void fopAcM_orderPotentialEvent__FP10fopAc_ac_cUsUsUs(void);
void fopAcM_createItemFromEnemyID__FUcPC4cXyziiPC5csXyzPC4cXyzPfPf(void);
void fopAcM_createItemForBoss__FPC4cXyziiPC5csXyzPC4cXyzffi(void);
void fopAcM_createItemForMidBoss__FPC4cXyziiPC5csXyzPC4cXyzii(void);
void fopAcM_createBokkuri__FUsPC4cXyziiiPC4cXyzii(void);
void fopAcM_createWarpHole__FPC4cXyzPC5csXyziUcUcUc(void);
void fopAcM_myRoomSearchEnemy__FSc(void);
void fopAcM_createDisappear__FPC10fopAc_ac_cPC4cXyzUcUcUc(void);
void fopAcM_otoCheck__FPC10fopAc_ac_cf(void);
void fopAcM_otherBgCheck__FPC10fopAc_ac_cPC10fopAc_ac_c(void);
void fopAcM_wayBgCheck__FPC10fopAc_ac_cff(void);
void fopAcM_plAngleCheck__FPC10fopAc_ac_cs(void);
void fopAcM_effSmokeSet1__FPUlPUlPC4cXyzPC5csXyzfPC12dKy_tevstr_ci(void);
void fopAcM_riverStream__FP4cXyzPsPff(void);
void fopAcM_carryOffRevise__FP10fopAc_ac_c(void);
void roofCheck__11fopAcM_rc_cFPC4cXyz(void);
void __sinit_f_op_actor_mng_cpp(void);
void func_8001E0D4(void);
void func_8001E0DC(void);
void func_8001E0E4(void);
void func_8001E0EC(void);
void func_8001E0F4(void);
void func_8001E0FC(void);
void func_8001E104(void);
void func_8001E10C(void);
void func_8001E114(void);
void onFrollCrashFlg__9daPy_py_cFUci(void);
void checkWolfDash__9daPy_py_cCFv(void);
void checkFrontRoll__9daPy_py_cCFv(void);
void checkHorseRide__9daPy_py_cCFv(void);
void getGrabActorID__9daPy_py_cCFv(void);
void func_80361C24(void);
void get_vectle_calc__FPC4cXyzPC4cXyzP4cXyz(void);
void isHeart__FUc(void);
void __dt__5l_HIOFv(void);
s32 mDoExt_adjustSolidHeap__FP12JKRSolidHeap(JKRSolidHeap*);
JKRSolidHeap* mDoExt_createSolidHeapFromGame__FUlUl(u32 size, u32 alignment);
void mDoMtx_YrotS__FPA4_fs(void);
void normalizeZP__4cXyzFv(void);
void onActor__10dSv_info_cFii(void);
void vectle_calc__FPC10DOUBLE_POSP4cXyz(void);
void getFreeSize__7JKRHeapCFv(void);

s32 check_itemno__Fi(int);
int abs(int);
char* strcpy(char*, const char*);
void __dt__14dBgS_ObjLinChkFv(void);
void __dt__11dBgS_GndChkFv(void);
}

class j3dsys {
public:
    Mtx mtx;
};

// additional symbols needed for f_op_actor_mng.cpp
// autogenerated by split.py v0.4 at 2021-01-25 19:11:04.087561
extern u8 lbl_803A35F0;
extern u8 lbl_803A3740;
extern u8 lbl_803A37C0;
extern u8 lbl_803A37CC;
extern u8 lbl_803A37FC;
extern u8 lbl_803A382C;
extern u8 lbl_803F1C00;
extern u8 lbl_803F1C48;
extern u8 lbl_803F1CC4;
extern u8 lbl_803F1D24;
extern u8 lbl_803F1D80;
extern u8 lbl_803F6094;
extern u8 lbl_80450768;
extern u8 lbl_80450C70;
extern u8 lbl_80450CC8;
extern u8 lbl_80450CC9;
extern u8 lbl_80450CD0;
extern u8 lbl_80450CD4;
extern u8 lbl_80450CD8;
extern u8 g_fpcNd_type;
extern u8 _mProcID;
extern u8 lbl_80450D64;
extern u8 lbl_80450DA4;
extern u8 lbl_80450F90;
extern u8 lbl_80451164;
extern f32 lbl_80451C00;  // f_op_actor_mng::@4263, 10.0
extern f32 lbl_80451C04;  // f_op_actor_mng::@4645, 0.0
extern u8 lbl_80451C08;
extern u8 lbl_80451C10;
extern f64 lbl_80451C18;
extern u8 lbl_80451C20;
extern u8 lbl_80451C24;
extern u8 lbl_80451C28;
extern f32 lbl_80451C2C;  // 32767.0f
extern f32 lbl_80451C30;  // 2.0f
extern f32 lbl_80451C34;  // 8192.0f
extern f32 lbl_80451C38;  // 1.0f
extern f32 lbl_80451C3C;  // 0.3f
extern f32 lbl_80451C40;  // 0.2f
extern f32 lbl_80451C44;  // 2048.0f
extern f32 lbl_80451C48;  // 100.0f
extern f32 lbl_80451C4C;  // 50.0f
extern u8 lbl_80451C50;
extern u8 lbl_80451C54;
extern u8 lbl_80451C58;
extern u8 lbl_80451C5C;
extern u8 lbl_80451C60;
extern j3dsys lbl_80434AC8;
extern f32 lbl_80450AE0[4];  // array is fake, to force 2 step load
extern u8 lbl_803DD470;

// this belongs to msl_c/math.h, but can't go there currently because of data
inline f32 sqrtf(f32 mag) {
    if (mag > FLOAT_LABEL(lbl_80451C04)) {
        f64 tmpd = __frsqrte(mag);
        tmpd = DOUBLE_LABEL(lbl_80451C08) * tmpd * (DOUBLE_LABEL(lbl_80451C10) - tmpd * tmpd * mag);
        tmpd = DOUBLE_LABEL(lbl_80451C08) * tmpd * (DOUBLE_LABEL(lbl_80451C10) - tmpd * tmpd * mag);
        return DOUBLE_LABEL(lbl_80451C08) * tmpd *
               (DOUBLE_LABEL(lbl_80451C10) - tmpd * tmpd * mag) * mag;
    } else if (mag < DOUBLE_LABEL(lbl_80451C18)) {
        return /* __float_nan */ lbl_80450AE0[0];
    } else if (fpclassify(mag) == 1) {
        return /* __float_nan */ lbl_80450AE0[0];
    } else {
        return mag;
    }
}

inline u32 fopAcM_GetID(const void* pProc) {
    return fpcM_GetID(pProc);
}

// fopAcM_FastCreate__FsPFPv_iPvPv
void* fopAcM_FastCreate(s16 pProcTypeID, FastCreateReqFunc param_2, void* param_3, void* pData) {
    return fpcM_FastCreate(pProcTypeID, param_2, param_3, pData);
}

// fopAcM_setStageLayer__FPv
// fopAcM_setStageLayer(void*)
asm void fopAcM_setStageLayer(void*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_800198C4.s"
}

// fopAcM_setRoomLayer__FPvi
// fopAcM_setRoomLayer(void*, int)
asm int fopAcM_setRoomLayer(void*, int){nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_80019934.s"
}

// fopAcM_SearchByID__FUiPP10fopAc_ac_c
s32 fopAcM_SearchByID(unsigned int id, fopAc_ac_c** actor) {
    if (fpcM_IsCreating(id) != 0) {
        *actor = NULL;
    } else {
        *actor = (fopAc_ac_c*)fopAcIt_Judge((fopAcIt_JudgeFunc)fpcSch_JudgeByID, &id);
        if (*actor == NULL) {
            return 0;
        }
    }
    return 1;
}

// fopAcM_SearchByName__FsPP10fopAc_ac_c
s32 fopAcM_SearchByName(s16 procName, fopAc_ac_c** actor) {
    *actor = (fopAc_ac_c*)fopAcIt_Judge((fopAcIt_JudgeFunc)fpcSch_JudgeForPName, &procName);
    if (*actor == NULL) {
        return 0;
    } else {
        if (fpcM_IsCreating(fopAcM_GetID(*actor)) != 0) {
            *actor = NULL;
        }
        return 1;
    }
}

// fopAcM_CreateAppend__Fv
fopAcM_prm_class* fopAcM_CreateAppend(void) {
    fopAcM_prm_class* params =
        static_cast<fopAcM_prm_class*>(cMl::memalignB(-4, sizeof(fopAcM_prm_class)));
    if (params != NULL) {
        cLib_memSet(params, 0, sizeof(fopAcM_prm_class));
        params->unk_0x16 = 0xFFFF;
        params->unk_0x21 = -1;
        params->unk_0x18 = 0xA;
        params->unk_0x19 = 0xA;
        params->unk_0x1A = 0xA;
        params->unk_0x1C = -1;
        params->unk_0x20 = -1;
    }
    return params;
}

// createAppend__FUsUlPC4cXyziPC5csXyzPC4cXyzScUi
fopAcM_prm_class* createAppend(u16 param_1, u32 param_2, const cXyz* param_3, int param_4,
                               const csXyz* param_5, const cXyz* param_6, s8 param_7,
                               unsigned int param_8) {
    fopAcM_prm_class* params = fopAcM_CreateAppend();
    if (params == NULL) {
        return NULL;
    } else {
        params->unk_0x16 = param_1;
        if (param_3 != NULL) {
            params->unk_0x04 = *param_3;
        } else {
            params->unk_0x04 = lbl_80430CF4;
        }
        params->unk_0x21 = param_4;
        if (param_5 != NULL) {
            params->unk_0x10 = *param_5;
        } else {
            params->unk_0x10 = lbl_80451160;
        }
        if (param_6 != NULL) {
            f32 ten = FLOAT_LABEL(lbl_80451C00);  // temp not necessary when using literal
            params->unk_0x18 = ten * param_6->x;
            params->unk_0x19 = ten * param_6->y;
            params->unk_0x1A = ten * param_6->z;
        } else {
            params->unk_0x18 = 0xA;
            params->unk_0x19 = 0xA;
            params->unk_0x1A = 0xA;
        }
        params->unk_0x00 = param_2;
        params->unk_0x1C = param_8;
        params->unk_0x20 = param_7;
        return params;
    }
}

// fopAcM_Log__FPC10fopAc_ac_cPCc
void fopAcM_Log(const fopAc_ac_c*, const char*) {}

// fopAcM_delete__FP10fopAc_ac_c
void fopAcM_delete(fopAc_ac_c* pActor) {
    fopAcM_Log(pActor, "アクターの削除");
    fpcM_Delete(pActor);
}

// fopAcM_delete__FUi
#ifdef NON_MATCHING
s32 fopAcM_delete(unsigned int pID) {
    void* searchResult = (void*)fopAcIt_Judge((fopAcIt_JudgeFunc)fpcSch_JudgeByID, &pID);
    const fopAc_ac_c* actor = (fopAc_ac_c*)searchResult;
    // original moves r3 -> r0, then r0 -> r31 for 0 check
    // this generates r3 -> r31 with 0 check directly
    if (searchResult != NULL) {
        fopAcM_Log(actor, "アクターの削除");
        return fpcM_Delete(searchResult);
    } else {
        return 1;
    }
}
#else
asm s32 fopAcM_delete(unsigned int) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_80019CB8.s"
}
#endif

// fopAcM_create__FsUsUlPC4cXyziPC5csXyzPC4cXyzScPFPv_i
s32 fopAcM_create(s16 pProcName, u16 param_2, u32 param_3, const cXyz* pPos, int param_5,
                  const csXyz* pRot, const cXyz* param_7, s8 param_8, createFunc pCreateFunc) {
    fopAcM_prm_class* params =
        createAppend(param_2, param_3, pPos, param_5, pRot, param_7, param_8, 0xFFFFFFFF);
    if (params == NULL) {
        return 0xFFFFFFFF;
    } else {
        return fpcSCtRq_Request(fpcLy_CurrentLayer(), pProcName, (stdCreateFunc)pCreateFunc, NULL,
                                params);
    }
}

// fopAcM_create__FsUlPC4cXyziPC5csXyzPC4cXyzSc
s32 fopAcM_create(s16 pProcName, u32 param_2, const cXyz* pPos, int param_4, const csXyz* pRot,
                  const cXyz* param_6, s8 param_7) {
    return fopAcM_create(pProcName, 0xFFFF, param_2, pPos, param_4, pRot, param_6, param_7, NULL);
}

// fopAcM_fastCreate__FsUlPC4cXyziPC5csXyzPC4cXyzScPFPv_iPv
void* fopAcM_fastCreate(s16 pProcTypeID, u32 param_2, const cXyz* param_3, int param_4,
                        const csXyz* param_5, const cXyz* param_6, s8 param_7, createFunc param_8,
                        void* param_9) {
    fopAcM_prm_class* prmClass =
        createAppend(0xFFFF, param_2, param_3, param_4, param_5, param_6, param_7, 0xFFFFFFFF);
    if (prmClass == NULL) {
        return NULL;
    } else {
        return fpcM_FastCreate(pProcTypeID, param_8, param_9, prmClass);
    }
}

// fopAcM_fastCreate__FPCcUlPC4cXyziPC5csXyzPC4cXyzPFPv_iPv
void* fopAcM_fastCreate(const char* pActorName, u32 pActorParams, const cXyz* pActorPos,
                        int param_4, const csXyz* pActorRot, const cXyz* param_6,
                        createFunc param_7, void* param_8) {
    objectNameInfo* nameInfo = dStage_searchName__FPCc(pActorName);
    if (nameInfo == NULL) {
        return NULL;
    } else {
        return fopAcM_fastCreate(nameInfo->mProcTypeID, pActorParams, pActorPos, param_4, pActorRot,
                                 param_6, nameInfo->unkA, param_7, param_8);
    }
}

// fopAcM_createChild__FsUiUlPC4cXyziPC5csXyzPC4cXyzScPFPv_i
s32 fopAcM_createChild(s16 pProcTypeID, unsigned int param_2, u32 pActorParams,
                       const cXyz* pActorPos, int param_5, const csXyz* pActorRot,
                       const cXyz* param_7, s8 param_8, createFunc param_9) {
    fopAcM_prm_class* paramClass = createAppend(0xFFFF, pActorParams, pActorPos, param_5, pActorRot,
                                                param_7, param_8, param_2);
    if (paramClass == NULL) {
        return -1;
    } else {
        return fpcSCtRq_Request(fpcLy_CurrentLayer(), pProcTypeID, (stdCreateFunc)param_9, NULL,
                                paramClass);
    }
}

// fopAcM_createChildFromOffset__FsUiUlPC4cXyziPC5csXyzPC4cXyzScPFPv_i
s32 fopAcM_createChildFromOffset(s16 pProcTypeID, unsigned int pParentProcID, u32 pActorParams,
                                 const cXyz* pActorPos, int param_5, const csXyz* pActorRot,
                                 const cXyz* param_7, s8 param_8, createFunc param_9) {
    struct {
        s32 procID;
    } searchParams;
    searchParams.procID = pParentProcID;
    fopAc_ac_c* parentActor =
        static_cast<fopAc_ac_c*>(fopAcIt_Judge((fopAcIt_JudgeFunc)fpcSch_JudgeByID, &searchParams));
    s16 parentRotY = parentActor->getAngle().GetY();
    cXyz tmpPos;
    if (pActorPos == NULL) {
        tmpPos = lbl_80430CF4;
    } else {
        tmpPos = *pActorPos;
    }
    csXyz tmpRot;
    if (pActorRot == NULL) {
        tmpRot = lbl_80451160;
    } else {
        tmpRot = *pActorRot;
    }
    cXyz parentPos = parentActor->getPosition();
    csXyz tmpRotCopy(tmpRot);
    tmpRotCopy.mY += parentRotY;
    parentPos.x += tmpPos.z * cM_ssin(parentRotY) + tmpPos.x * cM_scos(parentRotY);
    parentPos.y += tmpPos.y;
    parentPos.z += tmpPos.z * cM_scos(parentRotY) - tmpPos.x * cM_ssin(parentRotY);
    fopAcM_prm_class* prmClass = createAppend(0xFFFF, pActorParams, &parentPos, param_5,
                                              &tmpRotCopy, param_7, param_8, pParentProcID);
    if (prmClass == NULL) {
        return -1;
    } else {
        return fpcSCtRq_Request(fpcLy_CurrentLayer(), pProcTypeID, (stdCreateFunc)param_9, NULL,
                                prmClass);
    }
}

// fopAcM_DeleteHeap__FP10fopAc_ac_c
void fopAcM_DeleteHeap(fopAc_ac_c* pActor) {
    fopAcM_Log(pActor, "アクターのヒープの破壊");
    if (pActor->unk_0x0F0 != NULL) {
        mDoExt_destroySolidHeap__FP12JKRSolidHeap(pActor->unk_0x0F0);
        pActor->unk_0x0F0 = NULL;
    }
}

// fopAcM_callCallback__FP10fopAc_ac_cPFP10fopAc_ac_c_iP7JKRHeap
s32 fopAcM_callCallback(fopAc_ac_c* pActor, heapCallbackFunc pCallbackFunc, JKRHeap* pHeap) {
    JKRHeap* oldHeap = mDoExt_setCurrentHeap__FP7JKRHeap(pHeap);
    s32 ret = pCallbackFunc(pActor);
    mDoExt_setCurrentHeap__FP7JKRHeap(oldHeap);
    return ret;
}

// fopAcM_entrySolidHeap___FP10fopAc_ac_cPFP10fopAc_ac_c_iUl
bool fopAcM_entrySolidHeap_(fopAc_ac_c* pActor, heapCallbackFunc pHeapCallback, u32 pSize) {
    const char* procNameString = fopAcM_getProcNameString(pActor);
    JKRSolidHeap* heap00 = NULL;
    if (pSize != 0) {
        pSize = ALIGN_NEXT(pSize, 0x10);
    }
    while (true) {
        if (pSize != 0) {
            heap00 = mDoExt_createSolidHeapFromGame__FUlUl(pSize, 0x20);
            if (heap00 != NULL) {
                bool status = fopAcM_callCallback(pActor, pHeapCallback, heap00) != 0;
                if (!status) {
                    OSReport_Error("見積もりヒープサイズ(%08x)で登録失敗しました。%08x[%s]\n",
                                   pSize, heap00->getFreeSize(), procNameString);
                    mDoExt_destroySolidHeap__FP12JKRSolidHeap(heap00);
                    heap00 = NULL;
                }
            } else {
                OSReport_Error("見積もりヒープが確保できませんでした。 %08x [%s]\n", pSize,
                               procNameString);
            }
        }
        if (heap00 == NULL) {
            heap00 = mDoExt_createSolidHeapFromGame__FUlUl(0xFFFFFFFF, 0x20);
            if (heap00 == NULL) {
                OSReport_Error("最大空きヒープサイズで確保失敗。[%s]\n", procNameString);
                return false;
            }
            bool status = fopAcM_callCallback(pActor, pHeapCallback, heap00) != 0;
            if (!status) {
                OSReport_Error("最大空きヒープサイズで登録失敗。%08x[%s]\n", heap00->getFreeSize(),
                               procNameString);
                mDoExt_destroySolidHeap__FP12JKRSolidHeap(heap00);
                return false;
            }
        }
        if (heap00 == NULL) {
            break;
        }
        if (lbl_80450CC8 == 0) {
            mDoExt_adjustSolidHeap__FP12JKRSolidHeap(heap00);
            pActor->unk_0x0F0 = heap00;
            return true;
        } else {
            JKRSolidHeap* heap = NULL;
            u32 heap00Size = heap00->getSize();
            u32 alignedSize = ALIGN_NEXT(heap00Size - heap00->getFreeSize(), 0x20);
            if (alignedSize + 0x90 < mDoExt_getGameHeap__Fv()->getFreeSize()) {
                heap = mDoExt_createSolidHeapFromGame__FUlUl(alignedSize, 0x20);
            }
            if (heap != NULL) {
                if (heap < heap00) {
                    mDoExt_destroySolidHeap__FP12JKRSolidHeap(heap00);
                    heap00 = NULL;
                    bool status = fopAcM_callCallback(pActor, pHeapCallback, heap) != 0;
                    if (!status) {
                        OSReport_Error("ぴったりサイズで、登録失敗？(バグ)\n");
                        mDoExt_destroySolidHeap__FP12JKRSolidHeap(heap);
                        heap = NULL;
                    }
                } else {
                    mDoExt_destroySolidHeap__FP12JKRSolidHeap(heap);
                    heap = NULL;
                }
            }
            if (heap != NULL) {
                mDoExt_adjustSolidHeap__FP12JKRSolidHeap(heap);
                pActor->unk_0x0F0 = heap;
                return true;
            }
            if (heap00 != NULL) {
                mDoExt_adjustSolidHeap__FP12JKRSolidHeap(heap00);
                pActor->unk_0x0F0 = heap00;
                return true;
            }
            OSReport_Error("ばぐばぐです\n");
            OSReport_Error("緊急回避措置\n");
            lbl_80450CC8 = 0;
        }
    }
    OSReport_Error("fopAcM_entrySolidHeap だめでした [%s]\n", procNameString);
    return false;
}

// fopAcM_entrySolidHeap__FP10fopAc_ac_cPFP10fopAc_ac_c_iUl
bool fopAcM_entrySolidHeap(fopAc_ac_c* pActor, heapCallbackFunc pHeapCallback, u32 pSize) {
    u8 oldCC9 = lbl_80450CC9;
    if (pSize & 0x80000000) {
        lbl_80450CC9 = 1;
    }
    u8 oldCC8 = lbl_80450CC8;
    if (pSize & 0x20000000) {
        lbl_80450CC8 = 0;
    } else if (pSize & 0x10000000) {
        lbl_80450CC8 = 1;
    }
    bool result = fopAcM_entrySolidHeap_(pActor, pHeapCallback, pSize & 0xFFFFFF);
    lbl_80450CC9 = oldCC9;
    lbl_80450CC8 = oldCC8;
    return result;
}

// fopAcM_SetMin__FP10fopAc_ac_cfff
void fopAcM_SetMin(fopAc_ac_c* pActor, f32 pMinX, f32 pMinY, f32 pMinZ) {
    pActor->mCullMin.set(pMinX, pMinY, pMinZ);
}

// fopAcM_SetMax__FP10fopAc_ac_cfff
void fopAcM_SetMax(fopAc_ac_c* pActor, f32 pMaxX, f32 pMaxY, f32 pMaxZ) {
    pActor->mCullMax.set(pMaxX, pMaxY, pMaxZ);
}

// fopAcM_setCullSizeBox__FP10fopAc_ac_cffffff
void fopAcM_setCullSizeBox(fopAc_ac_c* pActor, f32 pMinX, f32 pMinY, f32 pMinZ, f32 pMaxX,
                           f32 pMaxY, f32 pMaxZ) {
    pActor->mCullMin.set(pMinX, pMinY, pMinZ);
    pActor->mCullMax.set(pMaxX, pMaxY, pMaxZ);
}

// fopAcM_setCullSizeSphere__FP10fopAc_ac_cffff
void fopAcM_setCullSizeSphere(fopAc_ac_c* pActor, f32 pMinX, f32 pMinY, f32 pMinZ, f32 pMaxX) {
    pActor->mCullMin.set(pMinX, pMinY, pMinZ);
    pActor->mCullMax.x = pMaxX;
}

// fopAcM_setCullSizeBox2__FP10fopAc_ac_cP12J3DModelData
// fopAcM_setCullSizeBox2(fopAc_ac_c*, J3DModelData*)
asm void fopAcM_setCullSizeBox2(fopAc_ac_c*, J3DModelData*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001A578.s"
}

// fopAcM_addAngleY__FP10fopAc_ac_css
bool fopAcM_addAngleY(fopAc_ac_c* pActor, s16 pTarget, s16 pStep) {
    return cLib_chaseAngleS(&fopAcM_GetAngle_p(pActor).mY, pTarget, pStep);
}

inline void fopAcM_SetSpeed(fopAc_ac_c* pActor, f32 pSpeedX, f32 pSpeedY, f32 pSpeedZ) {
    pActor->mSpeed.set(pSpeedX, pSpeedY, pSpeedZ);
}

inline f32 fopAcM_GetSpeedF(const fopAc_ac_c* pActor) {
    return pActor->mSpeedF;
}

inline f32 fopAcM_GetGravity(const fopAc_ac_c* pActor) {
    return pActor->mGravity;
}

inline f32 fopAcM_GetMaxFallSpeed(const fopAc_ac_c* pActor) {
    return pActor->mMaxFallSpeed;
}

inline const cXyz& fopAcM_GetSpeed_p(const fopAc_ac_c* pActor) {
    return pActor->mSpeed;
}

inline const cXyz& fopAcM_GetPosition_p(const fopAc_ac_c* pActor) {
    return pActor->mPosition;
}

inline void clampMin(f32& val, f32 min) {
    if (val < min) {
        val = min;
    }
}

// fopAcM_calcSpeed__FP10fopAc_ac_c
void fopAcM_calcSpeed(fopAc_ac_c* pActor) {
    f32 speedF = fopAcM_GetSpeedF(pActor);
    f32 gravity = fopAcM_GetGravity(pActor);
    f32 xSpeed = speedF * cM_ssin(pActor->getAngle().GetY());
    f32 ySpeed = pActor->mSpeed.y + gravity;
    f32 zSpeed = speedF * cM_scos(pActor->getAngle().GetY());
    clampMin(ySpeed, fopAcM_GetMaxFallSpeed(pActor));
    fopAcM_SetSpeed(pActor, xSpeed, ySpeed, zSpeed);
}

// fopAcM_posMove__FP10fopAc_ac_cPC4cXyz
void fopAcM_posMove(fopAc_ac_c* pActor, const cXyz* pXyz) {
    pActor->mPosition += pActor->mSpeed;
    if (pXyz != NULL) {
        pActor->mPosition += *pXyz;
    }
}

// fopAcM_posMoveF__FP10fopAc_ac_cPC4cXyz
void fopAcM_posMoveF(fopAc_ac_c* pActor, const cXyz* pXyz) {
    fopAcM_calcSpeed(pActor);
    fopAcM_posMove(pActor, pXyz);
}

// fopAcM_searchActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c
s16 fopAcM_searchActorAngleY(const fopAc_ac_c* pActorA, const fopAc_ac_c* pActorB) {
    return cLib_targetAngleY(&pActorA->mPosition, &pActorB->mPosition);
}

inline f32 JMAFastSqrt__Ff(f32 f) {
    if (f > lbl_80451C04) {
        f *= __frsqrte(f);  // generates a useless frsp
    }
    return f;
}

inline f32 square(f32 f) {
    return f * f;
}

// fopAcM_searchActorAngleX__FPC10fopAc_ac_cPC10fopAc_ac_c
#ifdef NON_MATCHING
s16 fopAcM_searchActorAngleX(const fopAc_ac_c* pActorA, const fopAc_ac_c* pActorB) {
    const cXyz& posA = fopAcM_GetPosition_p(pActorA);
    const cXyz& posB = fopAcM_GetPosition_p(pActorB);
    return cM_atan2s(posB.y - posA.y,
                     JMAFastSqrt__Ff(square(posB.x - posA.x) + square(posB.z - posA.z)));
}
#else
asm s16 fopAcM_searchActorAngleX(const fopAc_ac_c*, const fopAc_ac_c*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001A738.s"
}
#endif

// fopAcM_seenActorAngleY__FPC10fopAc_ac_cPC10fopAc_ac_c
s32 fopAcM_seenActorAngleY(const fopAc_ac_c* pActorA, const fopAc_ac_c* pActorB) {
    return abs(static_cast<s16>(cLib_targetAngleY(&pActorA->mPosition, &pActorB->mPosition) -
                                pActorA->unk_0x4E6));
}

// fopAcM_searchActorDistance__FPC10fopAc_ac_cPC10fopAc_ac_c
f32 fopAcM_searchActorDistance(const fopAc_ac_c* pActorA, const fopAc_ac_c* pActorB) {
    cXyz tmp = (pActorB->mPosition - pActorA->mPosition);
    return sqrtf(tmp.abs2());
}

// fopAcM_searchActorDistance2__FPC10fopAc_ac_cPC10fopAc_ac_c
f32 fopAcM_searchActorDistance2(const fopAc_ac_c* pActorA, const fopAc_ac_c* pActorB) {
    cXyz tmp = (pActorB->mPosition - pActorA->mPosition);
    return tmp.abs2();
}

// TODO: replace calls to this with .abs2XZ, needs additional float constant at the moment
inline f32 cXyzAbs2XZ(const cXyz& ths) {
    cXyz tmp(ths.x, /* 0.0f */ lbl_80451C04, ths.z);
    return tmp.abs2();
}

// fopAcM_searchActorDistanceXZ__FPC10fopAc_ac_cPC10fopAc_ac_c
f32 fopAcM_searchActorDistanceXZ(const fopAc_ac_c* pActorA, const fopAc_ac_c* pActorB) {
    const cXyz& posA = fopAcM_GetPosition_p(pActorA);
    const cXyz& posB = fopAcM_GetPosition_p(pActorB);
    return sqrtf(cXyzAbs2XZ(posB - posA));
}

// fopAcM_searchActorDistanceXZ2__FPC10fopAc_ac_cPC10fopAc_ac_c
f32 fopAcM_searchActorDistanceXZ2(const fopAc_ac_c* pActorA, const fopAc_ac_c* pActorB) {
    const cXyz& posA = fopAcM_GetPosition_p(pActorA);
    const cXyz& posB = fopAcM_GetPosition_p(pActorB);
    return cXyzAbs2XZ(posB - posA);
}

// fopAcM_rollPlayerCrash__FPC10fopAc_ac_cfUlffif
// fopAcM_rollPlayerCrash(const fopAc_ac_c*, f32, u32, f32, f32, int, f32)
asm s32 fopAcM_rollPlayerCrash(const fopAc_ac_c*, f32, u32, f32, f32, int, f32){nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001AAE0.s"
}

// fopAcM_checkCullingBox__FPA4_fffffff
s32 fopAcM_checkCullingBox(Mtx pMtx, f32 pX1, f32 pY1, f32 pZ1, f32 pX2, f32 pY2, f32 pZ2) {
    Vec tmp1 = {pX1, pY1, pZ1};
    Vec tmp2 = {pX2, pY2, pZ2};
    Mtx tmpMtx;
    PSMTXConcat(lbl_80434AC8.mtx, pMtx, tmpMtx);
    return clip__11J3DUClipperCFPA4_CfP3VecP3Vec(&lbl_803DD8E4, tmpMtx, &tmp2, &tmp1) != 0;
}

// fopAcM_cullingCheck__FPC10fopAc_ac_c
asm s32 fopAcM_cullingCheck(const fopAc_ac_c*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001ACEC.s"
}

// event_second_actor__FUs
// event_second_actor(u16)
asm s32 event_second_actor(u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B058.s"
}

// fopAcM_orderTalkEvent__FP10fopAc_ac_cP10fopAc_ac_cUsUs
// fopAcM_orderTalkEvent(fopAc_ac_c*, fopAc_ac_c*, u16, u16)
asm s32 fopAcM_orderTalkEvent(fopAc_ac_c*, fopAc_ac_c*, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B068.s"
}

// fopAcM_orderTalkItemBtnEvent__FUsP10fopAc_ac_cP10fopAc_ac_cUsUs
// fopAcM_orderTalkItemBtnEvent(u16, fopAc_ac_c*, fopAc_ac_c*, u16, u16)
asm s32 fopAcM_orderTalkItemBtnEvent(u16, fopAc_ac_c*, fopAc_ac_c*, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B0FC.s"
}

// fopAcM_orderSpeakEvent__FP10fopAc_ac_cUsUs
// fopAcM_orderSpeakEvent(fopAc_ac_c*, u16, u16)
asm s32 fopAcM_orderSpeakEvent(fopAc_ac_c*, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B19C.s"
}

// fopAcM_orderDoorEvent__FP10fopAc_ac_cP10fopAc_ac_cUsUs
// fopAcM_orderDoorEvent(fopAc_ac_c*, fopAc_ac_c*, u16, u16)
asm s32 fopAcM_orderDoorEvent(fopAc_ac_c*, fopAc_ac_c*, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B244.s"
}

// fopAcM_orderCatchEvent__FP10fopAc_ac_cP10fopAc_ac_cUsUs
// fopAcM_orderCatchEvent(fopAc_ac_c*, fopAc_ac_c*, u16, u16)
asm s32 fopAcM_orderCatchEvent(fopAc_ac_c*, fopAc_ac_c*, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B334.s"
}

// fopAcM_orderOtherEvent__FP10fopAc_ac_cPCcUsUsUs
// fopAcM_orderOtherEvent(fopAc_ac_c*, const s8*, u16, u16, u16)
asm s32 fopAcM_orderOtherEvent(fopAc_ac_c*, const char*, u16, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B3CC.s"
}

// fopAcM_orderOtherEvent__FP10fopAc_ac_cP10fopAc_ac_cPCcUsUsUs
// fopAcM_orderOtherEvent(fopAc_ac_c*, fopAc_ac_c*, const s8*, u16, u16, u16)
asm s32 fopAcM_orderOtherEvent(fopAc_ac_c*, fopAc_ac_c*, const char*, u16, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B4E0.s"
}

// fopAcM_orderChangeEventId__FP10fopAc_ac_csUsUs
// fopAcM_orderChangeEventId(fopAc_ac_c*, s16, u16, u16)
asm s32 fopAcM_orderChangeEventId(fopAc_ac_c*, s16, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B5E4.s"
}

// fopAcM_orderOtherEventId__FP10fopAc_ac_csUcUsUsUs
// fopAcM_orderOtherEventId(fopAc_ac_c*, s16, u8, u16, u16, u16)
asm s32 fopAcM_orderOtherEventId(fopAc_ac_c*, s16, u8, u16, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B67C.s"
}

// fopAcM_orderMapToolEvent__FP10fopAc_ac_cUcsUsUsUs
// fopAcM_orderMapToolEvent(fopAc_ac_c*, u8, s16, u16, u16, u16)
asm s32 fopAcM_orderMapToolEvent(fopAc_ac_c*, u8, s16, u16, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B7B4.s"
}

// fopAcM_orderMapToolAutoNextEvent__FP10fopAc_ac_cUcsUsUsUs
// fopAcM_orderMapToolAutoNextEvent(fopAc_ac_c*, u8, s16, u16, u16, u16)
asm s32 fopAcM_orderMapToolAutoNextEvent(fopAc_ac_c*, u8, s16, u16, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B8E0.s"
}

// fopAcM_orderPotentialEvent__FP10fopAc_ac_cUsUsUs
// fopAcM_orderPotentialEvent(fopAc_ac_c*, u16, u16, u16)
asm s32 fopAcM_orderPotentialEvent(fopAc_ac_c*, u16, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B908.s"
}

// fopAcM_orderItemEvent__FP10fopAc_ac_cUsUs
// fopAcM_orderItemEvent(fopAc_ac_c*, u16, u16)
asm s32 fopAcM_orderItemEvent(fopAc_ac_c*, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001B9D0.s"
}

// fopAcM_orderTreasureEvent__FP10fopAc_ac_cP10fopAc_ac_cUsUs
// fopAcM_orderTreasureEvent(fopAc_ac_c*, fopAc_ac_c*, u16, u16)
asm s32 fopAcM_orderTreasureEvent(fopAc_ac_c*, fopAc_ac_c*, u16, u16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001BA7C.s"
}

// fopAcM_getTalkEventPartner__FPC10fopAc_ac_c
// fopAcM_getTalkEventPartner(const fopAc_ac_c*)
asm s32 fopAcM_getTalkEventPartner(const fopAc_ac_c*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001BB14.s"
}

// fopAcM_getItemEventPartner__FPC10fopAc_ac_c
// fopAcM_getItemEventPartner(const fopAc_ac_c*)
asm s32 fopAcM_getItemEventPartner(const fopAc_ac_c*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001BB44.s"
}

// fopAcM_getEventPartner__FPC10fopAc_ac_c
// fopAcM_getEventPartner(const fopAc_ac_c*)
asm s32 fopAcM_getEventPartner(const fopAc_ac_c*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001BB74.s"
}

// fopAcM_createItemForPresentDemo__FPC4cXyziUciiPC5csXyzPC4cXyz
// fopAcM_createItemForPresentDemo(const cXyz*, int, u8, int, int, const csXyz*, const cXyz*)
asm s32 fopAcM_createItemForPresentDemo(const cXyz*, int, u8, int, int, const csXyz*, const cXyz*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001BBE8.s"
}

// fopAcM_createItemForTrBoxDemo__FPC4cXyziiiPC5csXyzPC4cXyz
// fopAcM_createItemForTrBoxDemo(const cXyz*, int, int, int, const csXyz*, const cXyz*)
asm s32 fopAcM_createItemForTrBoxDemo(const cXyz*, int, int, int, const csXyz*, const cXyz*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001BC74.s"
}

// fopAcM_getItemNoFromTableNo__FUc
// fopAcM_getItemNoFromTableNo(u8)
asm s32 fopAcM_getItemNoFromTableNo(u8) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001BCFC.s"
}

// fopAcM_createItemFromEnemyID__FUcPC4cXyziiPC5csXyzPC4cXyzPfPf
// fopAcM_createItemFromEnemyID(u8, const cXyz*, int, int, const csXyz*, const cXyz*, f32*, f32*)
asm s32 fopAcM_createItemFromEnemyID(u8, const cXyz*, int, int, const csXyz*, const cXyz*, f32*,
                                     f32*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001BE14.s"
}

// fopAcM_createItemFromTable__FPC4cXyziiiPC5csXyziPC4cXyzPfPfb
// fopAcM_createItemFromTable(const cXyz*, int, int, int, const csXyz*, int, const cXyz*, f32*,
// f32*, bool)
asm s32 fopAcM_createItemFromTable(const cXyz*, int, int, int, const csXyz*, int, const cXyz*, f32*,
                                   f32*, bool){nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001BF64.s"
}

// fopAcM_createDemoItem__FPC4cXyziiPC5csXyziPC4cXyzUc
s32 fopAcM_createDemoItem(const cXyz* pPos, int pItemNo, int pItemBitNo, const csXyz* pRot,
                          int param_5, const cXyz* param_6, u8 param_7) {
    if (pItemNo == 0xFF) {
        return -1;
    } else {
        // TODO: actor enum
        return fopAcM_create(0x21d,
                             (pItemNo & 0xFF) | (pItemBitNo & 0x7F) << 0x8 | (param_7 << 0x10),
                             pPos, param_5, pRot, param_6, -1);
    }
}

// fopAcM_createItemForBoss__FPC4cXyziiPC5csXyzPC4cXyzffi
s32 fopAcM_createItemForBoss(const cXyz* pPos, int param_2, int param_3, const csXyz* pRot,
                             const cXyz* param_5, f32 param_6, f32 param_7, int param_8) {
    fopAc_ac_c* actor = static_cast<fopAc_ac_c*>(
        fopAcM_fastCreate(0x21b, 0xFFFF0000 | param_8 << 0x8 | (param_2 & 0xFF), pPos, param_3,
                          pRot, param_5, -1, NULL, NULL));
    if (actor != NULL) {
        actor->mSpeedF = param_6;
        actor->mSpeed.y = param_7;
    }
    return fopAcM_GetID(actor);
}

// fopAcM_createItemForMidBoss__FPC4cXyziiPC5csXyzPC4cXyzii
s32 fopAcM_createItemForMidBoss(const cXyz* pPos, int param_2, int param_3, const csXyz* pRot,
                                const cXyz* param_5, int param_6, int param_7) {
    return fopAcM_createItem(pPos, param_2, param_7, param_3, &csXyz(lbl_80451160), param_5, 0x6);
}

// fopAcM_createItemForDirectGet__FPC4cXyziiPC5csXyzPC4cXyzff
void* fopAcM_createItemForDirectGet(const cXyz* pPos, int param_2, int param_3, const csXyz* pRot,
                                    const cXyz* param_5, f32 param_6, f32 param_7) {
    return fopAcM_fastCreateItem(pPos, param_2, param_3, pRot, param_5, &param_6, &param_7, -1, 0x7,
                                 NULL);
}

// fopAcM_createItemForSimpleDemo__FPC4cXyziiPC5csXyzPC4cXyzff
void* fopAcM_createItemForSimpleDemo(const cXyz* pPos, int param_2, int param_3, const csXyz* pRot,
                                     const cXyz* param_5, f32 param_6, f32 param_7) {
    return fopAcM_fastCreateItem(pPos, param_2, param_3, pRot, param_5, &param_6, &param_7, -1, 0x4,
                                 NULL);
}

inline u32 maskShift(int val, int bits, int shift) {
    return (val & ((1 << bits) - 1)) << shift;
}

inline u32 makeItemParams(int iNo, int p8, int unk, int p9) {
    // iNo = ;
    // u32 part1 = (p8 & 0xFF) << 0x8;
    // iNo &= 0xFF;
    // u32 part2 = (iNo);
    // u32 part3 = (unk & 0xFF) << 0x10;
    // u32 part4 = ((p9 & 0xF) << 0x18);
    // return part1 | part2 | part3 | part4;
    // u32 part2 = (p8 & 0xFF) << 0x8;
    // u32 part2 = maskShift(p8, 8, 0x8);
    // part2 |= maskShift(iNo, 8, 0);
    // part2 |= maskShift(unk, 8, 0x10);
    // part2 |= maskShift(p9, 4, 0x18);
    // return part2;
    return maskShift(p8, 8, 0x8) | maskShift(iNo, 8, 0) | maskShift(unk, 8, 0x10) |
           maskShift(p9, 4, 0x18);
}

inline u32 makeItemParams2(int iNo, int p8, int unk, int p9) {
    return makeItemParams(check_itemno(iNo), p8, unk, p9);
}

// fopAcM_createItem__FPC4cXyziiiPC5csXyzPC4cXyzi
s32 fopAcM_createItem(const cXyz* pPos, int param_2, int param_3, int param_4, const csXyz* pRot,
                      const cXyz* param_6, int param_7) {
    if (param_2 == 0xFF) {
        return 0xFFFFFFFF;
    }
    csXyz tmps(lbl_80451160);
    if (pRot != NULL) {
        tmps = *pRot;
    } else {
        tmps.mY = cM_rndFX(FLOAT_LABEL(lbl_80451C2C));
    }
    tmps.mZ = 0xFF;
    u32 itemActorParams = makeItemParams(check_itemno(param_2), param_3, 0xFF, param_7);
    switch (param_2) {
    case RECOVERY_FAILY:
        return fopAcM_create(0x13f, 0xFFFFFFFF, pPos, param_4, pRot, param_6, -1);
    case KAKERA_HEART:
    case UTAWA_HEART:
        return fopAcM_create(0x21b, itemActorParams, pPos, param_4, pRot, param_6, -1);
    case TRIPLE_HEART:
        for (int i = 0; i < 2; i++) {
            fopAcM_create(0x218, itemActorParams, pPos, param_4, &tmps, param_6, -1);
            tmps.mY = cM_rndFX(FLOAT_LABEL(lbl_80451C2C));
        }
    default:
        return fopAcM_create(0x218, itemActorParams, pPos, param_4, &tmps, param_6, -1);
    }
}

// fopAcM_fastCreateItem2__FPC4cXyziiiiPC5csXyzPC4cXyz
void* fopAcM_fastCreateItem2(const cXyz* pPos, int param_2, int param_3, int param_4, int param_5,
                             const csXyz* pRot, const cXyz* param_7) {
    csXyz tmps(lbl_80451160);
    if (param_2 == 0xFF) {
        return NULL;
    }
    if (pRot != NULL) {
        tmps = *pRot;
    } else {
        tmps.mY = cM_rndFX(FLOAT_LABEL(/* 32767.0f */ lbl_80451C2C));
    }
    tmps.mZ = 0xFF;
    int tmpItemNo = check_itemno(param_2);
    u32 itemActorParams =
        (param_3 & 0xFF) << 0x8 | (tmpItemNo & 0xFF) | 0xFF << 0x10 | ((param_5 & 0xF) << 0x18);
    switch (param_2) {
    case RECOVERY_FAILY:
        return fopAcM_fastCreate(0x13f, 0xFFFFFFFF, pPos, param_4, pRot, param_7, -1, NULL, NULL);
    case KAKERA_HEART:
    case UTAWA_HEART:
        return fopAcM_fastCreate(0x21b, itemActorParams, pPos, param_4, pRot, param_7, -1, NULL,
                                 NULL);
    case TRIPLE_HEART:
        for (int i = 0; i < 2; i++) {
            fopAcM_fastCreate(0x218, itemActorParams, pPos, param_4, &tmps, param_7, -1, NULL,
                              NULL);
            tmps.mY = cM_rndFX(FLOAT_LABEL(lbl_80451C2C));
        }
    default:
        return fopAcM_fastCreate(0x218, itemActorParams, pPos, param_4, &tmps, param_7, -1, NULL,
                                 NULL);
    }
}

inline void make_prm_item(u32* actorParams, u8 p1, u8 p2, u8 p3) {
    *actorParams = (p2 << 8) | p1 | (0xFF << 0x10) | ((p3 & 0xF) << 0x18) | 0;
}

// fopAcM_fastCreateItem__FPC4cXyziiPC5csXyzPC4cXyzPfPfiiPFPv_i
#ifdef NON_MATCHING
void* fopAcM_fastCreateItem(const cXyz* pPos, int param_2, int param_3, const csXyz* pRot,
                            const cXyz* param_5, f32* param_6, f32* param_7, int param_8,
                            int param_9, createFunc param_10) {
    // regalloc: r30 -> r29, r31 -> r30, r29 -> r31
    if (param_2 == 0xFF) {
        return NULL;
    }
    csXyz tmps;
    u32 tmpItemNo = check_itemno(param_2);
    // u32 itemActorParams;
    // make_prm_item(&itemActorParams, tmpItemNo, param_8, param_9);
    u32 itemActorParams =
        makeItemParams(tmpItemNo, param_8, 0xFF, param_9);  // uses r0 instead of r3
    if (param_6 != NULL && isHeart(param_2) != false) {
        *param_6 = FLOAT_LABEL(/* 2.0f */ lbl_80451C30) * *param_6;
    }
    switch (param_2) {
    case RECOVERY_FAILY:
        return fopAcM_fastCreate(0x13f, 0xFFFFFFFF, pPos, param_3, pRot, param_5, -1, NULL, NULL);
    case KAKERA_HEART:
    case UTAWA_HEART:
        return fopAcM_fastCreate(0x21b, itemActorParams, pPos, param_3, pRot, param_5, -1, NULL,
                                 NULL);
    case TRIPLE_HEART:
        for (int i = 0; i < 2; i++) {
            if (pRot != NULL) {
                tmps.mX = pRot->mX;
                tmps.mY = pRot->mY;
                tmps.mZ = pRot->mZ;
            } else {
                tmps.mX = lbl_80451160.mX;
                tmps.mY = lbl_80451160.mY;
                tmps.mZ = lbl_80451160.mZ;
            }
            tmps.mZ = 0xFF;
            tmps.mY += (s16)cM_rndFX(FLOAT_LABEL(/* 8192.0f */ lbl_80451C34));
            fopAc_ac_c* actor = static_cast<fopAc_ac_c*>(fopAcM_fastCreate(
                0x218, itemActorParams, pPos, param_3, &tmps, param_5, -1, param_10, NULL));
            if (actor != NULL) {
                if (param_6 != NULL) {
                    actor->mSpeedF = *param_6 * (FLOAT_LABEL(/* 1.0f */ lbl_80451C38) +
                                                 cM_rndFX(FLOAT_LABEL(/* 0.3f */ lbl_80451C3C)));
                }
                if (param_7 != NULL) {
                    actor->mSpeed.y = *param_7 * (FLOAT_LABEL(/* 1.0f */ lbl_80451C38) +
                                                  cM_rndFX(FLOAT_LABEL(/* 0.2f */ lbl_80451C40)));
                }
            }
        }
    default:
        if (pRot != NULL) {
            tmps.mX = pRot->mX;
            tmps.mY = pRot->mY;
            tmps.mZ = pRot->mZ;
        } else {
            tmps.mX = lbl_80451160.mX;
            tmps.mY = lbl_80451160.mY;
            tmps.mZ = lbl_80451160.mZ;
        }
        tmps.mZ = 0xFF;
        fopAc_ac_c* actor = static_cast<fopAc_ac_c*>(fopAcM_fastCreate(
            0x218, itemActorParams, pPos, param_3, &tmps, param_5, -1, param_10, NULL));
        if (actor != NULL) {
            if (param_6 != NULL) {
                actor->mSpeedF = *param_6;
            }
            if (param_7 != NULL) {
                actor->mSpeed.y = *param_7;
            }
        }
        return actor;
    }
}
#else
asm void* fopAcM_fastCreateItem(const cXyz*, int, int, const csXyz*, const cXyz*, f32*, f32*, int,
                                int, createFunc) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001C5B0.s"
}
#endif

inline void make_prm_bokkuri(u32* pActorParams, csXyz* pRot, u8 param_2, u8 param_3, u8 param_4,
                             u8 param_5, u8 param_6) {
    pRot->mX = (param_4 << 0x8) | (param_3 & 0xFF);
    pRot->mZ = (param_6 << 0xD) | (param_2 << 0x1) | param_5;
}

// fopAcM_createBokkuri__FUsPC4cXyziiiPC4cXyzii
s32 fopAcM_createBokkuri(u16 param_1, const cXyz* pPos, int param_3, int param_4, int param_5,
                         const cXyz* param_6, int param_7, int param_8) {
    csXyz tmps(0, 0, 0);
    if (param_6 != NULL) {
        tmps.mY = param_6->atan2sX_Z();
        tmps.mY += static_cast<s16>(FLOAT_LABEL(/* 2048.0f */ lbl_80451C44) *
                                    cM_rndFX(FLOAT_LABEL(/* 1.0f */ lbl_80451C38)));
        param_8 = 1;
    }
    u32 actorParams = 0;
    make_prm_bokkuri(&actorParams, &tmps, 6, param_3, param_4, param_7, param_8);
    return fopAcM_create(0x2fc, param_1, actorParams, pPos, param_5, &tmps, NULL, 0xFF, NULL);
}

inline void make_prm_warp_hole(u32* actorParams, u8 p1, u8 p2, u8 p3) {
    u32 pp1 = (p3 << 0x8);
    u32 pp2 = (p2 << 0x10);
    u32 pp3 = (p1 << 0x1B) | 0x170000FF;
    *actorParams = pp2 | pp3 | pp1;
}

// fopAcM_createWarpHole__FPC4cXyzPC5csXyziUcUcUc
s32 fopAcM_createWarpHole(const cXyz* pPos, const csXyz* pRot, int param_3, u8 param_4, u8 param_5,
                          u8 param_6) {
    if (param_6 == 0xFF) {
        param_6 = param_4;
    }
    u32 actorParams;
    make_prm_warp_hole(&actorParams, param_5, param_6, param_4);
    return fopAcM_create(0x163, actorParams, pPos, param_3, pRot, NULL, -1);
}

// enemySearchJugge__FPvPv
void* enemySearchJugge(void* pActor, void* pData) {
    if (pActor != NULL && fopAc_IsActor__FPv(pActor) &&
        static_cast<fopAc_ac_c*>(pActor)->unk_0x496 == 2) {
        return pActor;
    } else {
        return NULL;
    }
}

// fopAcM_myRoomSearchEnemy__FSc
// fopAcM_myRoomSearchEnemy(s8)
asm s32 fopAcM_myRoomSearchEnemy(s8){nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001CA1C.s"
}

// fopAcM_createDisappear__FPC10fopAc_ac_cPC4cXyzUcUcUc
s32 fopAcM_createDisappear(const fopAc_ac_c* pActor, const cXyz* pPos, u8 param_3, u8 param_4,
                           u8 param_5) {
    s8 roomNo = pActor->mRoomNo;
    return fopAcM_GetID(fopAcM_fastCreate(0x139, (param_5 << 0x10) | (param_3 << 0x8) | param_4,
                                          pPos, roomNo, &pActor->mAngle, NULL, 0xFF, NULL, NULL));
}

// fopAcM_setCarryNow__FP10fopAc_ac_ci
// fopAcM_setCarryNow(fopAc_ac_c*, int)
asm s32 fopAcM_setCarryNow(fopAc_ac_c*, int) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001CB48.s"
}

// fopAcM_cancelCarryNow__FP10fopAc_ac_c
// fopAcM_cancelCarryNow(fopAc_ac_c*)
asm s32 fopAcM_cancelCarryNow(fopAc_ac_c*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001CBA0.s"
}

// fopAcM_otoCheck__FPC10fopAc_ac_cf
// fopAcM_otoCheck(const fopAc_ac_c*, f32)
asm f32 fopAcM_otoCheck(const fopAc_ac_c*, f32) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001CC5C.s"
}

// fopAcM_otherBgCheck__FPC10fopAc_ac_cPC10fopAc_ac_c
// fopAcM_otherBgCheck(const fopAc_ac_c*, const fopAc_ac_c*)
asm s32 fopAcM_otherBgCheck(const fopAc_ac_c*, const fopAc_ac_c*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001CDFC.s"
}

// fopAcM_wayBgCheck__FPC10fopAc_ac_cff
// fopAcM_wayBgCheck(const fopAc_ac_c*, f32, f32)
asm s32 fopAcM_wayBgCheck(const fopAc_ac_c*, f32, f32) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001CED0.s"
}

// fopAcM_plAngleCheck__FPC10fopAc_ac_cs
// fopAcM_plAngleCheck(const fopAc_ac_c*, s16)
asm s32 fopAcM_plAngleCheck(const fopAc_ac_c*, s16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001CFD8.s"
}

// fopAcM_effSmokeSet1__FPUlPUlPC4cXyzPC5csXyzfPC12dKy_tevstr_ci
// fopAcM_effSmokeSet1(u32*, u32*, const cXyz*, const csXyz*, f32, const dKy_tevstr_c*, int)
asm s32 fopAcM_effSmokeSet1(u32*, u32*, const cXyz*, const csXyz*, f32, const dKy_tevstr_c*, int) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001D020.s"
}

// fopAcM_effHamonSet__FPUlPC4cXyzff
// fopAcM_effHamonSet(u32*, const cXyz*, f32, f32)
asm s32 fopAcM_effHamonSet(u32*, const cXyz*, f32, f32){nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001D10C.s"
}

// fopAcM_riverStream__FP4cXyzPsPff
s32 fopAcM_riverStream(cXyz*, s16*, f32*, f32) {
    return 0;
}

// fopAcM_carryOffRevise__FP10fopAc_ac_c
// fopAcM_carryOffRevise(fopAc_ac_c*)
asm s32 fopAcM_carryOffRevise(fopAc_ac_c*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001D1FC.s"
}

// vectle_calc__FPC10DOUBLE_POSP4cXyz
void vectle_calc(const DOUBLE_POS* pDpos, cXyz* pOut) {
    f64 len = sqrt(pDpos->x * pDpos->x + pDpos->y * pDpos->y + pDpos->z * pDpos->z);
    if (DOUBLE_LABEL(/* 0.0 */ lbl_80451C18) != len) {
        pOut->x = pDpos->x / len;
        pOut->y = pDpos->y / len;
        pOut->z = pDpos->z / len;
    } else {
        f32 tmp0 = FLOAT_LABEL(lbl_80451C04);
        pOut->x = tmp0;
        pOut->y = tmp0;
        pOut->z = tmp0;
    }
}

// get_vectle_calc__FPC4cXyzPC4cXyzP4cXyz
void get_vectle_calc(const cXyz* pXyzA, const cXyz* pXyzB, cXyz* pOut) {
    DOUBLE_POS dPos;
    dPos.x = pXyzB->x - pXyzA->x;
    dPos.y = pXyzB->y - pXyzA->y;
    dPos.z = pXyzB->z - pXyzA->z;
    vectle_calc(&dPos, pOut);
}

const Mtx lbl_80378898 = {
    {0.5f, 0.0f, 0.0f, 0.5f},
    {0.0f, -0.5f, 0.0f, 0.5f},
    {0.0f, 0.0f, 1.0f, 0.0f},
};

// fopAcM_setEffectMtx__FPC10fopAc_ac_cPC12J3DModelData
// fopAcM_setEffectMtx(const fopAc_ac_c*, const J3DModelData*)
asm void fopAcM_setEffectMtx(const fopAc_ac_c*, const J3DModelData*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001D42C.s"
}

// fopAcM_getProcNameString__FPC10fopAc_ac_c
const char* fopAcM_getProcNameString(const fopAc_ac_c* pActor) {
    const char* name = dStage_getName2__FsSc(pActor->mBsTypeId, pActor->unk_0x499);
    return name != NULL ? name : "UNKOWN";
}

// fopAcM_findObjectCB__FPC10fopAc_ac_cPv
// fopAcM_findObjectCB(const fopAc_ac_c*, void*)
asm s32 fopAcM_findObjectCB(const fopAc_ac_c*, void*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001D5EC.s"
}

// fopAcM_searchFromName__FPCcUlUl
// fopAcM_searchFromName(const s8*, u32, u32)
asm s32 fopAcM_searchFromName(const char*, u32, u32) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001D698.s"
}

// fopAcM_findObject4EventCB__FP10fopAc_ac_cPv
// fopAcM_findObject4EventCB(fopAc_ac_c*, void*)
asm s32 fopAcM_findObject4EventCB(fopAc_ac_c*, void*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001D6F0.s"
}

// fopAcM_searchFromName4Event__FPCcs
// fopAcM_searchFromName4Event(const s8*, s16)
asm s32 fopAcM_searchFromName4Event(const char*, s16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001D7A0.s"
}

// fopAcM_getWaterY__FPC4cXyzPf
// fopAcM_getWaterY(const cXyz*, f32*)
asm s32 fopAcM_getWaterY(const cXyz*, f32*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001D890.s"
}

// fpoAcM_relativePos__FPC10fopAc_ac_cPC4cXyzP4cXyz
// fpoAcM_relativePos(const fopAc_ac_c*, const cXyz*, cXyz*)
asm void fpoAcM_relativePos(const fopAc_ac_c*, const cXyz*, cXyz*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001D900.s"
}

// fopAcM_getWaterStream__FPC4cXyzRC13cBgS_PolyInfoP4cXyzPii
// fopAcM_getWaterStream(const cXyz*, const cBgS_PolyInfo&, cXyz*, int*, int)
asm s32 fopAcM_getWaterStream(const cXyz*, const cBgS_PolyInfo&, cXyz*, int*, int) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001D9A8.s"
}

// fopAcM_getPolygonAngle__FRC13cBgS_PolyInfos
// fopAcM_getPolygonAngle(const cBgS_PolyInfo&, s16)
asm s16 fopAcM_getPolygonAngle(const cBgS_PolyInfo&, s16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001DAE4.s"
}

extern "C" {

// __dt__8cM3dGPlaFv
// cM3dGPla::~cM3dGPla(void)
asm void __dt__8cM3dGPlaFv(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001DB90.s"
}
}

// fopAcM_getPolygonAngle__FPC8cM3dGPlas
// fopAcM_getPolygonAngle(const cM3dGPla*, s16)
asm s16 fopAcM_getPolygonAngle(const cM3dGPla*, s16) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001DBD8.s"
}

// lineCheck__11fopAcM_lc_cFPC4cXyzPC4cXyzPC10fopAc_ac_c
// fopAcM_lc_c::lineCheck(const cXyz*, const cXyz*, const fopAc_ac_c*)
asm bool fopAcM_lc_c::lineCheck(const cXyz*, const cXyz*, const fopAc_ac_c*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001DC68.s"
}

// gndCheck__11fopAcM_gc_cFPC4cXyz
// fopAcM_gc_c::gndCheck(const cXyz*)
asm bool fopAcM_gc_c::gndCheck(const cXyz*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001DCBC.s"
}

// roofCheck__11fopAcM_rc_cFPC4cXyz
// fopAcM_rc_c::roofCheck(const cXyz*)
asm bool fopAcM_rc_c::roofCheck(const cXyz*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001DD1C.s"
}

// waterCheck__11fopAcM_wt_cFPC4cXyz
// fopAcM_wt_c::waterCheck(const cXyz*)
asm bool fopAcM_wt_c::waterCheck(const cXyz*) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001DD84.s"
}

// fopAcM_initManager__Fv
void fopAcM_initManager(void) {}

extern "C" {

// __sinit_f_op_actor_mng_cpp
//
asm void __sinit_f_op_actor_mng_cpp(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001DE14.s"
}

// __dt__11dBgS_WtrChkFv
// dBgS_WtrChk::~dBgS_WtrChk(void)
asm void __dt__11dBgS_WtrChkFv(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001DF30.s"
}

// __dt__15dBgS_ObjRoofChkFv
// dBgS_ObjRoofChk::~dBgS_ObjRoofChk(void)
asm void __dt__15dBgS_ObjRoofChkFv(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001DFA8.s"
}

// __dt__14dBgS_ObjGndChkFv
// dBgS_ObjGndChk::~dBgS_ObjGndChk(void)
asm void __dt__14dBgS_ObjGndChkFv(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E020.s"
}

// __dt__5l_HIOFv
// l_HIO::~l_HIO(void)
asm void __dt__5l_HIOFv(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E098.s"
}

// @20@__dt__14dBgS_ObjGndChkFv
// dBgS_ObjGndChk::@20@__dt(void)
asm void func_8001E0D4(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E0D4.s"
}

// @76@__dt__14dBgS_ObjGndChkFv
// dBgS_ObjGndChk::@76@__dt(void)
asm void func_8001E0DC(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E0DC.s"
}

// @60@__dt__14dBgS_ObjGndChkFv
// dBgS_ObjGndChk::@60@__dt(void)
asm void func_8001E0E4(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E0E4.s"
}

// @16@__dt__11dBgS_WtrChkFv
// dBgS_WtrChk::@16@__dt(void)
asm void func_8001E0EC(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E0EC.s"
}

// @52@__dt__11dBgS_WtrChkFv
// dBgS_WtrChk::@52@__dt(void)
asm void func_8001E0F4(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E0F4.s"
}

// @36@__dt__11dBgS_WtrChkFv
// dBgS_WtrChk::@36@__dt(void)
asm void func_8001E0FC(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E0FC.s"
}

// @16@__dt__15dBgS_ObjRoofChkFv
// dBgS_ObjRoofChk::@16@__dt(void)
asm void func_8001E104(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E104.s"
}

// @52@__dt__15dBgS_ObjRoofChkFv
// dBgS_ObjRoofChk::@52@__dt(void)
asm void func_8001E10C(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E10C.s"
}

// @36@__dt__15dBgS_ObjRoofChkFv
// dBgS_ObjRoofChk::@36@__dt(void)
asm void func_8001E114(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E114.s"
}

// onFrollCrashFlg__9daPy_py_cFUci
// daPy_py_c::onFrollCrashFlg(u8, int)
asm void onFrollCrashFlg__9daPy_py_cFUci(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E11C.s"
}

// checkWolfDash__9daPy_py_cCFv
// daPy_py_c::checkWolfDash(void) const
asm void checkWolfDash__9daPy_py_cCFv(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E120.s"
}

// checkFrontRoll__9daPy_py_cCFv
// daPy_py_c::checkFrontRoll(void) const
asm void checkFrontRoll__9daPy_py_cCFv(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E128.s"
}

// checkHorseRide__9daPy_py_cCFv
// daPy_py_c::checkHorseRide(void) const
asm void checkHorseRide__9daPy_py_cCFv(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E130.s"
}

// getGrabActorID__9daPy_py_cCFv
// daPy_py_c::getGrabActorID(void) const
asm void getGrabActorID__9daPy_py_cCFv(void) {
    nofralloc
#include "f/f_op/f_op_actor_mng/asm/func_8001E138.s"
}
};
