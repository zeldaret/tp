//
// Generated By: dol2asm
// Translation Unit: m_Do/m_Do_controller_pad
//

#include "m_Do/m_Do_controller_pad.h"
#include "SSystem/SComponent/c_lib.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Forward References:
//

extern "C" void create__8mDoCPd_cFv();
extern "C" void read__8mDoCPd_cFv();
extern "C" void convert__8mDoCPd_cFP27interface_of_controller_padP10JUTGamePad();
extern "C" void LRlockCheck__8mDoCPd_cFP27interface_of_controller_pad();
extern "C" void recalibrate__8mDoCPd_cFv();
extern "C" u8 m_gamePad__8mDoCPd_c[16];
extern "C" u8 m_cpadInfo__8mDoCPd_c[256];

//
// External References:
//

extern "C" void mDoRst_resetCallBack__FiPv();
extern "C" void cLib_memSet__FPviUl();
extern "C" void* __nw__FUl();
extern "C" void __ct__10JUTGamePadFQ210JUTGamePad8EPadPort();
extern "C" void read__10JUTGamePadFv();
extern "C" void clearForReset__10JUTGamePadFv();
extern "C" void getGamePad__10JUTGamePadFi();
extern "C" void setEnabled__Q210JUTGamePad7CRumbleFUl();
extern "C" void _savegpr_29();
extern "C" void _restgpr_29();
extern "C" extern u8 g_HIO[64 + 4 /* padding */];
extern "C" extern s8 data_80450580;
extern "C" u8 mResetData__6mDoRst[4 + 4 /* padding */];
extern "C" u8 sAnalogMode__10JUTGamePad[4];
extern "C" u8 sCallback__Q210JUTGamePad13C3ButtonReset[4];
extern "C" u8 sCallbackArg__Q210JUTGamePad13C3ButtonReset[4 + 4 /* padding */];
extern "C" extern bool struct_80451500;

//
// Declarations:
//

/* ############################################################################################## */
/* 803DD2D8-803DD2E8 009FF8 0010+00 2/2 6/6 0/0 .bss             m_gamePad__8mDoCPd_c */
JUTGamePad* mDoCPd_c::m_gamePad[4];

/* 803DD2E8-803DD3E8 00A008 0100+00 2/2 84/84 37/37 .bss             m_cpadInfo__8mDoCPd_c */
interface_of_controller_pad mDoCPd_c::m_cpadInfo[4];

/* 80007954-80007A94 002294 0140+00 0/0 1/1 0/0 .text            create__8mDoCPd_cFv */
void mDoCPd_c::create() {
    JUTGamePad* pad = new JUTGamePad(JUTGamePad::Port_1);
    m_gamePad[0] = pad;

    if (data_80450580 != 0) {
        m_gamePad[1] = new JUTGamePad(JUTGamePad::Port_2);
        m_gamePad[2] = new JUTGamePad(JUTGamePad::Port_3);
        m_gamePad[3] = new JUTGamePad(JUTGamePad::Port_4);
    } else {
        m_gamePad[1] = NULL;
        m_gamePad[2] = NULL;
        m_gamePad[3] = NULL;
    }

    if (!mDoRst::isReset()) {
        JUTGamePad::clearResetOccurred();
        JUTGamePad::setResetCallback(mDoRst_resetCallBack, NULL);
    }
    JUTGamePad::setAnalogMode(3);

    interface_of_controller_pad* cpad = &m_cpadInfo[0];
    for (int i = 0; i < 4; i++) {
        cpad->mTrigLockL = false;
        cpad->mHoldLockL = false;
        cpad->mTrigLockR = false;
        cpad->mHoldLockR = false;
        cpad++;
    }
}

/* 80007A94-80007B7C 0023D4 00E8+00 0/0 1/1 0/0 .text            read__8mDoCPd_cFv */
#ifdef NONMATCHING
void mDoCPd_c::read() {
    JUTGamePad::read();

    if (!mDoRst::isReset() && mDoRst::is3ButtonReset()) {
        JUTGamePad* pad = JUTGamePad::getGamePad(mDoRst::get3ButtonResetPort());

        if (!pad->isPushing3ButtonReset()) {  // Make the rumble thing right
            mDoRst::off3ButtonReset();
        }
    }

    for (int i = 0; i < 4; i++) {
        if (m_gamePad[i] == NULL) {
            cLib_memSet(m_gamePad[i], 0, 0x40);
        } else {
            convert(&m_cpadInfo[i], m_gamePad[i]);
            LRlockCheck(&m_cpadInfo[i]);
        }
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoCPd_c::read() {
    nofralloc
#include "asm/m_Do/m_Do_controller_pad/read__8mDoCPd_cFv.s"
}
#pragma pop
#endif

/* 80007B7C-80007CD0 0024BC 0154+00 1/1 0/0 0/0 .text
 * convert__8mDoCPd_cFP27interface_of_controller_padP10JUTGamePad */
void mDoCPd_c::convert(interface_of_controller_pad* pInterface, JUTGamePad* pPad) {
    pInterface->mButtonFlags = pPad->getButton();
    pInterface->mPressedButtonFlags = pPad->getTrigger();
    pInterface->mMainStickPosX = pPad->getMainStickX();
    pInterface->mMainStickPosY = pPad->getMainStickY();
    pInterface->mMainStickValue = pPad->getMainStickValue();
    pInterface->mMainStickAngle = pPad->getMainStickAngle();
    pInterface->mCStickPosX = pPad->getSubStickX();
    pInterface->mCStickPosY = pPad->getSubStickY();
    pInterface->mCStickValue = pPad->getSubStickValue();
    pInterface->mCStickAngle = pPad->getSubStickAngle();

    mDoCPd_ANALOG_CONV(pPad->getAnalogA(), pInterface->mAnalogA);
    mDoCPd_ANALOG_CONV(pPad->getAnalogB(), pInterface->mAnalogB);
    mDoCPd_TRIGGER_CONV(pPad->getAnalogL(), pInterface->mTriggerLeft);
    mDoCPd_TRIGGER_CONV(pPad->getAnalogR(), pInterface->mTriggerRight);

    pInterface->mGamepadErrorFlags = pPad->getErrorStatus();
}

/* 80007CD0-80007D74 002610 00A4+00 1/1 0/0 0/0 .text
 * LRlockCheck__8mDoCPd_cFP27interface_of_controller_pad        */
#ifdef NONMATCHING
void mDoCPd_c::LRlockCheck(interface_of_controller_pad* controllerInterface) {
    float temp_1 = controllerInterface->trigger_left;  // not sure if temp is left or right
    controllerInterface->field_0x3a = false;
    controllerInterface->field_0x3c = false;
    if (temp_1 <= g_HIO.float_global_1) {  // controllerInterface->trigger_left) {
        if (temp_1 < g_HIO.float_global_2) {
            controllerInterface->field_0x39 = false;
        }
    } else {
        if (controllerInterface->field_0x39 == false) {
            controllerInterface->field_0x3a = true;
        }
        controllerInterface->field_0x39 = true;
    }
    if (controllerInterface->trigger_right > g_HIO.float_global_1) {
        if (controllerInterface->field_0x3b == false) {
            controllerInterface->field_0x3c = true;
        }
        controllerInterface->field_0x3b = true;
        return;
    }
    if (controllerInterface->trigger_right >= g_HIO.float_global_2) {
        return;
    }
    controllerInterface->field_0x3b = false;
    return;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoCPd_c::LRlockCheck(interface_of_controller_pad* param_0) {
    nofralloc
#include "asm/m_Do/m_Do_controller_pad/LRlockCheck__8mDoCPd_cFP27interface_of_controller_pad.s"
}
#pragma pop
#endif

void mDoCPd_c::recalibrate(void) {
    JUTGamePad::clearForReset();
    JUTGamePad::CRumble::setEnabled(
        PADMask(PAD_CHAN3_BIT | PAD_CHAN2_BIT | PAD_CHAN1_BIT | PAD_CHAN0_BIT));
}
