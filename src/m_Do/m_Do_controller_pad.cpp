//
// Generated By: dol2asm
// Translation Unit: m_Do/m_Do_controller_pad
//

#include "m_Do/m_Do_controller_pad.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Types:
//

struct mDoRst {
    static u8 mResetData[4 + 4 /* padding */];
};

struct JUTGamePad {
    struct EPadPort {};

    struct CRumble {
        /* 802E19D8 */ void setEnabled(u32);
    };

    struct C3ButtonReset {
        static u8 sCallback[4];
        static u8 sCallbackArg[4 + 4 /* padding */];
    };

    /* 802E06DC */ JUTGamePad(JUTGamePad::EPadPort);
    /* 802E08E4 */ void read();
    /* 802E1024 */ void clearForReset();
    /* 802E199C */ void getGamePad(int);

    static u8 sAnalogMode[4];
};

//
// Forward References:
//

extern "C" void create__8mDoCPd_cFv();
extern "C" void read__8mDoCPd_cFv();
extern "C" void convert__8mDoCPd_cFP27interface_of_controller_padP10JUTGamePad();
extern "C" void LRlockCheck__8mDoCPd_cFP27interface_of_controller_pad();
extern "C" void recalibrate__8mDoCPd_cFv();
extern "C" u8 m_gamePad__8mDoCPd_c[16];
extern "C" u8 m_cpadInfo__8mDoCPd_c[256];

//
// External References:
//

extern "C" void mDoRst_resetCallBack__FiPv();
extern "C" void cLib_memSet__FPviUl();
extern "C" void* __nw__FUl();
extern "C" void __ct__10JUTGamePadFQ210JUTGamePad8EPadPort();
extern "C" void read__10JUTGamePadFv();
extern "C" void clearForReset__10JUTGamePadFv();
extern "C" void getGamePad__10JUTGamePadFi();
extern "C" void setEnabled__Q210JUTGamePad7CRumbleFUl();
extern "C" void PADSetAnalogMode();
extern "C" void _savegpr_29();
extern "C" void _restgpr_29();
extern "C" extern u8 g_HIO[64 + 4 /* padding */];
extern "C" extern u32 data_80450580;
extern "C" u8 mResetData__6mDoRst[4 + 4 /* padding */];
extern "C" u8 sAnalogMode__10JUTGamePad[4];
extern "C" u8 sCallback__Q210JUTGamePad13C3ButtonReset[4];
extern "C" u8 sCallbackArg__Q210JUTGamePad13C3ButtonReset[4 + 4 /* padding */];
extern "C" extern u8 struct_80451500[4];

//
// Declarations:
//

/* ############################################################################################## */
/* 803DD2D8-803DD2E8 009FF8 0010+00 2/2 6/6 0/0 .bss             m_gamePad__8mDoCPd_c */
u8 mDoCPd_c::m_gamePad[16];

/* 803DD2E8-803DD3E8 00A008 0100+00 2/2 84/84 37/37 .bss             m_cpadInfo__8mDoCPd_c */
interface_of_controller_pad mDoCPd_c::m_cpadInfo[4];

/* 80007954-80007A94 002294 0140+00 0/0 1/1 0/0 .text            create__8mDoCPd_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoCPd_c::create() {
    nofralloc
#include "asm/m_Do/m_Do_controller_pad/create__8mDoCPd_cFv.s"
}
#pragma pop

/* 80007A94-80007B7C 0023D4 00E8+00 0/0 1/1 0/0 .text            read__8mDoCPd_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoCPd_c::read() {
    nofralloc
#include "asm/m_Do/m_Do_controller_pad/read__8mDoCPd_cFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 80451A20-80451A24 000020 0004+00 1/1 0/0 0/0 .sdata2          @3709 */
SECTION_SDATA2 static f32 lit_3709 = 1.0f / 15.0f;

/* 80451A24-80451A28 000024 0004+00 1/1 0/0 0/0 .sdata2          @3710 */
SECTION_SDATA2 static f32 lit_3710 = 1.0f;

/* 80451A28-80451A30 000028 0004+04 1/1 0/0 0/0 .sdata2          @3711 */
SECTION_SDATA2 static f32 lit_3711[1 + 1 /* padding */] = {
    0.0071428571827709675f,
    /* padding */
    0.0f,
};

/* 80451A30-80451A38 000030 0008+00 1/1 0/0 0/0 .sdata2          @3713 */
SECTION_SDATA2 static f64 lit_3713 = 4503599627370496.0 /* cast u32 to float */;

/* 80007B7C-80007CD0 0024BC 0154+00 1/1 0/0 0/0 .text
 * convert__8mDoCPd_cFP27interface_of_controller_padP10JUTGamePad */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoCPd_c::convert(interface_of_controller_pad* param_0, JUTGamePad* param_1) {
    nofralloc
#include "asm/m_Do/m_Do_controller_pad/convert__8mDoCPd_cFP27interface_of_controller_padP10JUTGamePad.s"
}
#pragma pop

/* 80007CD0-80007D74 002610 00A4+00 1/1 0/0 0/0 .text
 * LRlockCheck__8mDoCPd_cFP27interface_of_controller_pad        */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoCPd_c::LRlockCheck(interface_of_controller_pad* param_0) {
    nofralloc
#include "asm/m_Do/m_Do_controller_pad/LRlockCheck__8mDoCPd_cFP27interface_of_controller_pad.s"
}
#pragma pop

/* 80007D74-80007D9C 0026B4 0028+00 0/0 1/1 0/0 .text            recalibrate__8mDoCPd_cFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void mDoCPd_c::recalibrate() {
    nofralloc
#include "asm/m_Do/m_Do_controller_pad/recalibrate__8mDoCPd_cFv.s"
}
#pragma pop
