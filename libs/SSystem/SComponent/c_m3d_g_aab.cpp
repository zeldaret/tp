//
// Generated By: dol2asm
// Translation Unit: c_m3d_g_aab
//

#include "SSystem/SComponent/c_m3d_g_aab.h"
#include "dolphin/types.h"

//
// Declarations:
//

/* 8026EC54-8026EC88 0034+00 s=0 e=4 z=0  None .text      Set__8cM3dGAabFPC4cXyzPC4cXyz */
void cM3dGAab::Set(const cXyz* pMin, const cXyz* pMax) {
    mMin = *pMin;
    mMax = *pMax;
}

/* 8026EC88-8026ECD0 0048+00 s=0 e=6 z=0  None .text      CrossY__8cM3dGAabCFPC4cXyz */
bool cM3dGAab::CrossY(const cXyz* pOther) const {
    if (mMin.x > pOther->x || mMax.x < pOther->x || mMin.z > pOther->z || mMax.z < pOther->z) {
        return false;
    } else {
        return true;
    }
}

/* 8026ECD0-8026ECE4 0014+00 s=0 e=6 z=0  None .text      UnderPlaneYUnder__8cM3dGAabCFf */
bool cM3dGAab::UnderPlaneYUnder(f32 pY) const {
    return mMin.y < pY;
}

/* 8026ECE4-8026ECF8 0014+00 s=0 e=6 z=0  None .text      TopPlaneYUnder__8cM3dGAabCFf */
bool cM3dGAab::TopPlaneYUnder(f32 pY) const {
    return mMax.y < pY;
}

/* 8026ECF8-8026ED1C 0024+00 s=0 e=6 z=0  None .text      ClearForMinMax__8cM3dGAabFv */
void cM3dGAab::ClearForMinMax(void) {
    mMin.z = 1000000000.0f;
    mMin.y = 1000000000.0f;
    mMin.x = 1000000000.0f;
    mMax.z = -1000000000.0f;
    mMax.y = -1000000000.0f;
    mMax.x = -1000000000.0f;
}

/* 8026ED1C-8026ED60 0044+00 s=1 e=3 z=0  None .text      SetMinMax__8cM3dGAabFRC4cXyz */
void cM3dGAab::SetMinMax(const cXyz& pMinMax) {
    this->SetMin(pMinMax);
    this->SetMax(pMinMax);
}

/* 8026ED60-8026EDA4 0044+00 s=0 e=2 z=0  None .text      SetMinMax__8cM3dGAabFRC8cM3dGAab */
void cM3dGAab::SetMinMax(const cM3dGAab& pOther) {
    this->SetMinMax(pOther.mMin);
    this->SetMinMax(pOther.mMax);
}

/* 8026EDA4-8026EDE4 0040+00 s=1 e=1 z=0  None .text      SetMin__8cM3dGAabFRC4cXyz */
void cM3dGAab::SetMin(const cXyz& pMin) {
    mMin.setMin(pMin);
}

/* 8026EDE4-8026EE24 0040+00 s=1 e=1 z=0  None .text      SetMax__8cM3dGAabFRC4cXyz */
void cM3dGAab::SetMax(const cXyz& pMax) {
    mMax.setMax(pMax);
}
/* 8026EE24-8026EE68 0044+00 s=0 e=1 z=0  None .text      CalcCenter__8cM3dGAabCFP4cXyz */
void cM3dGAab::CalcCenter(cXyz* pOut) const {
    PSVECAdd(&mMin, &mMax, pOut);
    PSVECScale(pOut, pOut, 0.5f);
}

/* 8026EE68-8026EEB4 004C+00 s=0 e=1 z=0  None .text      PlusR__8cM3dGAabFf */
void cM3dGAab::PlusR(f32 pR) {
    mMin -= pR;
    mMax += pR;
}
