//
// Generated By: dol2asm
// Translation Unit: c_m3d_g_tri
//

#include "SSystem/SComponent/c_m3d_g_tri.h"
#include "SSystem/SComponent/c_m3d.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Declarations:
//

/* 8026F7B0-8026F7DC 26A0F0 002C+00 0/0 1/1 0/0 .text            cross__8cM3dGTriCFPC8cM3dGCylP3Vec
 */
bool cM3dGTri::cross(const cM3dGCyl* pCylinder, Vec* out) const {
    return cM3d_Cross_CylTri(pCylinder, this, out);
}

/* 8026F7DC-8026F85C 26A11C 0080+00 0/0 0/0 6/6 .text setPos__8cM3dGTriFPC3VecPC3VecPC3Vec */
void cM3dGTri::setPos(const Vec* pA, const Vec* pB, const Vec* pC) {
    mA = *pA;
    mB = *pB;
    mC = *pC;
    cM3d_CalcPla(&mA, &mB, &mC, &mNormal, &mD);
}

/* 8026F85C-8026F8C8 26A19C 006C+00 0/0 2/2 0/0 .text
 * setBg__8cM3dGTriFPC3VecPC3VecPC3VecPC8cM3dGPla               */
void cM3dGTri::setBg(const Vec* pA, const Vec* pB, const Vec* pC, const cM3dGPla* pPlane) {
    mA = *pA;
    mB = *pB;
    mC = *pC;
    Set(pPlane);
}

/* 8026F8C8-8026F93C 26A208 0074+00 0/0 1/1 0/0 .text set__8cM3dGTriFPC3VecPC3VecPC3VecPC3Vec */
void cM3dGTri::set(const Vec* pA, const Vec* pB, const Vec* pC, const Vec* pNormal) {
    mA = *pA;
    mB = *pB;
    mC = *pC;
    SetupNP(*pNormal, *pA);
}
