//
// Generated By: dol2asm
// Translation Unit: J2DPrint
//

#include "JSystem/J2DGraph/J2DPrint.h"
#include "JSystem/JKernel/JKRHeap.h"
#include "MSL_C/stdio.h"
#include "MSL_C/stdlib.h"
#include "MSL_C/string.h"
#include "dol2asm.h"
#include "global.h"

//
// Forward References:
//

extern "C" f32 J2DPrint_print_alpha_va(J2DPrint* pPrint, u8 param_1, const char* fmt, va_list args);
extern "C" void
__ct__8J2DPrintFP7JUTFontffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColor();
extern "C" void __dt__8J2DPrintFv();
extern "C" void
private_initiate__8J2DPrintFP7JUTFontffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorb();
extern "C" void setBuffer__8J2DPrintFUl();
extern "C" void setFontSize__8J2DPrintFv();
extern "C" void locate__8J2DPrintFff();
extern "C" void print__8J2DPrintFffUcPCce();
extern "C" void printReturn__8J2DPrintFPCcff18J2DTextBoxHBinding18J2DTextBoxVBindingffUc();
extern "C" void parse__8J2DPrintFPCUciiPUsRQ28J2DPrint5TSizeUcb();
extern "C" void doCtrlCode__8J2DPrintFi();
extern "C" void doEscapeCode__8J2DPrintFPPCUcUc();
extern "C" void initchar__8J2DPrintFv();
extern "C" void getNumberS32__8J2DPrintFPPCUclli();
extern "C" void getNumberF32__8J2DPrintFPPCUcffi();
extern "C" u8 mStrBuff__8J2DPrint[4];
extern "C" u8 mStrBuffSize__8J2DPrint[4];

//
// External References:
//

extern "C" void* __nwa__FUlP7JKRHeapi();
extern "C" void __dl__FPv();
extern "C" void setGradColor__7JUTFontFQ28JUtility6TColorQ28JUtility6TColor();
extern "C" void _savegpr_20();
extern "C" void _savegpr_25();
extern "C" void _savegpr_26();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_20();
extern "C" void _restgpr_25();
extern "C" void _restgpr_26();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" u8 sSystemHeap__7JKRHeap[4];

//
// Declarations:
//

/* ############################################################################################## */
/* 80451580-80451584 000A80 0004+00 3/3 0/0 0/0 .sbss            mStrBuff__8J2DPrint */
const u8* J2DPrint::mStrBuff;

/* 80451584-80451588 000A84 0004+00 1/1 0/0 0/0 .sbss            None */
static bool sStrBufInitialized;

/* 80451588-8045158C 000A88 0004+00 3/3 0/0 0/0 .sbss            mStrBuffSize__8J2DPrint */
size_t J2DPrint::mStrBuffSize;

/* 8045158C-80451590 000A8C 0004+00 2/2 0/0 0/0 .sbss            None */
static u8 data_8045158C[4];

/* 804561C8-804561CC 0047C8 0004+00 6/6 0/0 0/0 .sdata2          @418 */
SECTION_SDATA2 static u8 lit_418[4] = {
    0x00,
    0x00,
    0x00,
    0x00,
};

/* 802F42F0-802F4394 2EEC30 00A4+00 1/1 0/0 0/0 .text            J2DPrint_print_alpha_va */
f32 J2DPrint_print_alpha_va(J2DPrint* pPrint, u8 param_1, const char* fmt, va_list args) {
    pPrint->initchar();
    s32 tmp = vsnprintf((char*)J2DPrint::mStrBuff, J2DPrint::mStrBuffSize, fmt, args);

    J2DPrint::TSize size;
    if (tmp < 0) {
        return FLOAT_LABEL(lit_418);
    } else if (tmp >= J2DPrint::mStrBuffSize) {
        tmp = J2DPrint::mStrBuffSize - 1;
        data_8045158C[0] = 1;
    }
    pPrint->parse(J2DPrint::mStrBuff, tmp, 0x80000000 - 1, NULL, size, param_1, true);
    return size.field_0x0;
}

/* ############################################################################################## */
/* 803CCF40-803CCFA0 -00001 0060+00 1/1 0/0 0/0 .data            @938 */
SECTION_DATA static void* lit_938[24] = {
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x28),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x44),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x9C),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0xC0),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x120),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0xD4),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0xE8),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0xFC),
    (void*)(((char*)doCtrlCode__8J2DPrintFi) + 0x110),
};

/* 803CCFA0-803CCFB0 02A0C0 000C+04 2/2 0/0 0/0 .data            __vt__8J2DPrint */
SECTION_DATA extern void* __vt__8J2DPrint[3 + 1 /* padding */] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__8J2DPrintFv,
    /* padding */
    NULL,
};

/* 802F4394-802F4420 2EECD4 008C+00 0/0 6/6 0/0 .text
 * __ct__8J2DPrintFP7JUTFontffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColor
 */
J2DPrint::J2DPrint(JUTFont* pFont, f32 param_1, f32 param_2, JUtility::TColor param_3,
                   JUtility::TColor param_4, JUtility::TColor param_5, JUtility::TColor param_6) {
    private_initiate(pFont, param_1, param_2, param_3, param_4, param_5, param_6, false);
}

/* 802F4420-802F4468 2EED60 0048+00 1/0 6/6 0/0 .text            __dt__8J2DPrintFv */
J2DPrint::~J2DPrint() {}

/* ############################################################################################## */
/* 804561CC-804561D0 0047CC 0004+00 1/1 0/0 0/0 .sdata2          @644 */
SECTION_SDATA2 static f32 lit_644 = 32.0f;

/* 804561D0-804561D8 0047D0 0008+00 6/6 0/0 0/0 .sdata2          @650 */
SECTION_SDATA2 static f64 lit_650 = 4503601774854144.0 /* cast s32 to float */;

/* 802F4468-802F4658 2EEDA8 01F0+00 1/1 0/0 0/0 .text
 * private_initiate__8J2DPrintFP7JUTFontffQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorQ28JUtility6TColorb
 */
// matches with float literals
#ifdef NONMATCHING
void J2DPrint::private_initiate(JUTFont* pFont, f32 param_1, f32 param_2, JUtility::TColor param_3,
                                JUtility::TColor param_4, JUtility::TColor param_5,
                                JUtility::TColor param_6, bool param_7) {
    if (mStrBuff == NULL) {
        setBuffer(0x400);  // r4
    }
    mFont = pFont;
    field_0x48 = param_1;
    field_0x4c = 32.0f;

    if (mFont != NULL) {
        f32 temp;
        if (param_7 == false) {
            temp = param_2;
        } else {
            temp = mFont->getLeading();
        }
        field_0x4c = temp;
    }

    field_0x5a = 1;
    locate(0.0f, 0.0f);
    mCharColor = param_3;
    mGradColor = param_4;
    field_0x38 = param_5;
    field_0x3c = param_6;

    if (mFont == NULL) {
        field_0x58 = 80;
    } else {
        field_0x58 = mFont->getWidth() << 2;
    }

    if (mFont != NULL) {
        setFontSize();
        mFont->setGX(field_0x38, field_0x3c);
    }
    initchar();
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DPrint::private_initiate(JUTFont* param_0, f32 param_1, f32 param_2,
                                    JUtility::TColor param_3, JUtility::TColor param_4,
                                    JUtility::TColor param_5, JUtility::TColor param_6,
                                    bool param_7) {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DPrint/func_802F4468.s"
}
#pragma pop
#endif

/* 802F4658-802F46C4 2EEF98 006C+00 1/1 1/1 0/0 .text            setBuffer__8J2DPrintFUl */
u8* J2DPrint::setBuffer(size_t size) {
    u8* tmp = (u8*)mStrBuff;
    if (sStrBufInitialized) {
        delete mStrBuff;
    }

    mStrBuff = new (JKRHeap::sSystemHeap, 0) u8[size];
    mStrBuffSize = size;
    sStrBufInitialized = true;
    return tmp;
}

/* 802F46C4-802F475C 2EF004 0098+00 1/1 0/0 0/0 .text            setFontSize__8J2DPrintFv */
// matches with auto generated literal
#ifdef NONMATCHING
void J2DPrint::setFontSize() {
    if (mFont) {
        mFontSizeX = mFont->getCellWidth();
        mFontSizeY = mFont->getCellHeight();
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DPrint::setFontSize() {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DPrint/setFontSize__8J2DPrintFv.s"
}
#pragma pop
#endif

/* 802F475C-802F4778 2EF09C 001C+00 2/2 2/2 0/0 .text            locate__8J2DPrintFff */
void J2DPrint::locate(f32 param_0, f32 param_1) {
    field_0x24 = param_0;
    field_0x28 = param_1;
    field_0x2c = param_0;
    mCursorV = param_1;
    field_0x34 = FLOAT_LABEL(lit_418);
}

/* 802F4778-802F4828 2EF0B8 00B0+00 0/0 2/2 0/0 .text            print__8J2DPrintFffUcPCce */
void J2DPrint::print(f32 param_0, f32 param_1, u8 param_2, char const* fmt, ...) {
    locate(param_0, param_1);

    va_list args;
    va_start(args, fmt);
    J2DPrint_print_alpha_va(this, param_2, fmt, args);
    va_end(args);
}

/* ############################################################################################## */
/* 804561D8-804561E0 0047D8 0004+04 2/2 0/0 0/0 .sdata2          @786 */
SECTION_SDATA2 static f32 lit_786[1 + 1 /* padding */] = {
    0.5f,
    /* padding */
    0.0f,
};

/* 804561E0-804561E8 0047E0 0008+00 2/2 0/0 0/0 .sdata2          @791 */
SECTION_SDATA2 static f64 lit_791 = 4503599627370496.0 /* cast u32 to float */;

/* 802F4828-802F4B4C 2EF168 0324+00 0/0 4/4 0/0 .text
 * printReturn__8J2DPrintFPCcff18J2DTextBoxHBinding18J2DTextBoxVBindingffUc */
// Matches with literals
#ifdef NONMATCHING
void J2DPrint::printReturn(char const* param_0, f32 param_1, f32 param_2,
                               J2DTextBoxHBinding param_3, J2DTextBoxVBinding param_4, f32 param_5,
                               f32 param_6, u8 param_7) {
    if (mFont != NULL) {
        initchar();
        field_0x24 = field_0x2c;
        field_0x28 = mCursorV;
        size_t sVar6 = strlen(param_0);
        if (sVar6 >= mStrBuffSize) {
            sVar6 = mStrBuffSize - 1;
            data_8045158C[0] = 1;
        }
        u16 local_2b0[260];
        TSize aTStack_2b8;
        f32 dVar10 = parse((const u8*)param_0, sVar6, param_1, local_2b0, aTStack_2b8,
                               param_7, false);
        f32 dVar12 = mFont->getAscent()*(mFontSizeY / mFont->getCellHeight());
        f32 dVar13 = dVar10 + dVar12;
        switch (param_4)
        {
        case VBIND_TOP:
            break;
        case VBIND_BOTTOM:
            param_6 += (s32)(param_2 - dVar13 - 0.5f);
            break;
        case VBIND_CENTER:
            param_6 += (s32)(param_2 - dVar13 - 0.5f) / 2;
        default:
            break;
        }

        for (int iVar8 = 0; local_2b0[iVar8] != 0xffff; iVar8++) {
            switch (param_3) {
            case VBIND_TOP:
                local_2b0[iVar8] = 0;
                break;
            case VBIND_BOTTOM:
                local_2b0[iVar8] = param_1 - local_2b0[iVar8];
                break;
            case VBIND_CENTER:
                f32 fVar1 = (local_2b0[iVar8]);
                fVar1 = param_1 - fVar1;
                f32 ratio = 0.5f;
                local_2b0[iVar8] = fVar1 * ratio;
                break;
            
            }
        }
        initchar();
        field_0x2c += param_5;
        mCursorV += param_6 + dVar12;
        field_0x24 = field_0x2c;
        field_0x28 = mCursorV;
        parse((const u8*)param_0, sVar6, param_1, local_2b0, aTStack_2b8, param_7, true);
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DPrint::printReturn(char const* param_0, f32 param_1, f32 param_2,
                               J2DTextBoxHBinding param_3, J2DTextBoxVBinding param_4, f32 param_5,
                               f32 param_6, u8 param_7) {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DPrint/printReturn__8J2DPrintFPCcff18J2DTextBoxHBinding18J2DTextBoxVBindingffUc.s"
}
#pragma pop
#endif

/* ############################################################################################## */
/* 804561E8-804561EC 0047E8 0004+00 1/1 0/0 0/0 .sdata2          @913 */
SECTION_SDATA2 static f32 lit_913 = 10000.0f;

/* 802F4B4C-802F52E8 2EF48C 079C+00 2/2 0/0 0/0 .text
 * parse__8J2DPrintFPCUciiPUsRQ28J2DPrint5TSizeUcb              */
// Mostly regalloc
#ifdef NONMATCHING
f32 J2DPrint::parse(u8 const* param_0, int param_1, int param_2, u16* param_3,
                         J2DPrint::TSize& param_4, u8 param_5, bool param_6) {
    if (mFont == NULL) {
        return 0.0f;
    }
    u16 uVar13 = 0;
    f32 dVar18 = (double)field_0x2c;
    f32 dVar16 = mCursorV;
    f32 dVar19 = dVar18;
    f32 f28 = dVar16;
    u8 const* local_f8 = param_0 + 1;
    int uVar12 = *param_0;
    f32 tmpf = field_0x2c;
    f32 dVar17 = tmpf;
    f32 local_ac = tmpf;
    f32 local_b0 = mCursorV;
    f32 local_b4 = mCursorV;
    JUtility::TColor local_b8 = field_0x8;
    JUtility::TColor local_bc = field_0xc;
    f32 local_c0;
    local_b8.a = local_b8.a * param_5 / 0xff;
    local_bc.a = local_bc.a * param_5 / 0xff;
    JUtility::TColor* local_d8;
    if (field_0x22) {
        local_d8 = &local_bc;
    } else {
        local_d8 = &local_b8;
    }
    mFont->setGradColor(local_bc, *local_d8);
    bool bVar1;
    do {
        u8 local_f0 = 0;
        if (mFont->isLeadByte(uVar12)) {
            uVar12 = (uVar12 << 8) | (*(++local_f8));
            local_f0 = 1;
        }

        if (uVar12 == 0 || ((u32)param_1 > (u32)local_f8 - (u32)param_0)) {
            if (param_6 == 0 && param_3 != NULL) {
                param_3[uVar13] = 0.5f + dVar19;
            }
            uVar13++;
            break;
        } else {
            bVar1 = true;
            local_c0 = field_0x2c;
            if (uVar12 < 0x20) {
                if (uVar12 == 0x1b) {
                    u16 local_e8 = doEscapeCode(&local_f8, param_5);
                    if (local_e8 == 'HM') {
                        if ((param_6 == 0) && (param_3 != NULL)) {
                            param_3[uVar13] = 0.5f + dVar19;
                        }
                        field_0x2c = dVar18;
                        mCursorV = dVar16;
                        uVar13++;
                        if (uVar13 == 0x100) {
                            break;
                        }
                        dVar19 = 0.0f;
                    }
                    if (local_e8) {
                        bVar1 = false;
                    }
                } else {
                    doCtrlCode(uVar12);
                    bVar1 = false;
                    if (uVar12 == 10) {
                        if ((!param_6) && (param_3 != NULL)) {
                            param_3[uVar13] = 0.5f + dVar19;
                        }
                        uVar13++;
                        if (uVar13 == 0x100) {
                            break;
                        }
                        dVar19 = 0.0f;
                    }
                }
            } else if (local_f0 && ((u32)local_f8 - (u32)param_0 > (u32)param_1)) {
                if ((!param_6) && (param_3 != NULL)) {
                    param_3[uVar13] = 0.5f + dVar19;
                }
                uVar13++;
                break;
            } else {
                if (mFont->isFixed()) {
                    field_0x34 = mFont->getFixedWidth();
                } else {
                    JUTFont::TWidth uStack_ec;
                    mFont->getWidthEntry(uVar12, &uStack_ec);
                    field_0x34 = uStack_ec.field_0x1;
                }

                field_0x34 *= field_0x18 / mFont->getCellWidth();
                f32 fVar6 = ((field_0x2c + field_0x34) - field_0x24);
                fVar6 = 10000.0f * fVar6;
                f32 local_90 = ((s32)fVar6) / 10000.0f;
                if (local_90 > param_2 && field_0x2c > dVar18) {
                    u32 local_e4;
                    if (local_f0) {
                        local_e4 = 2;
                    } else {
                        local_e4 = 1;
                    }
                    local_f8 -= local_e4;
                    mCursorV += field_0x14;
                    if (!param_6 && (param_3 != NULL)) {
                        param_3[uVar13] = 0.5f + dVar19;
                    }
                    uVar13++;
                    if (uVar13 == 0x100) {
                        break;
                    }
                    field_0x2c = field_0x24;
                    dVar19 = 0.0f;
                    bVar1 = false;
                } else {
                    if (param_6) {
                        if (param_3 != NULL) {
                            mFont->drawChar_scale(field_0x2c + (f32)(s16)param_3[uVar13], mCursorV, 
                                (s32)field_0x18, (s32)field_0x1c, uVar12, true);
                        } else {
                            mFont->drawChar_scale(field_0x2c, mCursorV, 
                                (s32)field_0x18, (s32)field_0x1c, uVar12, true);
                        }
                    }
                    field_0x2c += field_0x34;
                }
            }
        }

        if (bVar1) {
            if (field_0x2c - dVar18 > dVar19) {
                dVar19 = field_0x2c - dVar18;
            }
            field_0x2c += field_0x10;
            field_0x34 += field_0x10;
            f32 local_cc = mCursorV + (field_0x1c / mFont->getHeight()) * mFont->getDescent();
            if (f28 < local_cc) {
                f28 = local_cc;
            }
            if (field_0x2c > local_ac) {
                local_ac = field_0x2c;
            }
            if (field_0x2c < dVar17) {
                dVar17 = field_0x2c;
            }
            if (local_c0 < dVar17) {
                dVar17 = local_c0;
            }
            if (local_b4 > mCursorV) {
                local_b4 = mCursorV;
            }
            if (mCursorV < local_b0) {
                local_b0 = mCursorV;
            }
        }
        local_f8++;
        uVar12 = *local_f8;
    } while (true);

    if (param_3 != NULL) {
        param_3[uVar13] = 0xffff;
    }
    param_4.field_0x0 = local_ac - dVar17;
    param_4.field_0x4 = local_b4 - local_b0 + mFont->getLeading();
    if (!param_6) {
        field_0x2c = dVar18;
        mCursorV = dVar16;
    }
    return f28 - dVar16;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm f32 J2DPrint::parse(u8 const* param_0, int param_1, int param_2, u16* param_3,
                         J2DPrint::TSize& param_4, u8 param_5, bool param_6) {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DPrint/parse__8J2DPrintFPCUciiPUsRQ28J2DPrint5TSizeUcb.s"
}
#pragma pop
#endif

/* ############################################################################################## */
/* 804561EC-804561F0 0047EC 0004+00 2/2 0/0 0/0 .sdata2          @937 */
SECTION_SDATA2 static f32 lit_937 = 1.0f;

/* 802F52E8-802F5410 2EFC28 0128+00 2/1 0/0 0/0 .text            doCtrlCode__8J2DPrintFi */
// Matches with literals
#ifdef NONMATCHING
void J2DPrint::doCtrlCode(int param_0) {
    switch (param_0) {
    case 8:
        field_0x2c -= field_0x34;
        field_0x34 = 0.0f;
        break;
    case 9:
        if (field_0x20 > 0) {
            f32 fVar1 = field_0x2c;
            field_0x2c = field_0x20 + field_0x20 * ((int)field_0x2c / field_0x20);
            field_0x34 = field_0x2c - fVar1;
        }
        break;
    case 10:
        field_0x34 = 0.0f;
        field_0x2c = field_0x24;
        mCursorV += field_0x14;
        break;
    case 0xd:
        field_0x34 = 0.0f;
        field_0x2c = field_0x24;
        break;
    case 0x1c:
        field_0x2c += 1.0f;
        break;
    case 0x1d:
        field_0x2c -= 1.0f;
        break;
    case 0x1e:
        mCursorV -= 1.0f;
        break;
    case 0x1f:
        mCursorV += + 1.0f;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DPrint::doCtrlCode(int param_0) {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DPrint/doCtrlCode__8J2DPrintFi.s"
}
#pragma pop
#endif

/* 802F5410-802F594C 2EFD50 053C+00 1/1 0/0 0/0 .text            doEscapeCode__8J2DPrintFPPCUcUc */
// Matches with literals
#ifdef NONMATCHING
u16 J2DPrint::doEscapeCode(u8 const** param_0, u8 param_1) {
    u8 const* puVar9 = *param_0;
    u16 uVar11 = 0;
    u16 uVar3;
    for (int iVar10 = 0; iVar10 < 2; iVar10++) {
        if (mFont->isLeadByte(**param_0)) {
            uVar3 = ((**param_0) << 8) | (*param_0)[1];
            (*param_0) += 2;
        } else {
            uVar3 = **param_0;
            (*param_0)++;
        }
        if (uVar3 >= 0x80 || uVar3 < 0x20) {
            *param_0 = puVar9;
            return 0;
        }
        uVar11 = ((uVar11) << 8) | uVar3;
    }

    JUtility::TColor local_40 = field_0x8;
    JUtility::TColor local_44 = field_0xc;
    switch(uVar11) {
    case 'CU':
        mCursorV -= getNumberF32(param_0, 1.0f, 0.0f, 10);
        break;
    case 'CD':
        mCursorV += getNumberF32(param_0, 1.0f, 0.0f, 10);
        break;
    case 'CL':
        field_0x2c -= getNumberF32(param_0, 1.0f, 0.0f, 10);
        break;
    case 'CR':
        field_0x2c += getNumberF32(param_0, 1.0f, 0.0f, 10);
        break;
    case 'LU':
        mCursorV -= field_0x14;
        break;
    case 'LD':
        mCursorV += field_0x14;
        break;
    case 'ST':
        s32 val = getNumberS32(param_0, field_0x20, field_0x20, 10);
        if (val > 0) {
            field_0x20 = val;
        }
        break;
    case 'CC':
        field_0x8 = getNumberS32(param_0, *(u32*)&mCharColor, *(u32*)&field_0x8, 16);
        local_40 = field_0x8;
        local_40.a = local_40.a * param_1 / 0xff;
        local_44.a = local_44.a * param_1 / 0xff;
        JUtility::TColor* local_68;
        if (field_0x22 != 0) {
            local_68 = &local_44;
        }
        else {
            local_68 = &local_40;
        }
        mFont->setGradColor(local_40, *local_68);
        break;
    case 'GC':
        field_0xc = getNumberS32(param_0, *(u32*)&mGradColor, *(u32*)&field_0xc, 16);
        local_44 = field_0xc;
        local_40.a = local_40.a * param_1 / 0xff;
        local_44.a = local_44.a * param_1 / 0xff;
        JUtility::TColor* local_74;
        if (field_0x22 != 0) {
            local_74 = &local_44;
        }
        else {
            local_74 = &local_40;
        }
        mFont->setGradColor(local_40, *local_74);
        break;
    case 'FX':
        f32 dVar13 = getNumberF32(param_0, mFontSizeX, field_0x18, 10);
        if (dVar13 >= 0) {
            field_0x18 = dVar13;
        }
        break;
    case 'FY':
        f32 dVar14 = getNumberF32(param_0, mFontSizeY, field_0x1c, 10);
        if (dVar14 >= 0) {
            field_0x1c = dVar14;
        }
        break;
    case 'SH':
        field_0x10 = getNumberF32(param_0, field_0x48, field_0x10, 10);
        break;
    case 'SV':
        field_0x14 = getNumberF32(param_0, field_0x4c, field_0x14, 10);
        break;
    case 'GM':
        s32 isZero = getNumberS32(param_0, field_0x22 == 0, field_0x22, 10) == 0;
        field_0x22 = isZero == 0;
        local_40.a = local_40.a * param_1 / 0xff;
        local_44.a = local_44.a * param_1 / 0xff;
        JUtility::TColor* local_80;
        if (field_0x22 != 0) {
            local_80 = &local_44;
        }
        else {
            local_80 = &local_40;
        }
        mFont->setGradColor(local_40, *local_80);
        break;
    case 'HM':
        break;
    default:
        *param_0 = puVar9;
        uVar11 = 0;
        break;
    }
    return uVar11;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm u16 J2DPrint::doEscapeCode(u8 const** param_0, u8 param_1) {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DPrint/doEscapeCode__8J2DPrintFPPCUcUc.s"
}
#pragma pop
#endif

/* 802F594C-802F59C0 2F028C 0074+00 3/3 0/0 0/0 .text            initchar__8J2DPrintFv */
void J2DPrint::initchar() {
    field_0x8 = mCharColor;
    field_0xc = mGradColor;
    field_0x10 = field_0x48;
    field_0x14 = field_0x4c;
    field_0x22 = field_0x5a;
    field_0x20 = field_0x58;
    field_0x18 = mFontSizeX;
    field_0x1c = mFontSizeY;
}

/* 802F59C0-802F5AC4 2F0300 0104+00 1/1 0/0 0/0 .text            getNumberS32__8J2DPrintFPPCUclli */
s32 J2DPrint::getNumberS32(u8 const** param_0, s32 param_1, s32 param_2, int base) {
    const u8* puVar1 = *param_0;
    s32 uVar2 = param_1;
    if (*puVar1 != '[') {
        return param_1;
    }
    (*param_0)++;
    uVar2 = 0;
    char* local_28;
    if (base == 10) {
        uVar2 = strtol((char*)*param_0, &local_28, base);
    } else if (base == 16) {
        uVar2 = strtoul((char*)*param_0, &local_28, base);
        if ((u32)local_28 - (u32)*param_0 != 8) {
            if ((u32)local_28 - (u32)*param_0 == 6) {
                uVar2 = (uVar2 << 8) | 0xff;
            } else {
                *param_0 = puVar1;
                return param_2;
            }
        }
    }
    if (local_28[0] != ']') {
        *param_0 = puVar1;
        return param_2;
    } else {
        if ((char*)*param_0 == (char*)local_28) {
            *param_0 = (const u8*)local_28 + 1;
            return param_1;
        } else {
            *param_0 = (const u8*)local_28 + 1;
        }
    }
    return uVar2;
}

/* 802F5AC4-802F5BF8 2F0404 0134+00 1/1 0/0 0/0 .text            getNumberF32__8J2DPrintFPPCUcffi */
// Matches with literals
#ifdef NONMATCHING
f32 J2DPrint::getNumberF32(u8 const** param_0, f32 param_1, f32 param_2, int base) {
    const u8* puVar1 = *param_0;
    s32 uVar2 = param_1;
    if (*puVar1 != '[') {
        return param_1;
    }
    (*param_0)++;
    uVar2 = 0;
    char* local_28;
    if (base == 10) {
        uVar2 = strtol((char*)*param_0, &local_28, base);
    } else if (base == 16) {
        uVar2 = strtoul((char*)*param_0, &local_28, base);
        if ((u32)local_28 - (u32)*param_0 != 8) {
            if ((u32)local_28 - (u32)*param_0 == 6) {
                uVar2 = (uVar2 << 8) | 0xff;
            } else {
                *param_0 = puVar1;
                return param_2;
            }
        }
    }
    if (local_28[0] != ']') {
        *param_0 = puVar1;
        return param_2;
    } else {
        if ((char*)*param_0 == (char*)local_28) {
            *param_0 = (const u8*)local_28 + 1;
            return param_1;
        } else {
            *param_0 = (const u8*)local_28 + 1;
        }
    }
    return uVar2;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm f32 J2DPrint::getNumberF32(u8 const** param_0, f32 param_1, f32 param_2, int param_3) {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DPrint/getNumberF32__8J2DPrintFPPCUcffi.s"
}
#pragma pop
#endif