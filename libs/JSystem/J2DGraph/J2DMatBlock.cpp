//
// Generated By: dol2asm
// Translation Unit: J2DMatBlock
//

#include "JSystem/J2DGraph/J2DMatBlock.h"
#include "JSystem/JUtility/JUTPalette.h"
#include "JSystem/JUtility/JUTResFont.h"
#include "JSystem/JUtility/JUTTexture.h"
#include "dol2asm.h"
#include "dolphin/gx/GX.h"

//
// Forward References:
//

extern "C" void initialize__13J2DColorBlockFv();
extern "C" void setGX__13J2DColorBlockFv();
extern "C" void initialize__14J2DTexGenBlockFv();
extern "C" void setGX__14J2DTexGenBlockFv();
extern "C" void __dt__14J2DTexGenBlockFv();
extern "C" void setTexMtx__14J2DTexGenBlockFUlR9J2DTexMtx();
extern "C" void getTexMtx__14J2DTexGenBlockFUlR9J2DTexMtx();
extern "C" bool getTexture__11J2DTevBlockFUl();
extern "C" bool getPalette__11J2DTevBlockFUl();
extern "C" void __ct__12J2DTevBlock1Fv();
extern "C" void __dt__12J2DTevBlock1Fv();
extern "C" void initialize__12J2DTevBlock1Fv();
extern "C" void prepareTexture__12J2DTevBlock1FUc();
extern "C" void insertTexture__12J2DTevBlock1FUlPC7ResTIMGP10JUTPalette();
extern "C" void insertTexture__12J2DTevBlock1FUlP10JUTTexture();
extern "C" void setTexture__12J2DTevBlock1FUlPC7ResTIMG();
extern "C" void setTexture__12J2DTevBlock1FUlP10JUTTexture();
extern "C" void removeTexture__12J2DTevBlock1FUl();
extern "C" void setFont__12J2DTevBlock1FP7ResFONT();
extern "C" void setFont__12J2DTevBlock1FP7JUTFont();
extern "C" void setPalette__12J2DTevBlock1FUlPC7ResTLUT();
extern "C" void shiftDeleteFlag__12J2DTevBlock1FUcb();
extern "C" void setGX__12J2DTevBlock1Fv();
extern "C" void loadTexture__12J2DTevBlock1F11_GXTexMapIDUl();
extern "C" void __ct__12J2DTevBlock2Fv();
extern "C" void __dt__12J2DTevBlock2Fv();
extern "C" void initialize__12J2DTevBlock2Fv();
extern "C" void prepareTexture__12J2DTevBlock2FUc();
extern "C" void insertTexture__12J2DTevBlock2FUlPC7ResTIMGP10JUTPalette();
extern "C" void insertTexture__12J2DTevBlock2FUlP10JUTTexture();
extern "C" void setTexture__12J2DTevBlock2FUlPC7ResTIMG();
extern "C" void setTexture__12J2DTevBlock2FUlP10JUTTexture();
extern "C" void removeTexture__12J2DTevBlock2FUl();
extern "C" void setFont__12J2DTevBlock2FP7ResFONT();
extern "C" void setFont__12J2DTevBlock2FP7JUTFont();
extern "C" void setPalette__12J2DTevBlock2FUlPC7ResTLUT();
extern "C" void shiftDeleteFlag__12J2DTevBlock2FUcb();
extern "C" void setGX__12J2DTevBlock2Fv();
extern "C" void loadTexture__12J2DTevBlock2F11_GXTexMapIDUl();
extern "C" void __ct__12J2DTevBlock4Fv();
extern "C" void __dt__12J2DTevBlock4Fv();
extern "C" void initialize__12J2DTevBlock4Fv();
extern "C" void prepareTexture__12J2DTevBlock4FUc();
extern "C" void insertTexture__12J2DTevBlock4FUlPC7ResTIMGP10JUTPalette();
extern "C" void insertTexture__12J2DTevBlock4FUlP10JUTTexture();
extern "C" void setTexture__12J2DTevBlock4FUlPC7ResTIMG();
extern "C" void setTexture__12J2DTevBlock4FUlP10JUTTexture();
extern "C" void removeTexture__12J2DTevBlock4FUl();
extern "C" void setFont__12J2DTevBlock4FP7ResFONT();
extern "C" void setFont__12J2DTevBlock4FP7JUTFont();
extern "C" void setPalette__12J2DTevBlock4FUlPC7ResTLUT();
extern "C" void shiftDeleteFlag__12J2DTevBlock4FUcb();
extern "C" void setGX__12J2DTevBlock4Fv();
extern "C" void loadTexture__12J2DTevBlock4F11_GXTexMapIDUl();
extern "C" void __ct__12J2DTevBlock8Fv();
extern "C" void __dt__12J2DTevBlock8Fv();
extern "C" void initialize__12J2DTevBlock8Fv();
extern "C" void prepareTexture__12J2DTevBlock8FUc();
extern "C" void insertTexture__12J2DTevBlock8FUlPC7ResTIMGP10JUTPalette();
extern "C" void insertTexture__12J2DTevBlock8FUlP10JUTTexture();
extern "C" void setTexture__12J2DTevBlock8FUlPC7ResTIMG();
extern "C" void setTexture__12J2DTevBlock8FUlP10JUTTexture();
extern "C" void removeTexture__12J2DTevBlock8FUl();
extern "C" void setFont__12J2DTevBlock8FP7ResFONT();
extern "C" void setFont__12J2DTevBlock8FP7JUTFont();
extern "C" void setPalette__12J2DTevBlock8FUlPC7ResTLUT();
extern "C" void shiftDeleteFlag__12J2DTevBlock8FUcb();
extern "C" void setGX__12J2DTevBlock8Fv();
extern "C" void loadTexture__12J2DTevBlock8F11_GXTexMapIDUl();
extern "C" void __ct__13J2DTevBlock16Fv();
extern "C" void __dt__13J2DTevBlock16Fv();
extern "C" void initialize__13J2DTevBlock16Fv();
extern "C" void prepareTexture__13J2DTevBlock16FUc();
extern "C" void insertTexture__13J2DTevBlock16FUlPC7ResTIMGP10JUTPalette();
extern "C" void insertTexture__13J2DTevBlock16FUlP10JUTTexture();
extern "C" void setTexture__13J2DTevBlock16FUlPC7ResTIMG();
extern "C" void setTexture__13J2DTevBlock16FUlP10JUTTexture();
extern "C" void removeTexture__13J2DTevBlock16FUl();
extern "C" void setFont__13J2DTevBlock16FP7ResFONT();
extern "C" void setFont__13J2DTevBlock16FP7JUTFont();
extern "C" void setPalette__13J2DTevBlock16FUlPC7ResTLUT();
extern "C" void shiftDeleteFlag__13J2DTevBlock16FUcb();
extern "C" void setGX__13J2DTevBlock16Fv();
extern "C" void loadTexture__13J2DTevBlock16F11_GXTexMapIDUl();
extern "C" void initialize__15J2DIndBlockFullFv();
extern "C" void setGX__15J2DIndBlockFullFv();
extern "C" void initialize__10J2DPEBlockFv();
extern "C" void setGX__10J2DPEBlockFv();
extern "C" void __ct__14J2DIndTevStageFv();
extern "C" void __ct__19J2DTevSwapModeTableFv();
extern "C" void __ct__11J2DTevStageFv();
extern "C" void setTevStageInfo__11J2DTevStageFRC15J2DTevStageInfo();
extern "C" void __ct__11J2DTevOrderFv();
extern "C" void __ct__13J2DGXColorS10Fv();
extern "C" void getType__15J2DIndBlockFullFv();
extern "C" void setIndTexStageNum__15J2DIndBlockFullFUc();
extern "C" void getIndTexStageNum__15J2DIndBlockFullCFv();
extern "C" void setIndTexOrder__15J2DIndBlockFullFUl14J2DIndTexOrder();
extern "C" void getIndTexOrder__15J2DIndBlockFullFUl();
extern "C" void setIndTexMtx__15J2DIndBlockFullFUl12J2DIndTexMtx();
extern "C" void getIndTexMtx__15J2DIndBlockFullFUl();
extern "C" void setIndTexCoordScale__15J2DIndBlockFullFUl19J2DIndTexCoordScale();
extern "C" void getIndTexCoordScale__15J2DIndBlockFullFUl();
extern "C" void __dt__15J2DIndBlockFullFv();
extern "C" void getType__13J2DTevBlock16Fv();
extern "C" s32 getMaxStage__13J2DTevBlock16Fv();
extern "C" void setTexNo__13J2DTevBlock16FUlUs();
extern "C" void getTexNo__13J2DTevBlock16CFUl();
extern "C" void setFontNo__13J2DTevBlock16FUs();
extern "C" void getFontNo__13J2DTevBlock16CFv();
extern "C" void setTevOrder__13J2DTevBlock16FUl11J2DTevOrder();
extern "C" void getTevOrder__13J2DTevBlock16FUl();
extern "C" void setTevColor__13J2DTevBlock16FUl13J2DGXColorS10();
extern "C" void getTevColor__13J2DTevBlock16FUl();
extern "C" void setTevKColor__13J2DTevBlock16FUlQ28JUtility6TColor();
extern "C" void getTevKColor__13J2DTevBlock16FUl();
extern "C" void setTevKColorSel__13J2DTevBlock16FUlUc();
extern "C" void getTevKColorSel__13J2DTevBlock16FUl();
extern "C" void setTevKAlphaSel__13J2DTevBlock16FUlUc();
extern "C" void getTevKAlphaSel__13J2DTevBlock16FUl();
extern "C" void setTevStageNum__13J2DTevBlock16FUc();
extern "C" void getTevStageNum__13J2DTevBlock16CFv();
extern "C" void setTevStage__13J2DTevBlock16FUl11J2DTevStage();
extern "C" void getTevStage__13J2DTevBlock16FUl();
extern "C" void setTevSwapModeInfo__13J2DTevBlock16FUl18J2DTevSwapModeInfo();
extern "C" void setTevSwapModeTable__13J2DTevBlock16FUl19J2DTevSwapModeTable();
extern "C" void getTevSwapModeTable__13J2DTevBlock16FUl();
extern "C" void setIndTevStage__13J2DTevBlock16FUl14J2DIndTevStage();
extern "C" void getIndTevStage__13J2DTevBlock16FUl();
extern "C" void insertTexture__13J2DTevBlock16FUlPC7ResTIMG();
extern "C" void getTexture__13J2DTevBlock16FUl();
extern "C" void getPalette__13J2DTevBlock16FUl();
extern "C" void getFont__13J2DTevBlock16Fv();
extern "C" void setUndeleteFlag__13J2DTevBlock16FUc();
extern "C" void setFontUndeleteFlag__13J2DTevBlock16Fv();
extern "C" void getType__12J2DTevBlock8Fv();
extern "C" s32 getMaxStage__12J2DTevBlock8Fv();
extern "C" void setTexNo__12J2DTevBlock8FUlUs();
extern "C" void getTexNo__12J2DTevBlock8CFUl();
extern "C" void setFontNo__12J2DTevBlock8FUs();
extern "C" void getFontNo__12J2DTevBlock8CFv();
extern "C" void setTevOrder__12J2DTevBlock8FUl11J2DTevOrder();
extern "C" void getTevOrder__12J2DTevBlock8FUl();
extern "C" void setTevColor__12J2DTevBlock8FUl13J2DGXColorS10();
extern "C" void getTevColor__12J2DTevBlock8FUl();
extern "C" void setTevKColor__12J2DTevBlock8FUlQ28JUtility6TColor();
extern "C" void getTevKColor__12J2DTevBlock8FUl();
extern "C" void setTevKColorSel__12J2DTevBlock8FUlUc();
extern "C" void getTevKColorSel__12J2DTevBlock8FUl();
extern "C" void setTevKAlphaSel__12J2DTevBlock8FUlUc();
extern "C" void getTevKAlphaSel__12J2DTevBlock8FUl();
extern "C" void setTevStageNum__12J2DTevBlock8FUc();
extern "C" void getTevStageNum__12J2DTevBlock8CFv();
extern "C" void setTevStage__12J2DTevBlock8FUl11J2DTevStage();
extern "C" void getTevStage__12J2DTevBlock8FUl();
extern "C" void setTevSwapModeInfo__12J2DTevBlock8FUl18J2DTevSwapModeInfo();
extern "C" void setTevSwapModeTable__12J2DTevBlock8FUl19J2DTevSwapModeTable();
extern "C" void getTevSwapModeTable__12J2DTevBlock8FUl();
extern "C" void setIndTevStage__12J2DTevBlock8FUl14J2DIndTevStage();
extern "C" void getIndTevStage__12J2DTevBlock8FUl();
extern "C" void insertTexture__12J2DTevBlock8FUlPC7ResTIMG();
extern "C" void getTexture__12J2DTevBlock8FUl();
extern "C" void getPalette__12J2DTevBlock8FUl();
extern "C" void getFont__12J2DTevBlock8Fv();
extern "C" void setUndeleteFlag__12J2DTevBlock8FUc();
extern "C" void setFontUndeleteFlag__12J2DTevBlock8Fv();
extern "C" void getType__12J2DTevBlock4Fv();
extern "C" s32 getMaxStage__12J2DTevBlock4Fv();
extern "C" void setTexNo__12J2DTevBlock4FUlUs();
extern "C" void getTexNo__12J2DTevBlock4CFUl();
extern "C" void setFontNo__12J2DTevBlock4FUs();
extern "C" void getFontNo__12J2DTevBlock4CFv();
extern "C" void setTevOrder__12J2DTevBlock4FUl11J2DTevOrder();
extern "C" void getTevOrder__12J2DTevBlock4FUl();
extern "C" void setTevColor__12J2DTevBlock4FUl13J2DGXColorS10();
extern "C" void getTevColor__12J2DTevBlock4FUl();
extern "C" void setTevKColor__12J2DTevBlock4FUlQ28JUtility6TColor();
extern "C" void getTevKColor__12J2DTevBlock4FUl();
extern "C" void setTevKColorSel__12J2DTevBlock4FUlUc();
extern "C" void getTevKColorSel__12J2DTevBlock4FUl();
extern "C" void setTevKAlphaSel__12J2DTevBlock4FUlUc();
extern "C" void getTevKAlphaSel__12J2DTevBlock4FUl();
extern "C" void setTevStageNum__12J2DTevBlock4FUc();
extern "C" void getTevStageNum__12J2DTevBlock4CFv();
extern "C" void setTevStage__12J2DTevBlock4FUl11J2DTevStage();
extern "C" void getTevStage__12J2DTevBlock4FUl();
extern "C" void setTevSwapModeInfo__12J2DTevBlock4FUl18J2DTevSwapModeInfo();
extern "C" void setTevSwapModeTable__12J2DTevBlock4FUl19J2DTevSwapModeTable();
extern "C" void getTevSwapModeTable__12J2DTevBlock4FUl();
extern "C" void setIndTevStage__12J2DTevBlock4FUl14J2DIndTevStage();
extern "C" void getIndTevStage__12J2DTevBlock4FUl();
extern "C" void insertTexture__12J2DTevBlock4FUlPC7ResTIMG();
extern "C" void getTexture__12J2DTevBlock4FUl();
extern "C" void getPalette__12J2DTevBlock4FUl();
extern "C" void getFont__12J2DTevBlock4Fv();
extern "C" void setUndeleteFlag__12J2DTevBlock4FUc();
extern "C" void setFontUndeleteFlag__12J2DTevBlock4Fv();
extern "C" void getType__12J2DTevBlock2Fv();
extern "C" s32 getMaxStage__12J2DTevBlock2Fv();
extern "C" void setTexNo__12J2DTevBlock2FUlUs();
extern "C" void getTexNo__12J2DTevBlock2CFUl();
extern "C" void setFontNo__12J2DTevBlock2FUs();
extern "C" void getFontNo__12J2DTevBlock2CFv();
extern "C" void setTevOrder__12J2DTevBlock2FUl11J2DTevOrder();
extern "C" void getTevOrder__12J2DTevBlock2FUl();
extern "C" void setTevColor__12J2DTevBlock2FUl13J2DGXColorS10();
extern "C" void getTevColor__12J2DTevBlock2FUl();
extern "C" void setTevKColor__12J2DTevBlock2FUlQ28JUtility6TColor();
extern "C" void getTevKColor__12J2DTevBlock2FUl();
extern "C" void setTevKColorSel__12J2DTevBlock2FUlUc();
extern "C" void getTevKColorSel__12J2DTevBlock2FUl();
extern "C" void setTevKAlphaSel__12J2DTevBlock2FUlUc();
extern "C" void getTevKAlphaSel__12J2DTevBlock2FUl();
extern "C" void setTevStageNum__12J2DTevBlock2FUc();
extern "C" void getTevStageNum__12J2DTevBlock2CFv();
extern "C" void setTevStage__12J2DTevBlock2FUl11J2DTevStage();
extern "C" void getTevStage__12J2DTevBlock2FUl();
extern "C" void setTevSwapModeInfo__12J2DTevBlock2FUl18J2DTevSwapModeInfo();
extern "C" void setTevSwapModeTable__12J2DTevBlock2FUl19J2DTevSwapModeTable();
extern "C" void getTevSwapModeTable__12J2DTevBlock2FUl();
extern "C" void setIndTevStage__12J2DTevBlock2FUl14J2DIndTevStage();
extern "C" void getIndTevStage__12J2DTevBlock2FUl();
extern "C" void insertTexture__12J2DTevBlock2FUlPC7ResTIMG();
extern "C" void getTexture__12J2DTevBlock2FUl();
extern "C" void getPalette__12J2DTevBlock2FUl();
extern "C" void getFont__12J2DTevBlock2Fv();
extern "C" void setUndeleteFlag__12J2DTevBlock2FUc();
extern "C" void setFontUndeleteFlag__12J2DTevBlock2Fv();
extern "C" void getType__12J2DTevBlock1Fv();
extern "C" bool getMaxStage__12J2DTevBlock1Fv();
extern "C" void setTexNo__12J2DTevBlock1FUlUs();
extern "C" void getTexNo__12J2DTevBlock1CFUl();
extern "C" void setFontNo__12J2DTevBlock1FUs();
extern "C" void getFontNo__12J2DTevBlock1CFv();
extern "C" void setTevOrder__12J2DTevBlock1FUl11J2DTevOrder();
extern "C" void getTevOrder__12J2DTevBlock1FUl();
extern "C" void setTevColor__12J2DTevBlock1FUl13J2DGXColorS10();
extern "C" void getTevColor__12J2DTevBlock1FUl();
extern "C" void setTevKColor__12J2DTevBlock1FUlQ28JUtility6TColor();
extern "C" void getTevKColor__12J2DTevBlock1FUl();
extern "C" void setTevKColorSel__12J2DTevBlock1FUlUc();
extern "C" void getTevKColorSel__12J2DTevBlock1FUl();
extern "C" void setTevKAlphaSel__12J2DTevBlock1FUlUc();
extern "C" void getTevKAlphaSel__12J2DTevBlock1FUl();
extern "C" void setTevStageNum__12J2DTevBlock1FUc();
extern "C" bool getTevStageNum__12J2DTevBlock1CFv();
extern "C" void setTevStage__12J2DTevBlock1FUl11J2DTevStage();
extern "C" void getTevStage__12J2DTevBlock1FUl();
extern "C" void setTevSwapModeInfo__12J2DTevBlock1FUl18J2DTevSwapModeInfo();
extern "C" void setTevSwapModeTable__12J2DTevBlock1FUl19J2DTevSwapModeTable();
extern "C" void getTevSwapModeTable__12J2DTevBlock1FUl();
extern "C" void setIndTevStage__12J2DTevBlock1FUl14J2DIndTevStage();
extern "C" void getIndTevStage__12J2DTevBlock1FUl();
extern "C" void insertTexture__12J2DTevBlock1FUlPC7ResTIMG();
extern "C" void getTexture__12J2DTevBlock1FUl();
extern "C" void getPalette__12J2DTevBlock1FUl();
extern "C" void getFont__12J2DTevBlock1Fv();
extern "C" void setUndeleteFlag__12J2DTevBlock1FUc();
extern "C" void setFontUndeleteFlag__12J2DTevBlock1Fv();
extern "C" void initialize__11J2DTevBlockFv();
extern "C" void loadTexture__11J2DTevBlockF11_GXTexMapIDUl();
extern "C" void setFontNo__11J2DTevBlockFUs();
extern "C" void setTevOrder__11J2DTevBlockFUl11J2DTevOrder();
extern "C" void setTevKColorSel__11J2DTevBlockFUlUc();
extern "C" void setTevKAlphaSel__11J2DTevBlockFUlUc();
extern "C" void setTevStageNum__11J2DTevBlockFUc();
extern "C" void setTevStage__11J2DTevBlockFUl11J2DTevStage();
extern "C" void setTevSwapModeInfo__11J2DTevBlockFUl18J2DTevSwapModeInfo();
extern "C" void setTevSwapModeTable__11J2DTevBlockFUl19J2DTevSwapModeTable();
extern "C" void setIndTevStage__11J2DTevBlockFUl14J2DIndTevStage();
extern "C" bool insertTexture__11J2DTevBlockFUlP10JUTTexture();
extern "C" bool insertTexture__11J2DTevBlockFUlPC7ResTIMGP10JUTPalette();
extern "C" bool insertTexture__11J2DTevBlockFUlPC7ResTIMG();
extern "C" bool setTexture__11J2DTevBlockFUlP10JUTTexture();
extern "C" bool setTexture__11J2DTevBlockFUlPC7ResTIMG();
extern "C" bool removeTexture__11J2DTevBlockFUl();
extern "C" bool setFont__11J2DTevBlockFP7JUTFont();
extern "C" bool setFont__11J2DTevBlockFP7ResFONT();
extern "C" bool setPalette__11J2DTevBlockFUlPC7ResTLUT();
extern "C" bool prepareTexture__11J2DTevBlockFUc();
extern "C" bool getFont__11J2DTevBlockFv();
extern "C" void shiftDeleteFlag__11J2DTevBlockFUcb();
extern "C" void setUndeleteFlag__11J2DTevBlockFUc();
extern "C" void setFontUndeleteFlag__11J2DTevBlockFv();

//
// External References:
//

extern "C" void __ct__Q28JUtility6TColorFv();
extern "C" void* __nw__FUl();
extern "C" void __dl__FPv();
extern "C" void __dt__10JUTTextureFv();
extern "C" void storeTIMG__10JUTTextureFPC7ResTIMGUc();
extern "C" void storeTIMG__10JUTTextureFPC7ResTIMGP10JUTPalette();
extern "C" void attachPalette__10JUTTextureFP10JUTPalette();
extern "C" void load__10JUTTextureF11_GXTexMapID();
extern "C" void storeTLUT__10JUTPaletteF7_GXTlutP7ResTLUT();
extern "C" void __ct__10JUTResFontFPC7ResFONTP7JKRHeap();
extern "C" void load__9J2DTexMtxFUl();
extern "C" void calc__9J2DTexMtxFv();
extern "C" void load__14J2DIndTevStageFUc();
extern "C" void load__12J2DIndTexMtxFUc();
extern "C" void load__19J2DIndTexCoordScaleFUc();
extern "C" void load__14J2DIndTexOrderFUc();
extern "C" bool getTevSwapModeTable__11J2DTevBlockFUl();
extern "C" bool getTevStage__11J2DTevBlockFUl();
extern "C" bool getTevColor__11J2DTevBlockFUl();
extern "C" bool getTevOrder__11J2DTevBlockFUl();
extern "C" bool getTevKAlphaSel__11J2DTevBlockFUl();
extern "C" bool getTevKColorSel__11J2DTevBlockFUl();
extern "C" bool getTevKColor__11J2DTevBlockFUl();
extern "C" void getFontNo__11J2DTevBlockCFv();
extern "C" void getTexNo__11J2DTevBlockCFUl();
extern "C" bool getTevStageNum__11J2DTevBlockCFv();
extern "C" bool getIndTevStage__11J2DTevBlockFUl();
extern "C" void __dt__11J2DTevBlockFv();
extern "C" void setGX__11J2DTevBlockFv();
extern "C" void setTevKColor__11J2DTevBlockFUlQ28JUtility6TColor();
extern "C" void setTevColor__11J2DTevBlockFUl13J2DGXColorS10();
extern "C" void setTexNo__11J2DTevBlockFUlUs();
extern "C" void __dt__19J2DIndTexCoordScaleFv();
extern "C" void __dt__12J2DIndTexMtxFv();
extern "C" void __destroy_arr();
extern "C" void __construct_array();
extern "C" void _savegpr_25();
extern "C" void _savegpr_26();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_25();
extern "C" void _restgpr_26();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" extern J2DTexCoordInfo const j2dDefaultTexCoordInfo[8];
extern "C" extern J2DTevStageInfo const j2dDefaultTevStageInfo;
extern "C" extern J2DIndTevStageInfo const j2dDefaultIndTevStageInfo;
extern "C" extern void* __vt__11J2DIndBlock[14];
extern "C" extern GXColor j2dDefaultColInfo;
extern "C" extern J2DTevOrderInfo j2dDefaultTevOrderInfoNull;
extern "C" extern J2DGXColorS10 j2dDefaultTevColor;
extern "C" extern GXColor j2dDefaultTevKColor;
extern "C" extern J2DTevSwapModeInfo j2dDefaultTevSwapMode;
extern "C" extern u8 data_804561A4;
extern "C" extern J2DColorChanInfo j2dDefaultColorChanInfo;
extern "C" extern u8 data_804561AC;

//
// Declarations:
//

/* 802EB394-802EB424 2E5CD4 0090+00 0/0 1/1 0/0 .text            initialize__13J2DColorBlockFv */
// instruction order
#ifdef NONMATCHING
void J2DColorBlock::initialize() {
    for (int i = 0; i < 2; i++) {
        mMatColor[i] = JUtility::TColor(j2dDefaultColInfo);
    }
    mColorChanNum = 2;
    for (int i = 0; i < 4; i++) {
        mColorChan[i].setColorChanInfo(j2dDefaultColorChanInfo);
    }
    mCullMode = GX_CULL_NONE;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void J2DColorBlock::initialize() {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__13J2DColorBlockFv.s"
}
#pragma pop
#endif

/* 802EB424-802EB510 2E5D64 00EC+00 0/0 1/1 0/0 .text            setGX__13J2DColorBlockFv */
void J2DColorBlock::setGX() {
    for (int i = 0; i < 2; i++) {
        GXSetChanMatColor(GXChannelID(GX_COLOR0A0 + i), mMatColor[i]);
    }
    GXSetNumChans(mColorChanNum);
    const GXChannelID mapping[4] = {GX_COLOR0, GX_ALPHA0, GX_COLOR1, GX_ALPHA1};
    for (int i = 0; i < mColorChanNum << 1; i++) {
        GXSetChanCtrl(mapping[i], GX_DISABLE, GX_SRC_REG, (GXColorSrc)mColorChan[i].getMatSrc(), GX_LIGHT_NULL, GX_DF_NONE, GX_AF_NONE);
    }
    GXSetCullMode((GXCullMode)mCullMode);
}

/* 802EB510-802EB570 2E5E50 0060+00 0/0 1/1 0/0 .text            initialize__14J2DTexGenBlockFv */
void J2DTexGenBlock::initialize() {
    mTexGenNum = 0;
    for (int i = 0; i < 8; i++) {
        mTexGenCoord[i].setTexCoordInfo(j2dDefaultTexCoordInfo[0]);
    }
    for (int i = 0; i < 8; i++) {
        mTexMtx[i] = NULL;
    }
}

static inline void GXSetTexCoordGen(GXTexCoordID dst, GXTexGenType type, GXTexGenSrc src, u32 mtx) {
    GXSetTexCoordGen2(dst, type, src, mtx, GX_FALSE, GX_PTIDENTITY);
}

/* 802EB570-802EB620 2E5EB0 00B0+00 0/0 1/1 0/0 .text            setGX__14J2DTexGenBlockFv */
void J2DTexGenBlock::setGX() {
    GXSetNumTexGens(mTexGenNum);
    for (int i = 0; i < mTexGenNum; i++) {
        GXSetTexCoordGen((GXTexCoordID)i, (GXTexGenType)mTexGenCoord[i].getTexGenType(), (GXTexGenSrc)mTexGenCoord[i].getTexGenSrc(), mTexGenCoord[i].getTexGenMtx());
    }
    for (u8 i = 0; i < 8; i++) {
        if (mTexMtx[i]) {
            mTexMtx[i]->load(i);
        }
    }
}

/* ############################################################################################## */
/* 803CCA90-803CCAC8 029BB0 0038+00 1/1 1/1 0/0 .data            __vt__15J2DIndBlockFull */
SECTION_DATA extern void* __vt__15J2DIndBlockFull[14] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)initialize__15J2DIndBlockFullFv,
    (void*)setGX__15J2DIndBlockFullFv,
    (void*)getType__15J2DIndBlockFullFv,
    (void*)setIndTexStageNum__15J2DIndBlockFullFUc,
    (void*)getIndTexStageNum__15J2DIndBlockFullCFv,
    (void*)setIndTexOrder__15J2DIndBlockFullFUl14J2DIndTexOrder,
    (void*)getIndTexOrder__15J2DIndBlockFullFUl,
    (void*)setIndTexMtx__15J2DIndBlockFullFUl12J2DIndTexMtx,
    (void*)getIndTexMtx__15J2DIndBlockFullFUl,
    (void*)setIndTexCoordScale__15J2DIndBlockFullFUl19J2DIndTexCoordScale,
    (void*)getIndTexCoordScale__15J2DIndBlockFullFUl,
    (void*)__dt__15J2DIndBlockFullFv,
};

/* 803CCAC8-803CCB84 029BE8 00BC+00 2/2 0/0 0/0 .data            __vt__13J2DTevBlock16 */
SECTION_DATA extern void* __vt__13J2DTevBlock16[47] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)initialize__13J2DTevBlock16Fv,
    (void*)setGX__13J2DTevBlock16Fv,
    (void*)loadTexture__13J2DTevBlock16F11_GXTexMapIDUl,
    (void*)getType__13J2DTevBlock16Fv,
    (void*)getMaxStage__13J2DTevBlock16Fv,
    (void*)setTexNo__13J2DTevBlock16FUlUs,
    (void*)getTexNo__13J2DTevBlock16CFUl,
    (void*)setFontNo__13J2DTevBlock16FUs,
    (void*)getFontNo__13J2DTevBlock16CFv,
    (void*)setTevOrder__13J2DTevBlock16FUl11J2DTevOrder,
    (void*)getTevOrder__13J2DTevBlock16FUl,
    (void*)setTevColor__13J2DTevBlock16FUl13J2DGXColorS10,
    (void*)getTevColor__13J2DTevBlock16FUl,
    (void*)setTevKColor__13J2DTevBlock16FUlQ28JUtility6TColor,
    (void*)getTevKColor__13J2DTevBlock16FUl,
    (void*)setTevKColorSel__13J2DTevBlock16FUlUc,
    (void*)getTevKColorSel__13J2DTevBlock16FUl,
    (void*)setTevKAlphaSel__13J2DTevBlock16FUlUc,
    (void*)getTevKAlphaSel__13J2DTevBlock16FUl,
    (void*)setTevStageNum__13J2DTevBlock16FUc,
    (void*)getTevStageNum__13J2DTevBlock16CFv,
    (void*)setTevStage__13J2DTevBlock16FUl11J2DTevStage,
    (void*)getTevStage__13J2DTevBlock16FUl,
    (void*)setTevSwapModeInfo__13J2DTevBlock16FUl18J2DTevSwapModeInfo,
    (void*)setTevSwapModeTable__13J2DTevBlock16FUl19J2DTevSwapModeTable,
    (void*)getTevSwapModeTable__13J2DTevBlock16FUl,
    (void*)setIndTevStage__13J2DTevBlock16FUl14J2DIndTevStage,
    (void*)getIndTevStage__13J2DTevBlock16FUl,
    (void*)insertTexture__13J2DTevBlock16FUlPC7ResTIMG,
    (void*)insertTexture__13J2DTevBlock16FUlPC7ResTIMGP10JUTPalette,
    (void*)insertTexture__13J2DTevBlock16FUlP10JUTTexture,
    (void*)setTexture__13J2DTevBlock16FUlPC7ResTIMG,
    (void*)setTexture__13J2DTevBlock16FUlP10JUTTexture,
    (void*)removeTexture__13J2DTevBlock16FUl,
    (void*)setFont__13J2DTevBlock16FP7ResFONT,
    (void*)setFont__13J2DTevBlock16FP7JUTFont,
    (void*)setPalette__13J2DTevBlock16FUlPC7ResTLUT,
    (void*)prepareTexture__13J2DTevBlock16FUc,
    (void*)getTexture__13J2DTevBlock16FUl,
    (void*)getPalette__13J2DTevBlock16FUl,
    (void*)getFont__13J2DTevBlock16Fv,
    (void*)shiftDeleteFlag__13J2DTevBlock16FUcb,
    (void*)setUndeleteFlag__13J2DTevBlock16FUc,
    (void*)setFontUndeleteFlag__13J2DTevBlock16Fv,
    (void*)__dt__13J2DTevBlock16Fv,
};

/* 803CCB84-803CCC40 029CA4 00BC+00 2/2 0/0 0/0 .data            __vt__12J2DTevBlock8 */
SECTION_DATA extern void* __vt__12J2DTevBlock8[47] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)initialize__12J2DTevBlock8Fv,
    (void*)setGX__12J2DTevBlock8Fv,
    (void*)loadTexture__12J2DTevBlock8F11_GXTexMapIDUl,
    (void*)getType__12J2DTevBlock8Fv,
    (void*)getMaxStage__12J2DTevBlock8Fv,
    (void*)setTexNo__12J2DTevBlock8FUlUs,
    (void*)getTexNo__12J2DTevBlock8CFUl,
    (void*)setFontNo__12J2DTevBlock8FUs,
    (void*)getFontNo__12J2DTevBlock8CFv,
    (void*)setTevOrder__12J2DTevBlock8FUl11J2DTevOrder,
    (void*)getTevOrder__12J2DTevBlock8FUl,
    (void*)setTevColor__12J2DTevBlock8FUl13J2DGXColorS10,
    (void*)getTevColor__12J2DTevBlock8FUl,
    (void*)setTevKColor__12J2DTevBlock8FUlQ28JUtility6TColor,
    (void*)getTevKColor__12J2DTevBlock8FUl,
    (void*)setTevKColorSel__12J2DTevBlock8FUlUc,
    (void*)getTevKColorSel__12J2DTevBlock8FUl,
    (void*)setTevKAlphaSel__12J2DTevBlock8FUlUc,
    (void*)getTevKAlphaSel__12J2DTevBlock8FUl,
    (void*)setTevStageNum__12J2DTevBlock8FUc,
    (void*)getTevStageNum__12J2DTevBlock8CFv,
    (void*)setTevStage__12J2DTevBlock8FUl11J2DTevStage,
    (void*)getTevStage__12J2DTevBlock8FUl,
    (void*)setTevSwapModeInfo__12J2DTevBlock8FUl18J2DTevSwapModeInfo,
    (void*)setTevSwapModeTable__12J2DTevBlock8FUl19J2DTevSwapModeTable,
    (void*)getTevSwapModeTable__12J2DTevBlock8FUl,
    (void*)setIndTevStage__12J2DTevBlock8FUl14J2DIndTevStage,
    (void*)getIndTevStage__12J2DTevBlock8FUl,
    (void*)insertTexture__12J2DTevBlock8FUlPC7ResTIMG,
    (void*)insertTexture__12J2DTevBlock8FUlPC7ResTIMGP10JUTPalette,
    (void*)insertTexture__12J2DTevBlock8FUlP10JUTTexture,
    (void*)setTexture__12J2DTevBlock8FUlPC7ResTIMG,
    (void*)setTexture__12J2DTevBlock8FUlP10JUTTexture,
    (void*)removeTexture__12J2DTevBlock8FUl,
    (void*)setFont__12J2DTevBlock8FP7ResFONT,
    (void*)setFont__12J2DTevBlock8FP7JUTFont,
    (void*)setPalette__12J2DTevBlock8FUlPC7ResTLUT,
    (void*)prepareTexture__12J2DTevBlock8FUc,
    (void*)getTexture__12J2DTevBlock8FUl,
    (void*)getPalette__12J2DTevBlock8FUl,
    (void*)getFont__12J2DTevBlock8Fv,
    (void*)shiftDeleteFlag__12J2DTevBlock8FUcb,
    (void*)setUndeleteFlag__12J2DTevBlock8FUc,
    (void*)setFontUndeleteFlag__12J2DTevBlock8Fv,
    (void*)__dt__12J2DTevBlock8Fv,
};

/* 803CCC40-803CCCFC 029D60 00BC+00 2/2 0/0 0/0 .data            __vt__12J2DTevBlock4 */
SECTION_DATA extern void* __vt__12J2DTevBlock4[47] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)initialize__12J2DTevBlock4Fv,
    (void*)setGX__12J2DTevBlock4Fv,
    (void*)loadTexture__12J2DTevBlock4F11_GXTexMapIDUl,
    (void*)getType__12J2DTevBlock4Fv,
    (void*)getMaxStage__12J2DTevBlock4Fv,
    (void*)setTexNo__12J2DTevBlock4FUlUs,
    (void*)getTexNo__12J2DTevBlock4CFUl,
    (void*)setFontNo__12J2DTevBlock4FUs,
    (void*)getFontNo__12J2DTevBlock4CFv,
    (void*)setTevOrder__12J2DTevBlock4FUl11J2DTevOrder,
    (void*)getTevOrder__12J2DTevBlock4FUl,
    (void*)setTevColor__12J2DTevBlock4FUl13J2DGXColorS10,
    (void*)getTevColor__12J2DTevBlock4FUl,
    (void*)setTevKColor__12J2DTevBlock4FUlQ28JUtility6TColor,
    (void*)getTevKColor__12J2DTevBlock4FUl,
    (void*)setTevKColorSel__12J2DTevBlock4FUlUc,
    (void*)getTevKColorSel__12J2DTevBlock4FUl,
    (void*)setTevKAlphaSel__12J2DTevBlock4FUlUc,
    (void*)getTevKAlphaSel__12J2DTevBlock4FUl,
    (void*)setTevStageNum__12J2DTevBlock4FUc,
    (void*)getTevStageNum__12J2DTevBlock4CFv,
    (void*)setTevStage__12J2DTevBlock4FUl11J2DTevStage,
    (void*)getTevStage__12J2DTevBlock4FUl,
    (void*)setTevSwapModeInfo__12J2DTevBlock4FUl18J2DTevSwapModeInfo,
    (void*)setTevSwapModeTable__12J2DTevBlock4FUl19J2DTevSwapModeTable,
    (void*)getTevSwapModeTable__12J2DTevBlock4FUl,
    (void*)setIndTevStage__12J2DTevBlock4FUl14J2DIndTevStage,
    (void*)getIndTevStage__12J2DTevBlock4FUl,
    (void*)insertTexture__12J2DTevBlock4FUlPC7ResTIMG,
    (void*)insertTexture__12J2DTevBlock4FUlPC7ResTIMGP10JUTPalette,
    (void*)insertTexture__12J2DTevBlock4FUlP10JUTTexture,
    (void*)setTexture__12J2DTevBlock4FUlPC7ResTIMG,
    (void*)setTexture__12J2DTevBlock4FUlP10JUTTexture,
    (void*)removeTexture__12J2DTevBlock4FUl,
    (void*)setFont__12J2DTevBlock4FP7ResFONT,
    (void*)setFont__12J2DTevBlock4FP7JUTFont,
    (void*)setPalette__12J2DTevBlock4FUlPC7ResTLUT,
    (void*)prepareTexture__12J2DTevBlock4FUc,
    (void*)getTexture__12J2DTevBlock4FUl,
    (void*)getPalette__12J2DTevBlock4FUl,
    (void*)getFont__12J2DTevBlock4Fv,
    (void*)shiftDeleteFlag__12J2DTevBlock4FUcb,
    (void*)setUndeleteFlag__12J2DTevBlock4FUc,
    (void*)setFontUndeleteFlag__12J2DTevBlock4Fv,
    (void*)__dt__12J2DTevBlock4Fv,
};

/* 803CCCFC-803CCDB8 029E1C 00BC+00 2/2 0/0 0/0 .data            __vt__12J2DTevBlock2 */
SECTION_DATA extern void* __vt__12J2DTevBlock2[47] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)initialize__12J2DTevBlock2Fv,
    (void*)setGX__12J2DTevBlock2Fv,
    (void*)loadTexture__12J2DTevBlock2F11_GXTexMapIDUl,
    (void*)getType__12J2DTevBlock2Fv,
    (void*)getMaxStage__12J2DTevBlock2Fv,
    (void*)setTexNo__12J2DTevBlock2FUlUs,
    (void*)getTexNo__12J2DTevBlock2CFUl,
    (void*)setFontNo__12J2DTevBlock2FUs,
    (void*)getFontNo__12J2DTevBlock2CFv,
    (void*)setTevOrder__12J2DTevBlock2FUl11J2DTevOrder,
    (void*)getTevOrder__12J2DTevBlock2FUl,
    (void*)setTevColor__12J2DTevBlock2FUl13J2DGXColorS10,
    (void*)getTevColor__12J2DTevBlock2FUl,
    (void*)setTevKColor__12J2DTevBlock2FUlQ28JUtility6TColor,
    (void*)getTevKColor__12J2DTevBlock2FUl,
    (void*)setTevKColorSel__12J2DTevBlock2FUlUc,
    (void*)getTevKColorSel__12J2DTevBlock2FUl,
    (void*)setTevKAlphaSel__12J2DTevBlock2FUlUc,
    (void*)getTevKAlphaSel__12J2DTevBlock2FUl,
    (void*)setTevStageNum__12J2DTevBlock2FUc,
    (void*)getTevStageNum__12J2DTevBlock2CFv,
    (void*)setTevStage__12J2DTevBlock2FUl11J2DTevStage,
    (void*)getTevStage__12J2DTevBlock2FUl,
    (void*)setTevSwapModeInfo__12J2DTevBlock2FUl18J2DTevSwapModeInfo,
    (void*)setTevSwapModeTable__12J2DTevBlock2FUl19J2DTevSwapModeTable,
    (void*)getTevSwapModeTable__12J2DTevBlock2FUl,
    (void*)setIndTevStage__12J2DTevBlock2FUl14J2DIndTevStage,
    (void*)getIndTevStage__12J2DTevBlock2FUl,
    (void*)insertTexture__12J2DTevBlock2FUlPC7ResTIMG,
    (void*)insertTexture__12J2DTevBlock2FUlPC7ResTIMGP10JUTPalette,
    (void*)insertTexture__12J2DTevBlock2FUlP10JUTTexture,
    (void*)setTexture__12J2DTevBlock2FUlPC7ResTIMG,
    (void*)setTexture__12J2DTevBlock2FUlP10JUTTexture,
    (void*)removeTexture__12J2DTevBlock2FUl,
    (void*)setFont__12J2DTevBlock2FP7ResFONT,
    (void*)setFont__12J2DTevBlock2FP7JUTFont,
    (void*)setPalette__12J2DTevBlock2FUlPC7ResTLUT,
    (void*)prepareTexture__12J2DTevBlock2FUc,
    (void*)getTexture__12J2DTevBlock2FUl,
    (void*)getPalette__12J2DTevBlock2FUl,
    (void*)getFont__12J2DTevBlock2Fv,
    (void*)shiftDeleteFlag__12J2DTevBlock2FUcb,
    (void*)setUndeleteFlag__12J2DTevBlock2FUc,
    (void*)setFontUndeleteFlag__12J2DTevBlock2Fv,
    (void*)__dt__12J2DTevBlock2Fv,
};

/* 803CCDB8-803CCE74 029ED8 00BC+00 2/2 0/0 0/0 .data            __vt__12J2DTevBlock1 */
SECTION_DATA extern void* __vt__12J2DTevBlock1[47] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)initialize__12J2DTevBlock1Fv,
    (void*)setGX__12J2DTevBlock1Fv,
    (void*)loadTexture__12J2DTevBlock1F11_GXTexMapIDUl,
    (void*)getType__12J2DTevBlock1Fv,
    (void*)getMaxStage__12J2DTevBlock1Fv,
    (void*)setTexNo__12J2DTevBlock1FUlUs,
    (void*)getTexNo__12J2DTevBlock1CFUl,
    (void*)setFontNo__12J2DTevBlock1FUs,
    (void*)getFontNo__12J2DTevBlock1CFv,
    (void*)setTevOrder__12J2DTevBlock1FUl11J2DTevOrder,
    (void*)getTevOrder__12J2DTevBlock1FUl,
    (void*)setTevColor__12J2DTevBlock1FUl13J2DGXColorS10,
    (void*)getTevColor__12J2DTevBlock1FUl,
    (void*)setTevKColor__12J2DTevBlock1FUlQ28JUtility6TColor,
    (void*)getTevKColor__12J2DTevBlock1FUl,
    (void*)setTevKColorSel__12J2DTevBlock1FUlUc,
    (void*)getTevKColorSel__12J2DTevBlock1FUl,
    (void*)setTevKAlphaSel__12J2DTevBlock1FUlUc,
    (void*)getTevKAlphaSel__12J2DTevBlock1FUl,
    (void*)setTevStageNum__12J2DTevBlock1FUc,
    (void*)getTevStageNum__12J2DTevBlock1CFv,
    (void*)setTevStage__12J2DTevBlock1FUl11J2DTevStage,
    (void*)getTevStage__12J2DTevBlock1FUl,
    (void*)setTevSwapModeInfo__12J2DTevBlock1FUl18J2DTevSwapModeInfo,
    (void*)setTevSwapModeTable__12J2DTevBlock1FUl19J2DTevSwapModeTable,
    (void*)getTevSwapModeTable__12J2DTevBlock1FUl,
    (void*)setIndTevStage__12J2DTevBlock1FUl14J2DIndTevStage,
    (void*)getIndTevStage__12J2DTevBlock1FUl,
    (void*)insertTexture__12J2DTevBlock1FUlPC7ResTIMG,
    (void*)insertTexture__12J2DTevBlock1FUlPC7ResTIMGP10JUTPalette,
    (void*)insertTexture__12J2DTevBlock1FUlP10JUTTexture,
    (void*)setTexture__12J2DTevBlock1FUlPC7ResTIMG,
    (void*)setTexture__12J2DTevBlock1FUlP10JUTTexture,
    (void*)removeTexture__12J2DTevBlock1FUl,
    (void*)setFont__12J2DTevBlock1FP7ResFONT,
    (void*)setFont__12J2DTevBlock1FP7JUTFont,
    (void*)setPalette__12J2DTevBlock1FUlPC7ResTLUT,
    (void*)prepareTexture__12J2DTevBlock1FUc,
    (void*)getTexture__12J2DTevBlock1FUl,
    (void*)getPalette__12J2DTevBlock1FUl,
    (void*)getFont__12J2DTevBlock1Fv,
    (void*)shiftDeleteFlag__12J2DTevBlock1FUcb,
    (void*)setUndeleteFlag__12J2DTevBlock1FUc,
    (void*)setFontUndeleteFlag__12J2DTevBlock1Fv,
    (void*)__dt__12J2DTevBlock1Fv,
};

/* 802EB620-802EB6A4 2E5F60 0084+00 1/0 1/1 0/0 .text            __dt__14J2DTexGenBlockFv */
J2DTexGenBlock::~J2DTexGenBlock() {
    for (int i = 0; i < 8; i++) {
        if (mTexMtx[i] != NULL) {
            delete mTexMtx[i];
        }
    }
}

/* 802EB6A4-802EB7E0 2E5FE4 013C+00 0/0 3/3 0/0 .text setTexMtx__14J2DTexGenBlockFUlR9J2DTexMtx */
void J2DTexGenBlock::setTexMtx(u32 param_0, J2DTexMtx& param_1) {
    if (!mTexMtx[param_0]) {
        mTexMtx[param_0] = new J2DTexMtx(param_1.getTexMtxInfo());
        if (!mTexMtx[param_0]) {
            return;
        }
    } else {
        mTexMtx[param_0]->setTexMtxInfo(param_1.getTexMtxInfo());
    }
    mTexMtx[param_0]->calc();
}

/* 802EB7E0-802EB87C 2E6120 009C+00 0/0 1/1 0/0 .text getTexMtx__14J2DTexGenBlockFUlR9J2DTexMtx */
void J2DTexGenBlock::getTexMtx(u32 param_0, J2DTexMtx& param_1) {
    if (mTexMtx[param_0]) {
        param_1.setTexMtxInfo(mTexMtx[param_0]->getTexMtxInfo());
    }
}

/* 802EB87C-802EB884 2E61BC 0008+00 1/0 0/0 0/0 .text            getTexture__11J2DTevBlockFUl */
JUTTexture* J2DTevBlock::getTexture(u32) {
    return NULL;
}

/* 802EB884-802EB88C 2E61C4 0008+00 1/0 0/0 0/0 .text            getPalette__11J2DTevBlockFUl */
JUTPalette* J2DTevBlock::getPalette(u32) {
    return NULL;
}

/* 802EB88C-802EB998 2E61CC 010C+00 0/0 1/1 0/0 .text            __ct__12J2DTevBlock1Fv */
J2DTevBlock1::J2DTevBlock1() {
    mTexture[0] = NULL;
    mUndeleteFlag = 0;
    initialize();
}

/* 802EB998-802EBA50 2E62D8 00B8+00 1/0 0/0 0/0 .text            __dt__12J2DTevBlock1Fv */
J2DTevBlock1::~J2DTevBlock1() {
    if (mUndeleteFlag & 1) {
        delete mTexture[0];
    }

    delete mPalette[0];

    if (mUndeleteFlag & 0x80) {
        delete mFont;
    }
}

/* 802EBA50-802EBC0C 2E6390 01BC+00 1/0 0/0 0/0 .text            initialize__12J2DTevBlock1Fv */
// inlines
#ifdef NONMATCHING
void J2DTevBlock1::initialize() {
    mTexNo[0] = -1;
    mFontNo = -1;
    mTevOrder[0].setTevOrderInfo(j2dDefaultTevOrderInfoNull);
    for (int i = 0; i < 4; i++) {
        mTevColor[i] = j2dDefaultTevColor;
    }
    mTevStage[0].setStageNo(0);
    for (int i = 0; i < 4; i++) {
        mTevKColor[i] = j2dDefaultTevKColor;
    }
    mTevKColorSel[0] = -1;
    mTevKAlphaSel[0] = -1;
    for (int i = 0; i < 4; i++) {
        mTevSwapModeTable[i].setTevSwapModeTableInfo(j2dDefaultTevSwapModeTable);
    }
    mIndTevStage[0].setIndTevStageInfo(j2dDefaultIndTevStageInfo);
    mPalette[0] = NULL;
    mFont = NULL;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void initialize__12J2DTevBlock1Fv() {
    // asm void J2DTevBlock1::initialize() {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__12J2DTevBlock1Fv.s"
}
#pragma pop
#endif

/* 802EBC0C-802EBCC0 2E654C 00B4+00 1/0 0/0 0/0 .text            prepareTexture__12J2DTevBlock1FUc
 */
bool J2DTevBlock1::prepareTexture(u8 param_0) {
    if (param_0 == 0) {
        return true;
    }

    if (mTexture[0] == NULL) {
        mTexture[0] = new JUTTexture();

        if (mTexture[0] == NULL) {
            return false;
        }
        mUndeleteFlag = (mUndeleteFlag & 0x80) | 1;
    }

    return param_0 <= 1;
}

/* 802EBCC0-802EBDE4 2E6600 0124+00 1/0 0/0 0/0 .text
 * insertTexture__12J2DTevBlock1FUlPC7ResTIMGP10JUTPalette      */
bool J2DTevBlock1::insertTexture(u32 param_0, ResTIMG const* p_timg, JUTPalette* p_tlut) {
    if (param_0 != 0 || p_timg == NULL) {
        return false;
    }

    if (mTexture[0] != NULL && mTexture[0]->getTexInfo() != NULL) {
        return false;
    }

    if (mTexture[0] == NULL) {
        mTexture[0] = new JUTTexture(p_timg, 0);

        if (mTexture[0] == NULL) {
            return false;
        }

        if (p_tlut != NULL) {
            mTexture[0]->storeTIMG(p_timg, p_tlut);
        }
    } else if (p_tlut == NULL) {
        mTexture[0]->storeTIMG(p_timg, (u8)0);
    } else {
        mTexture[0]->storeTIMG(p_timg, p_tlut);
    }

    mUndeleteFlag = (mUndeleteFlag & 0x80) | 1;
    mPalette[0] = NULL;
    mTexNo[0] = -1;
    return true;
}

/* 802EBDE4-802EBE8C 2E6724 00A8+00 1/0 0/0 0/0 .text
 * insertTexture__12J2DTevBlock1FUlP10JUTTexture                */
bool J2DTevBlock1::insertTexture(u32 param_0, JUTTexture* p_tex) {
    if (mTexture[0] != NULL && mTexture[0]->getTexInfo() != NULL) {
        return false;
    }

    if (param_0 != 0 || p_tex == NULL) {
        return false;
    }

    if (mUndeleteFlag & 1) {
        delete mTexture[0];
    }

    mTexture[0] = p_tex;
    mUndeleteFlag &= 0x80;
    mPalette[0] = NULL;
    mTexNo[0] = -1;
    return true;
}

/* 802EBE8C-802EC01C 2E67CC 0190+00 1/0 0/0 0/0 .text setTexture__12J2DTevBlock1FUlPC7ResTIMG */
bool J2DTevBlock1::setTexture(u32 param_0, ResTIMG const* p_timg) {
    if (param_0 != 0) {
        return false;
    }

    if (mTexture[0] == NULL) {
        if (p_timg != NULL) {
            mTexture[0] = new JUTTexture(p_timg, 0);

            if (mTexture[0] == NULL) {
                return false;
            }

            mUndeleteFlag = (mUndeleteFlag & 0x80) | 1;
        } else {
            mUndeleteFlag &= 0x80;
        }
    } else if (mUndeleteFlag & 1) {
        if (p_timg != NULL) {
            mTexture[0]->storeTIMG(p_timg, (u8)0);
        } else {
            delete mTexture[0];
            mTexture[0] = NULL;
            mUndeleteFlag &= 0x80;
        }
    } else {
        mTexture[0] = NULL;

        if (p_timg != NULL) {
            mTexture[0] = new JUTTexture(p_timg, 0);

            if (mTexture[0] == NULL) {
                return false;
            }

            mUndeleteFlag = (mUndeleteFlag & 0x80) | 1;
        }
    }

    delete mPalette[0];
    mPalette[0] = NULL;
    mTexNo[0] = -1;
    return true;
}

/* 802EC01C-802EC0A8 2E695C 008C+00 1/0 0/0 0/0 .text setTexture__12J2DTevBlock1FUlP10JUTTexture
 */
bool J2DTevBlock1::setTexture(u32 param_0, JUTTexture* p_tex) {
    if (param_0 != 0) {
        return false;
    }

    if (mUndeleteFlag & 1) {
        delete mTexture[0];
    }

    mTexture[0] = p_tex;
    mUndeleteFlag &= 0x80;
    delete mPalette[0];
    mPalette[0] = NULL;
    mTexNo[0] = -1;
    return true;
}

/* 802EC0A8-802EC124 2E69E8 007C+00 1/0 0/0 0/0 .text            removeTexture__12J2DTevBlock1FUl */
bool J2DTevBlock1::removeTexture(u32 param_0) {
    if (param_0 >= 1) {
        return false;
    }

    if (mUndeleteFlag & 1) {
        delete mTexture[0];
    }

    mTexture[0] = NULL;
    mUndeleteFlag &= 0x80;
    delete mPalette[0];
    mTexNo[0] = -1;
    return true;
}

/* 802EC124-802EC1D8 2E6A64 00B4+00 1/0 0/0 0/0 .text            setFont__12J2DTevBlock1FP7ResFONT
 */
bool J2DTevBlock1::setFont(ResFONT* p_font) {
    if (p_font == NULL) {
        return false;
    }

    JUTResFont* resFont = new JUTResFont(p_font, NULL);
    if (resFont == NULL) {
        return false;
    }

    if (mUndeleteFlag & 0x80) {
        delete mFont;
    }

    mFont = resFont;
    mUndeleteFlag = (mUndeleteFlag & 0x7F) | 0x80;
    return true;
}

/* 802EC1D8-802EC258 2E6B18 0080+00 1/0 0/0 0/0 .text            setFont__12J2DTevBlock1FP7JUTFont
 */
bool J2DTevBlock1::setFont(JUTFont* p_font) {
    if (p_font == NULL) {
        return false;
    }

    if (mUndeleteFlag & 0x80) {
        delete mFont;
    }

    mFont = (JUTResFont*)p_font;
    mUndeleteFlag = mUndeleteFlag & 0x7F;
    return true;
}

/* 802EC258-802EC318 2E6B98 00C0+00 1/0 0/0 0/0 .text setPalette__12J2DTevBlock1FUlPC7ResTLUT */
bool J2DTevBlock1::setPalette(u32 param_0, ResTLUT const* p_tlut) {
    if (param_0 != 0) {
        return false;
    }

    if (p_tlut != NULL) {
        if (mPalette[0] == NULL) {
            mPalette[0] = new JUTPalette(GX_TLUT0, (ResTLUT*)p_tlut);

            if (mPalette[0] == NULL) {
                return false;
            }
        } else {
            mPalette[0]->storeTLUT(GX_TLUT0, (ResTLUT*)p_tlut);
        }

        if (mTexture[0] != NULL) {
            mTexture[0]->attachPalette(mPalette[0]);
        }
    } else {
        delete mPalette[0];
        mPalette[0] = NULL;
    }

    return true;
}

/* 802EC318-802EC328 2E6C58 0010+00 1/0 0/0 0/0 .text            shiftDeleteFlag__12J2DTevBlock1FUcb
 */
void J2DTevBlock1::shiftDeleteFlag(u8, bool) {
    mUndeleteFlag &= 0x80;
}

/* 802EC328-802EC570 2E6C68 0248+00 1/0 0/0 0/0 .text            setGX__12J2DTevBlock1Fv */
void J2DTevBlock1::setGX() {
    loadTexture(GX_TEXMAP0, 0);
    GXSetTevOrder(GX_TEVSTAGE0, mTevOrder[0].getTexCoord(), mTevOrder[0].getTexMap(), mTevOrder[0].getColor());

    for (int i = 0; i < 4; i++) {
        GXSetTevColorS10(i != 3 ? GXTevRegID(i + 1) : GX_TEVPREV, mTevColor[i]);
    }

    GXSetNumTevStages(1);
    GXSetTevColorIn(GX_TEVSTAGE0, GXTevColorArg(mTevStage[0].getColorA()),
                    GXTevColorArg(mTevStage[0].getColorB()),
                    GXTevColorArg(mTevStage[0].getColorC()),
                    GXTevColorArg(mTevStage[0].getColorD()));
    GXSetTevAlphaIn(GX_TEVSTAGE0, GXTevAlphaArg(mTevStage[0].getAlphaA()),
                    GXTevAlphaArg(mTevStage[0].getAlphaB()),
                    GXTevAlphaArg(mTevStage[0].getAlphaC()),
                    GXTevAlphaArg(mTevStage[0].getAlphaD()));
    GXSetTevColorOp(GX_TEVSTAGE0, GXTevOp(mTevStage[0].getCOp()),
                    GXTevBias(mTevStage[0].getCBias()), GXTevScale(mTevStage[0].getCScale()),
                    mTevStage[0].getCClamp(), GXTevRegID(mTevStage[0].getCReg()));
    GXSetTevAlphaOp(GX_TEVSTAGE0, (GXTevOp)mTevStage[0].getAOp(),
                    GXTevBias(mTevStage[0].getABias()), GXTevScale(mTevStage[0].getAScale()),
                    mTevStage[0].getAClamp(), GXTevRegID(mTevStage[0].getAReg()));
    GXSetTevKColorSel(GX_TEVSTAGE0, mTevKColorSel[0] != 0xff ? GXTevKColorSel(mTevKColorSel[0]) : GX_TEV_KCSEL_1);
    GXSetTevKAlphaSel(GX_TEVSTAGE0, mTevKAlphaSel[0] != 0xff ? GXTevKAlphaSel(mTevKAlphaSel[0]) : GX_TEV_KASEL_1);
    for (int i = 0; i < 4; i++) {
        GXSetTevKColor(GXTevKColorID(i), mTevKColor[i]);
    }
    GXSetTevSwapMode(GX_TEVSTAGE0, GXTevSwapSel(mTevStage[0].getRasSel()), GXTevSwapSel(mTevStage[0].getTexSel()));
    for (int i = 0; i < 4; i++) {
        GXSetTevSwapModeTable(GXTevSwapSel(i), GXTevColor(mTevSwapModeTable[i].getR()),
                              GXTevColor(mTevSwapModeTable[i].getG()),
                              GXTevColor(mTevSwapModeTable[i].getB()),
                              GXTevColor(mTevSwapModeTable[i].getA()));
    }
    mIndTevStage->load(0);
}

/* 802EC570-802EC5B8 2E6EB0 0048+00 1/0 0/0 0/0 .text loadTexture__12J2DTevBlock1F11_GXTexMapIDUl
 */
void J2DTevBlock1::loadTexture(GXTexMapID texmapID, u32 texIndex) {
    if (texIndex == 0 && mTexture[texIndex] != NULL && mTexture[texIndex]->getTexInfo() != NULL) {
        mTexture[texIndex]->load(texmapID);
    }
}

/* 802EC5B8-802EC6C8 2E6EF8 0110+00 0/0 1/1 0/0 .text            __ct__12J2DTevBlock2Fv */
J2DTevBlock2::J2DTevBlock2() {
    mTexture[0] = NULL;
    mTexture[1] = NULL;
    mUndeleteFlag = 0;
    initialize();
}

/* 802EC6C8-802EC7A0 2E7008 00D8+00 1/0 0/0 0/0 .text            __dt__12J2DTevBlock2Fv */
J2DTevBlock2::~J2DTevBlock2() {
    if (mUndeleteFlag & 1) {
        delete mTexture[0];
    }

    if (mUndeleteFlag & 2) {
        delete mTexture[1];
    }

    delete mPalette[0];
    delete mPalette[1];

    if (mUndeleteFlag & 0x80) {
        delete mFont;
    }
}

/* 802EC7A0-802ECA18 2E70E0 0278+00 1/0 0/0 0/0 .text            initialize__12J2DTevBlock2Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void initialize__12J2DTevBlock2Fv() {
    // asm void J2DTevBlock2::initialize() {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__12J2DTevBlock2Fv.s"
}
#pragma pop

/* 802ECA18-802ECAE8 2E7358 00D0+00 1/0 0/0 0/0 .text            prepareTexture__12J2DTevBlock2FUc
 */
bool J2DTevBlock2::prepareTexture(u8 param_0) {
    for (u8 i = 0; i < param_0; i++) {
        if (i >= 2) {
            return false;
        }

        if (mTexture[i] == NULL) {
            mTexture[i] = new JUTTexture();

            if (mTexture[i] == NULL) {
                return false;
            }
            mUndeleteFlag |= (1 << i);
        }
    }

    return true;
}

/* 802ECAE8-802ECDE8 2E7428 0300+00 1/0 0/0 0/0 .text
 * insertTexture__12J2DTevBlock2FUlPC7ResTIMGP10JUTPalette      */
bool J2DTevBlock2::insertTexture(u32 param_0, ResTIMG const* p_timg, JUTPalette* p_tlut) {
    if (param_0 >= 2 || p_timg == NULL) {
        return false;
    }

    u8 texNo = 0;
    for (; texNo < 2; texNo++) {
        if (mTexture[texNo] == NULL || mTexture[texNo]->getTexInfo() == NULL) {
            break;
        }
    }

    if (texNo < param_0) {
        return false;
    }
    
    if (texNo == 2) {
        return false;
    }

    JUTTexture* tex;
    u8 tlutid = 0;
    if (p_timg->indexTexture && p_tlut == NULL) {
        tex = mTexture[0];
        if (tex != NULL && tex->getTexInfo() != NULL && tex->getTexInfo()->indexTexture) {
            int tlutname = tex->getTlutName();
            if (tlutname == GX_TLUT0 || tlutname == GX_BIGTLUT0) {
                tlutid = 1;
            }
        }
    }

    tex = mTexture[texNo];
    if (tex == NULL) {
        JUTTexture* newtex = new JUTTexture(p_timg, tlutid);

        if (newtex == NULL) {
            return false;
        }

        if (p_tlut != NULL) {
            newtex->storeTIMG(p_timg, p_tlut);
        }

        if (param_0 == 0) {
            mTexture[1] = mTexture[0];
            mPalette[1] = mPalette[0];
            mTexNo[1] = mTexNo[0];
        }
        mTexture[param_0] = newtex;
        shiftDeleteFlag(param_0, true);
        mUndeleteFlag |= (1 << param_0);
    } else {
        if (p_tlut == NULL) {
            tex->storeTIMG(p_timg, tlutid);
        } else {
            tex->storeTIMG(p_timg, p_tlut);
        }

        bool local_28[2];
        for (u8 i = 0; i < 2; i++) {
            local_28[i] = mUndeleteFlag & (1 << i);
        }

        if (param_0 == 0 && texNo == 1) {
            mTexture[1] = mTexture[0];
            mPalette[1] = mPalette[0];
            mTexNo[1] = mTexNo[0];
            local_28[1] = local_28[0];
        }
        mTexture[param_0] = tex;
        mUndeleteFlag &= 0x80;

        for (u8 i = 0; i < 2; i++) {
            if (local_28[i]) {
                mUndeleteFlag |= (1 << i);
            }
        }

        mUndeleteFlag |= (1 << param_0);
    }

    mPalette[param_0] = NULL;
    mTexNo[param_0] = -1;
    return true;
}

/* 802ECDE8-802ECF48 2E7728 0160+00 1/0 0/0 0/0 .text
 * insertTexture__12J2DTevBlock2FUlP10JUTTexture                */
bool J2DTevBlock2::insertTexture(u32 param_0, JUTTexture* p_tex) {
    if (param_0 >= 2 || p_tex == NULL) {
        return false;
    }

    u8 texNo = 0;
    for (; texNo < 2; texNo++) {
        if (mTexture[texNo] == NULL || mTexture[texNo]->getTexInfo() == NULL) {
            break;
        }
    }

    if (texNo < param_0) {
        return false;
    }
    
    if (texNo == 2) {
        return false;
    }

    if (mTexture[1] != NULL && mTexture[1]->getTexInfo() == NULL) {
        if (mUndeleteFlag & 2) {
            delete mTexture[1];
        }
        
        mUndeleteFlag &= ~2;
    }

    if (param_0 == 0) {
        mTexture[1] = mTexture[0];
        mPalette[1] = mPalette[0];
        mTexNo[1] = mTexNo[0];
    }

    mTexture[param_0] = p_tex;
    mPalette[param_0] = NULL;
    mTexNo[param_0] = -1;
    shiftDeleteFlag(param_0, true);
    mUndeleteFlag &= ~(1 << param_0);
    return true;
}

/* 802ECF48-802ED16C 2E7888 0224+00 1/0 0/0 0/0 .text setTexture__12J2DTevBlock2FUlPC7ResTIMG */
// instruction order
#ifdef NONMATCHING
bool J2DTevBlock2::setTexture(u32 param_0, ResTIMG const* p_timg) {
    if (param_0 >= 2) {
        return false;
    }

    u8 tlutid = 0;
    if (p_timg != NULL && p_timg->indexTexture) {
        if (mTexture[param_0 == 0] != NULL) {
            const ResTIMG* timg = mTexture[param_0 == 0]->getTexInfo();
            if (timg != NULL && timg->indexTexture) {
                int tlutname = mTexture[param_0 == 0]->getTlutName();
                u8 var_r0 = 0;

                if (tlutname >= 16) {
                    var_r0 = 16;
                }

                if (tlutname - var_r0 == 0) {
                    tlutid = 1;
                }
            }
        }
    }

    if (mTexture[param_0] == NULL) {
        if (p_timg != NULL) {
            mTexture[param_0] = new JUTTexture(p_timg, tlutid);

            if (mTexture[param_0] == NULL) {
                return false;
            }

            mUndeleteFlag |= (1 << param_0);
        } else {
            mUndeleteFlag &= ~(1 << param_0);
        }
    } else if (mUndeleteFlag & (1 << param_0)) {
        if (p_timg != NULL) {
            mTexture[param_0]->storeTIMG(p_timg, tlutid);
        } else {
            delete mTexture[param_0];
            mTexture[param_0] = NULL;
            mUndeleteFlag &= ~(1 << param_0);
        }
    } else {
        mTexture[param_0] = NULL;

        if (p_timg != NULL) {
            mTexture[param_0] = new JUTTexture(p_timg, 0);

            if (mTexture[param_0] == NULL) {
                return false;
            }

            mUndeleteFlag |= (1 << param_0);
        }
    }

    delete mPalette[param_0];
    mPalette[param_0] = NULL;
    mTexNo[param_0] = -1;
    return true;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm bool J2DTevBlock2::setTexture(u32 param_0, ResTIMG const* param_1) {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__12J2DTevBlock2FUlPC7ResTIMG.s"
}
#pragma pop
#endif

/* 802ED16C-802ED21C 2E7AAC 00B0+00 1/0 0/0 0/0 .text setTexture__12J2DTevBlock2FUlP10JUTTexture
 */
bool J2DTevBlock2::setTexture(u32 param_0, JUTTexture* p_tex) {
    if (param_0 >= 2) {
        return false;
    }

    if (mUndeleteFlag & (1 << param_0)) {
        delete mTexture[param_0];
    }

    mTexture[param_0] = p_tex;
    mUndeleteFlag &= ~(1 << param_0);
    delete mPalette[param_0];
    mPalette[param_0] = NULL;
    mTexNo[param_0] = -1;
    return true;
}

/* 802ED21C-802ED2F0 2E7B5C 00D4+00 1/0 0/0 0/0 .text            removeTexture__12J2DTevBlock2FUl */
bool J2DTevBlock2::removeTexture(u32 param_0) {
    if (param_0 >= 2) {
        return false;
    }

    if (mUndeleteFlag & (1 << param_0)) {
        delete mTexture[param_0];
    }
    delete mPalette[param_0];

    if (param_0 == 0) {
        mTexture[0] = mTexture[1];
        mPalette[0] = mPalette[1];
        mTexNo[0] = mTexNo[1];
    }

    mTexture[1] = NULL;
    mPalette[1] = NULL;
    mTexNo[1] = -1;
    shiftDeleteFlag(param_0, false);
    return true;
}

/* 802ED2F0-802ED3A4 2E7C30 00B4+00 1/0 0/0 0/0 .text            setFont__12J2DTevBlock2FP7ResFONT
 */
bool J2DTevBlock2::setFont(ResFONT* p_font) {
    if (p_font == NULL) {
        return false;
    }

    JUTResFont* resFont = new JUTResFont(p_font, NULL);
    if (resFont == NULL) {
        return false;
    }

    if (mUndeleteFlag & 0x80) {
        delete mFont;
    }

    mFont = resFont;
    mUndeleteFlag = (mUndeleteFlag & 0x7F) | 0x80;
    return true;
}

/* 802ED3A4-802ED424 2E7CE4 0080+00 1/0 0/0 0/0 .text            setFont__12J2DTevBlock2FP7JUTFont
 */
bool J2DTevBlock2::setFont(JUTFont* p_font) {
    if (p_font == NULL) {
        return false;
    }

    if (mUndeleteFlag & 0x80) {
        delete mFont;
    }

    mFont = (JUTResFont*)p_font;
    mUndeleteFlag = mUndeleteFlag & 0x7F;
    return true;
}

/* 802ED424-802ED4FC 2E7D64 00D8+00 1/0 0/0 0/0 .text setPalette__12J2DTevBlock2FUlPC7ResTLUT */
bool J2DTevBlock2::setPalette(u32 param_0, ResTLUT const* p_tlut) {
    if (param_0 >= 2) {
        return false;
    }

    if (p_tlut != NULL) {
        if (mPalette[param_0] == NULL) {
            mPalette[param_0] = new JUTPalette((GXTlut)param_0, (ResTLUT*)p_tlut);

            if (mPalette[param_0] == NULL) {
                return false;
            }
        } else {
            mPalette[param_0]->storeTLUT(GX_TLUT0, (ResTLUT*)p_tlut);
        }

        if (mTexture[param_0] != NULL) {
            mTexture[param_0]->attachPalette(mPalette[param_0]);
        }
    } else {
        delete mPalette[param_0];
        mPalette[param_0] = NULL;
    }

    return true;
}

/* 802ED4FC-802ED584 2E7E3C 0088+00 1/0 0/0 0/0 .text            shiftDeleteFlag__12J2DTevBlock2FUcb
 */
void J2DTevBlock2::shiftDeleteFlag(u8 param_0, bool param_1) {
    u8 tmpFlags = mUndeleteFlag & 0x80;
    mUndeleteFlag = mUndeleteFlag & 0x7F;

    if (param_1) {
        mUndeleteFlag = (mUndeleteFlag & ((1 << param_0) - 1)) | ((mUndeleteFlag & ~((1 << param_0) - 1)) * 2);
    } else {
        mUndeleteFlag = (mUndeleteFlag & ((1 << param_0) - 1)) | ((mUndeleteFlag & ~((1 << (param_0 + 1)) - 1)) >> 1);
    }

    mUndeleteFlag |= tmpFlags;
}

/* 802ED584-802ED874 2E7EC4 02F0+00 1/0 0/0 0/0 .text            setGX__12J2DTevBlock2Fv */
void J2DTevBlock2::setGX() {
    for (int i = 0; i < 2; i++) {
        loadTexture(GXTexMapID(i), i);
    }
    for (int i = 0; i < mTevStageNum; i++) {
        GXSetTevOrder(GXTevStageID(i), mTevOrder[i].getTexCoord(), mTevOrder[i].getTexMap(), mTevOrder[i].getColor());
    }
    for (int i = 0; i < 4; i++) {
        GXSetTevColorS10(i != 3 ? GXTevRegID(i + 1) : GX_TEVPREV, mTevColor[i]);
    }
    GXSetNumTevStages(mTevStageNum);
    for (int i = 0; i < mTevStageNum; i++) {
        GXSetTevColorIn(GXTevStageID(i), GXTevColorArg(mTevStage[i].getColorA()),
                        GXTevColorArg(mTevStage[i].getColorB()),
                        GXTevColorArg(mTevStage[i].getColorC()),
                        GXTevColorArg(mTevStage[i].getColorD()));
        GXSetTevAlphaIn(GXTevStageID(i), GXTevAlphaArg(mTevStage[i].getAlphaA()),
                        GXTevAlphaArg(mTevStage[i].getAlphaB()),
                        GXTevAlphaArg(mTevStage[i].getAlphaC()),
                        GXTevAlphaArg(mTevStage[i].getAlphaD()));
        GXSetTevColorOp(GXTevStageID(i), GXTevOp(mTevStage[i].getCOp()),
                        GXTevBias(mTevStage[i].getCBias()), GXTevScale(mTevStage[i].getCScale()),
                        mTevStage[i].getCClamp(), GXTevRegID(mTevStage[i].getCReg()));
        GXSetTevAlphaOp(GXTevStageID(i), (GXTevOp)mTevStage[i].getAOp(),
                        GXTevBias(mTevStage[i].getABias()), GXTevScale(mTevStage[i].getAScale()),
                        mTevStage[i].getAClamp(), GXTevRegID(mTevStage[i].getAReg()));
        GXSetTevKColorSel(GXTevStageID(i), mTevKColorSel[i] != 0xff ? GXTevKColorSel(mTevKColorSel[i]) : GX_TEV_KCSEL_1);
        GXSetTevKAlphaSel(GXTevStageID(i), mTevKAlphaSel[i] != 0xff ? GXTevKAlphaSel(mTevKAlphaSel[i]) : GX_TEV_KASEL_1);
    }
    for (int i = 0; i < 4; i++) {
        GXSetTevKColor(GXTevKColorID(i), mTevKColor[i]);
    }
    for (int i = 0; i < mTevStageNum; i++) {
        GXSetTevSwapMode(GXTevStageID(i), GXTevSwapSel(mTevStage[i].getRasSel()), GXTevSwapSel(mTevStage[i].getTexSel()));
    }
    for (int i = 0; i < 4; i++) {
        GXSetTevSwapModeTable(GXTevSwapSel(i), GXTevColor(mTevSwapModeTable[i].getR()),
                              GXTevColor(mTevSwapModeTable[i].getG()),
                              GXTevColor(mTevSwapModeTable[i].getB()),
                              GXTevColor(mTevSwapModeTable[i].getA()));
    }
    for (u8 i = 0; i < mTevStageNum; i++) {
        mIndTevStage[i].load(i);
    }
}

/* 802ED874-802ED8BC 2E81B4 0048+00 1/0 0/0 0/0 .text loadTexture__12J2DTevBlock2F11_GXTexMapIDUl
 */
void J2DTevBlock2::loadTexture(GXTexMapID texmapID, u32 texIndex) {
    if (texIndex < 2 && mTexture[texIndex] != NULL && mTexture[texIndex]->getTexInfo() != NULL) {
        mTexture[texIndex]->load(texmapID);
    }
}

/* 802ED8BC-802ED9E4 2E81FC 0128+00 0/0 1/1 0/0 .text            __ct__12J2DTevBlock4Fv */
J2DTevBlock4::J2DTevBlock4() {
    for (int i = 0; i < 4; i++) {
        mTexture[i] = NULL;
    }

    mUndeleteFlag = 0;
    initialize();
}

/* 802ED9E4-802EDAC4 2E8324 00E0+00 1/0 0/0 0/0 .text            __dt__12J2DTevBlock4Fv */
J2DTevBlock4::~J2DTevBlock4() {
    for (int i = 0; i < 4; i++) {
        if (mUndeleteFlag & (1 << i)) {
            delete mTexture[i];
        }
        delete mPalette[i];
    }

    if (mUndeleteFlag & 0x80) {
        delete mFont;
    }
}

/* 802EDAC4-802EDD34 2E8404 0270+00 1/0 0/0 0/0 .text            initialize__12J2DTevBlock4Fv */
// inlines
#ifdef NONMATCHING
void J2DTevBlock4::initialize() {
    for (int i = 0; i < 4; i++) {
        mTexNo[i] = -1;
    }
    mFontNo = -1;
    for (int i = 0; i < 4; i++) {
        mTevOrder[i].setTevOrderInfo(j2dDefaultTevOrderInfoNull);
    }
    for (int i = 0; i < 4; i++) {
        mTevColor[i] = j2dDefaultTevColor;
    }
    mTevStageNum = 1;
    for (int i = 0; i < 4; i++) {
        mTevStage[i].setStageNo(i);
    }
    for (int i = 0; i < 4; i++) {
        mTevKColor[i] = j2dDefaultTevKColor;
    }
    for (int i = 0; i < 4; i++) {
        mTevKColorSel[i] = -1;
        mTevKAlphaSel[i] = -1;
    }
    for (int i = 0; i < 4; i++) {
        mTevSwapModeTable[i].setTevSwapModeTableInfo(j2dDefaultTevSwapModeTable);
    }
    for (int i = 0; i < 4; i++) {
        mIndTevStage[i].setIndTevStageInfo(j2dDefaultIndTevStageInfo);
    }
    for (int i = 0; i < 4; i++) {
        mPalette[i] = NULL;
    }
    mFont = NULL;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void initialize__12J2DTevBlock4Fv() {
    // asm void J2DTevBlock4::initialize() {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__12J2DTevBlock4Fv.s"
}
#pragma pop
#endif

/* 802EDD34-802EDE04 2E8674 00D0+00 1/0 0/0 0/0 .text            prepareTexture__12J2DTevBlock4FUc
 */
bool J2DTevBlock4::prepareTexture(u8 param_0) {
    for (u8 i = 0; i < param_0; i++) {
        if (i >= 4) {
            return 0;
        }

        if (mTexture[i] == NULL) {
            mTexture[i] = new JUTTexture();

            if (mTexture[i] == NULL) {
                return false;
            }
            mUndeleteFlag |= (1 << i);
        }
    }

    return true;
}

/* 802EDE04-802EE1D4 2E8744 03D0+00 1/0 0/0 0/0 .text
 * insertTexture__12J2DTevBlock4FUlPC7ResTIMGP10JUTPalette      */
// local_3c
#ifdef NONMATCHING
bool J2DTevBlock4::insertTexture(u32 param_0, ResTIMG const* p_timg, JUTPalette* p_tlut) {
    if (param_0 >= 4 || !p_timg) {
        return false;
    }
    u8 idx;
    for (idx = 0; idx < 4; idx++) {
        if (!mTexture[idx] || !mTexture[idx]->getTexInfo()) {
            break;
        }
    }
    if (idx < param_0) {
        return false;
    }
    if (idx == 4) {
        return false;
    }
    u8 local_43 = 0;
    if (p_timg->indexTexture && !p_tlut) {
        u8 local_44 = 0;
        for (int i = 0; i < 3; i++) {
            if (!mTexture[i]) {
                continue;
            }
            const ResTIMG* texInfo = mTexture[i]->getTexInfo();
            if (!texInfo) {
                continue;
            }
            if (!texInfo->indexTexture) {
                continue;
            }
            u8 tlutName = mTexture[i]->getTlutName();
            int local_3c = tlutName >= 0x10 ? 0x10 : 0;
            u8 bVar1 = tlutName - local_3c;
            if (bVar1 < 4) {
                local_44 |= 1 << bVar1;
            }
        }
        for (u8 i = 0; i < 4; i++) {
            if ((local_44 & 1 << i) == 0) {
                local_43 = i;
                break;
            }
        }
    }
    if (!mTexture[idx]) {
        JUTTexture* texture = new JUTTexture(p_timg, local_43);
        if (!texture) {
            return false;
        }
        if (p_tlut) {
            texture->storeTIMG(p_timg, p_tlut);
        }
        for (u8 i = 3; i > param_0; i--) {
            mTexture[i] = mTexture[i - 1];
            mPalette[i] = mPalette[i - 1];
            mTexNo[i] = mTexNo[i - 1];
        }
        mTexture[param_0] = texture;
        shiftDeleteFlag(param_0, true);
        mUndeleteFlag |= 1 << param_0;
    } else {
        JUTTexture* texture = mTexture[idx];
        if (!p_tlut) {
            texture->storeTIMG(p_timg, local_43);
        } else {
            texture->storeTIMG(p_timg, p_tlut);
        }
        u8 local_38[4];
        for (u8 i = 0; i < 4; i++) {
            local_38[i] = -(mUndeleteFlag & 1 << i) >> 0x1f;
        }
        for (; idx > param_0; idx--) {
            mTexture[idx] = mTexture[idx - 1];
            mPalette[idx] = mPalette[idx - 1];
            mTexNo[idx] = mTexNo[idx - 1];
            local_38[idx] = local_38[idx - 1];
        }
        mTexture[param_0] = texture;
        mUndeleteFlag &= 0x80;
        for (u8 i = 0; i < 4; i++) {
            if (local_38[i]) {
                mUndeleteFlag |= 1 << i;
            }
        }
        mUndeleteFlag |= 1 << param_0;
    }
    mPalette[param_0] = NULL;
    mTexNo[param_0] = -1;
    return true;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm bool J2DTevBlock4::insertTexture(u32 param_0, ResTIMG const* param_1, JUTPalette* param_2) {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock4FUlPC7ResTIMGP10JUTPalette.s"
}
#pragma pop
#endif

/* 802EE1D4-802EE364 2E8B14 0190+00 1/0 0/0 0/0 .text
 * insertTexture__12J2DTevBlock4FUlP10JUTTexture                */
bool J2DTevBlock4::insertTexture(u32 param_0, JUTTexture* p_tex) {
    if (param_0 >= 4 || p_tex == NULL) {
        return false;
    }

    u8 texNo = 0;
    for (; texNo < 4; texNo++) {
        if (mTexture[texNo] == NULL || mTexture[texNo]->getTexInfo() == NULL) {
            break;
        }
    }

    if (texNo < param_0) {
        return false;
    }
    
    if (texNo == 4) {
        return false;
    }

    if (mTexture[3] != NULL && mTexture[3]->getTexInfo() == NULL) {
        if (mUndeleteFlag & 8) {
            delete mTexture[3];
        }
        
        mUndeleteFlag &= ~8;
    }

    for (u8 i = 3; i > param_0; i--) {
        mTexture[i] = mTexture[i - 1];
        mPalette[i] = mPalette[i - 1];
        mTexNo[i] = mTexNo[i - 1];
    }

    mTexture[param_0] = p_tex;
    mPalette[param_0] = NULL;
    mTexNo[param_0] = -1;
    shiftDeleteFlag(param_0, true);
    mUndeleteFlag &= ~(1 << param_0);
    return true;
}

/* 802EE364-802EE5F0 2E8CA4 028C+00 1/0 0/0 0/0 .text setTexture__12J2DTevBlock4FUlPC7ResTIMG */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm bool J2DTevBlock4::setTexture(u32 param_0, ResTIMG const* param_1) {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__12J2DTevBlock4FUlPC7ResTIMG.s"
}
#pragma pop

/* 802EE5F0-802EE6A0 2E8F30 00B0+00 1/0 0/0 0/0 .text setTexture__12J2DTevBlock4FUlP10JUTTexture
 */
bool J2DTevBlock4::setTexture(u32 param_0, JUTTexture* p_tex) {
    if (param_0 >= 4) {
        return false;
    }

    if (mUndeleteFlag & (1 << param_0)) {
        delete mTexture[param_0];
    }

    mTexture[param_0] = p_tex;
    mUndeleteFlag &= ~(1 << param_0);
    delete mPalette[param_0];
    mPalette[param_0] = NULL;
    mTexNo[param_0] = -1;
    return true;
}

/* 802EE6A0-802EE798 2E8FE0 00F8+00 1/0 0/0 0/0 .text            removeTexture__12J2DTevBlock4FUl */
bool J2DTevBlock4::removeTexture(u32 param_0) {
    if (param_0 >= 4) {
        return false;
    }

    if (mUndeleteFlag & (1 << param_0)) {
        delete mTexture[param_0];
    }
    delete mPalette[param_0];

    for (u32 i = param_0; i < 3; i++) {
        mTexture[i] = mTexture[i + 1];
        mPalette[i] = mPalette[i + 1];
        mTexNo[i] = mTexNo[i + 1];
    }

    mTexture[3] = NULL;
    mPalette[3] = NULL;
    mTexNo[3] = -1;
    shiftDeleteFlag(param_0, false);
    return true;
}

/* 802EE798-802EE84C 2E90D8 00B4+00 1/0 0/0 0/0 .text            setFont__12J2DTevBlock4FP7ResFONT
 */
bool J2DTevBlock4::setFont(ResFONT* p_font) {
    if (p_font == NULL) {
        return false;
    }

    JUTResFont* resFont = new JUTResFont(p_font, NULL);
    if (resFont == NULL) {
        return false;
    }

    if (mUndeleteFlag & 0x80) {
        delete mFont;
    }

    mFont = resFont;
    mUndeleteFlag = (mUndeleteFlag & 0x7F) | 0x80;
    return true;
}

/* 802EE84C-802EE8CC 2E918C 0080+00 1/0 0/0 0/0 .text            setFont__12J2DTevBlock4FP7JUTFont
 */
bool J2DTevBlock4::setFont(JUTFont* p_font) {
    if (p_font == NULL) {
        return false;
    }

    if (mUndeleteFlag & 0x80) {
        delete mFont;
    }

    mFont = (JUTResFont*)p_font;
    mUndeleteFlag = mUndeleteFlag & 0x7F;
    return true;
}

/* 802EE8CC-802EE9A4 2E920C 00D8+00 1/0 0/0 0/0 .text setPalette__12J2DTevBlock4FUlPC7ResTLUT */
bool J2DTevBlock4::setPalette(u32 param_0, ResTLUT const* p_tlut) {
    if (param_0 >= 4) {
        return false;
    }

    if (p_tlut != NULL) {
        if (mPalette[param_0] == NULL) {
            mPalette[param_0] = new JUTPalette((GXTlut)param_0, (ResTLUT*)p_tlut);

            if (mPalette[param_0] == NULL) {
                return false;
            }
        } else {
            mPalette[param_0]->storeTLUT(GX_TLUT0, (ResTLUT*)p_tlut);
        }

        if (mTexture[param_0] != NULL) {
            mTexture[param_0]->attachPalette(mPalette[param_0]);
        }
    } else {
        delete mPalette[param_0];
        mPalette[param_0] = NULL;
    }

    return true;
}

/* 802EE9A4-802EEA2C 2E92E4 0088+00 1/0 0/0 0/0 .text            shiftDeleteFlag__12J2DTevBlock4FUcb
 */
void J2DTevBlock4::shiftDeleteFlag(u8 param_0, bool param_1) {
    u8 tmpFlags = mUndeleteFlag & 0x80;
    mUndeleteFlag = mUndeleteFlag & 0x7F;

    if (param_1) {
        mUndeleteFlag = (mUndeleteFlag & ((1 << param_0) - 1)) | ((mUndeleteFlag & ~((1 << param_0) - 1)) * 2);
    } else {
        mUndeleteFlag = (mUndeleteFlag & ((1 << param_0) - 1)) | ((mUndeleteFlag & ~((1 << (param_0 + 1)) - 1)) >> 1);
    }

    mUndeleteFlag |= tmpFlags;
}

/* 802EEA2C-802EED1C 2E936C 02F0+00 1/0 0/0 0/0 .text            setGX__12J2DTevBlock4Fv */
void J2DTevBlock4::setGX() {
    for (int i = 0; i < 4; i++) {
        loadTexture(GXTexMapID(i), i);
    }
    for (int i = 0; i < mTevStageNum; i++) {
        GXSetTevOrder(GXTevStageID(i), mTevOrder[i].getTexCoord(), mTevOrder[i].getTexMap(), mTevOrder[i].getColor());
    }
    for (int i = 0; i < 4; i++) {
        GXSetTevColorS10(i != 3 ? GXTevRegID(i + 1) : GX_TEVPREV, mTevColor[i]);
    }
    GXSetNumTevStages(mTevStageNum);
    for (int i = 0; i < mTevStageNum; i++) {
        GXSetTevColorIn(GXTevStageID(i), GXTevColorArg(mTevStage[i].getColorA()),
                        GXTevColorArg(mTevStage[i].getColorB()),
                        GXTevColorArg(mTevStage[i].getColorC()),
                        GXTevColorArg(mTevStage[i].getColorD()));
        GXSetTevAlphaIn(GXTevStageID(i), GXTevAlphaArg(mTevStage[i].getAlphaA()),
                        GXTevAlphaArg(mTevStage[i].getAlphaB()),
                        GXTevAlphaArg(mTevStage[i].getAlphaC()),
                        GXTevAlphaArg(mTevStage[i].getAlphaD()));
        GXSetTevColorOp(GXTevStageID(i), GXTevOp(mTevStage[i].getCOp()),
                        GXTevBias(mTevStage[i].getCBias()), GXTevScale(mTevStage[i].getCScale()),
                        mTevStage[i].getCClamp(), GXTevRegID(mTevStage[i].getCReg()));
        GXSetTevAlphaOp(GXTevStageID(i), (GXTevOp)mTevStage[i].getAOp(),
                        GXTevBias(mTevStage[i].getABias()), GXTevScale(mTevStage[i].getAScale()),
                        mTevStage[i].getAClamp(), GXTevRegID(mTevStage[i].getAReg()));
        GXSetTevKColorSel(GXTevStageID(i), mTevKColorSel[i] != 0xff ? GXTevKColorSel(mTevKColorSel[i]) : GX_TEV_KCSEL_1);
        GXSetTevKAlphaSel(GXTevStageID(i), mTevKAlphaSel[i] != 0xff ? GXTevKAlphaSel(mTevKAlphaSel[i]) : GX_TEV_KASEL_1);
    }
    for (int i = 0; i < 4; i++) {
        GXSetTevKColor(GXTevKColorID(i), mTevKColor[i]);
    }
    for (int i = 0; i < mTevStageNum; i++) {
        GXSetTevSwapMode(GXTevStageID(i), GXTevSwapSel(mTevStage[i].getRasSel()), GXTevSwapSel(mTevStage[i].getTexSel()));
    }
    for (int i = 0; i < 4; i++) {
        GXSetTevSwapModeTable(GXTevSwapSel(i), GXTevColor(mTevSwapModeTable[i].getR()),
                              GXTevColor(mTevSwapModeTable[i].getG()),
                              GXTevColor(mTevSwapModeTable[i].getB()),
                              GXTevColor(mTevSwapModeTable[i].getA()));
    }
    for (u8 i = 0; i < mTevStageNum; i++) {
        mIndTevStage[i].load(i);
    }
}

/* 802EED1C-802EED64 2E965C 0048+00 1/0 0/0 0/0 .text loadTexture__12J2DTevBlock4F11_GXTexMapIDUl
 */
void J2DTevBlock4::loadTexture(GXTexMapID texmapID, u32 texIndex) {
    if (texIndex < 4 && mTexture[texIndex] != NULL && mTexture[texIndex]->getTexInfo() != NULL) {
        mTexture[texIndex]->load(texmapID);
    }
}

/* 802EED64-802EEE8C 2E96A4 0128+00 0/0 1/1 0/0 .text            __ct__12J2DTevBlock8Fv */
J2DTevBlock8::J2DTevBlock8() {
    for (int i = 0; i < 8; i++) {
        mTexture[i] = NULL;
    }

    mUndeleteFlag = 0;
    initialize();
}

/* 802EEE8C-802EEF6C 2E97CC 00E0+00 1/0 0/0 0/0 .text            __dt__12J2DTevBlock8Fv */
J2DTevBlock8::~J2DTevBlock8() {
    for (int i = 0; i < 8; i++) {
        if (mUndeleteFlag & (1 << i)) {
            delete mTexture[i];
        }
        delete mPalette[i];
    }

    if (mFontUndeleteFlag) {
        delete mFont;
    }
}

/* 802EEF6C-802EF1E0 2E98AC 0274+00 1/0 0/0 0/0 .text            initialize__12J2DTevBlock8Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void initialize__12J2DTevBlock8Fv() {
    // asm void J2DTevBlock8::initialize() {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__12J2DTevBlock8Fv.s"
}
#pragma pop

/* 802EF1E0-802EF2B0 2E9B20 00D0+00 1/0 0/0 0/0 .text            prepareTexture__12J2DTevBlock8FUc
 */
bool J2DTevBlock8::prepareTexture(u8 param_0) {
    for (u8 i = 0; i < param_0; i++) {
        if (i >= 8) {
            return 0;
        }

        if (mTexture[i] == NULL) {
            mTexture[i] = new JUTTexture();

            if (mTexture[i] == NULL) {
                return false;
            }
            mUndeleteFlag |= (1 << i);
        }
    }

    return true;
}

/* 802EF2B0-802EF67C 2E9BF0 03CC+00 1/0 0/0 0/0 .text
 * insertTexture__12J2DTevBlock8FUlPC7ResTIMGP10JUTPalette      */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm bool J2DTevBlock8::insertTexture(u32 param_0, ResTIMG const* param_1, JUTPalette* param_2) {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__12J2DTevBlock8FUlPC7ResTIMGP10JUTPalette.s"
}
#pragma pop

/* 802EF67C-802EF80C 2E9FBC 0190+00 1/0 0/0 0/0 .text
 * insertTexture__12J2DTevBlock8FUlP10JUTTexture                */
bool J2DTevBlock8::insertTexture(u32 param_0, JUTTexture* p_tex) {
    if (param_0 >= 8 || p_tex == NULL) {
        return false;
    }

    u8 texNo = 0;
    for (; texNo < 8; texNo++) {
        if (mTexture[texNo] == NULL || mTexture[texNo]->getTexInfo() == NULL) {
            break;
        }
    }

    if (texNo < param_0) {
        return false;
    }
    
    if (texNo == 8) {
        return false;
    }

    if (mTexture[7] != NULL && mTexture[7]->getTexInfo() == NULL) {
        if (mUndeleteFlag & 0x80) {
            delete mTexture[7];
        }
        
        mUndeleteFlag &= 0x7F;
    }

    for (u8 i = 7; i > param_0; i--) {
        mTexture[i] = mTexture[i - 1];
        mPalette[i] = mPalette[i - 1];
        mTexNo[i] = mTexNo[i - 1];
    }

    mTexture[param_0] = p_tex;
    mPalette[param_0] = NULL;
    mTexNo[param_0] = -1;
    shiftDeleteFlag(param_0, true);
    mUndeleteFlag &= ~(1 << param_0);
    return true;
}

/* 802EF80C-802EFA98 2EA14C 028C+00 1/0 0/0 0/0 .text setTexture__12J2DTevBlock8FUlPC7ResTIMG */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm bool J2DTevBlock8::setTexture(u32 param_0, ResTIMG const* param_1) {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__12J2DTevBlock8FUlPC7ResTIMG.s"
}
#pragma pop

/* 802EFA98-802EFB48 2EA3D8 00B0+00 1/0 0/0 0/0 .text setTexture__12J2DTevBlock8FUlP10JUTTexture
 */
bool J2DTevBlock8::setTexture(u32 param_0, JUTTexture* p_tex) {
    if (param_0 >= 8) {
        return false;
    }

    if (mUndeleteFlag & (1 << param_0)) {
        delete mTexture[param_0];
    }

    mTexture[param_0] = p_tex;
    mUndeleteFlag &= ~(1 << param_0);
    delete mPalette[param_0];
    mPalette[param_0] = NULL;
    mTexNo[param_0] = -1;
    return true;
}

/* 802EFB48-802EFC40 2EA488 00F8+00 1/0 0/0 0/0 .text            removeTexture__12J2DTevBlock8FUl */
bool J2DTevBlock8::removeTexture(u32 param_0) {
    if (param_0 >= 8) {
        return false;
    }

    if (mUndeleteFlag & (1 << param_0)) {
        delete mTexture[param_0];
    }
    delete mPalette[param_0];

    for (u32 i = param_0; i < 7; i++) {
        mTexture[i] = mTexture[i + 1];
        mPalette[i] = mPalette[i + 1];
        mTexNo[i] = mTexNo[i + 1];
    }

    mTexture[7] = NULL;
    mPalette[7] = NULL;
    mTexNo[7] = -1;
    shiftDeleteFlag(param_0, false);
    return true;
}

/* 802EFC40-802EFCEC 2EA580 00AC+00 1/0 0/0 0/0 .text            setFont__12J2DTevBlock8FP7ResFONT
 */
bool J2DTevBlock8::setFont(ResFONT* p_font) {
    if (p_font == NULL) {
        return false;
    }

    JUTResFont* resFont = new JUTResFont(p_font, NULL);
    if (resFont == NULL) {
        return false;
    }

    if (mFontUndeleteFlag) {
        delete mFont;
    }

    mFont = resFont;
    mFontUndeleteFlag = true;
    return true;
}

/* 802EFCEC-802EFD68 2EA62C 007C+00 1/0 0/0 0/0 .text            setFont__12J2DTevBlock8FP7JUTFont
 */
bool J2DTevBlock8::setFont(JUTFont* p_font) {
    if (p_font == NULL) {
        return false;
    }

    if (mFontUndeleteFlag) {
        delete mFont;
    }

    mFont = (JUTResFont*)p_font;
    mFontUndeleteFlag = false;
    return true;
}

/* 802EFD68-802EFE40 2EA6A8 00D8+00 1/0 0/0 0/0 .text setPalette__12J2DTevBlock8FUlPC7ResTLUT */
bool J2DTevBlock8::setPalette(u32 param_0, ResTLUT const* p_tlut) {
    if (param_0 >= 8) {
        return false;
    }

    if (p_tlut != NULL) {
        if (mPalette[param_0] == NULL) {
            mPalette[param_0] = new JUTPalette((GXTlut)param_0, (ResTLUT*)p_tlut);

            if (mPalette[param_0] == NULL) {
                return false;
            }
        } else {
            mPalette[param_0]->storeTLUT(GX_TLUT0, (ResTLUT*)p_tlut);
        }

        if (mTexture[param_0] != NULL) {
            mTexture[param_0]->attachPalette(mPalette[param_0]);
        }
    } else {
        delete mPalette[param_0];
        mPalette[param_0] = NULL;
    }

    return true;
}

/* 802EFE40-802EFEAC 2EA780 006C+00 1/0 0/0 0/0 .text            shiftDeleteFlag__12J2DTevBlock8FUcb
 */
void J2DTevBlock8::shiftDeleteFlag(u8 param_0, bool param_1) {
    if (param_1) {
        mUndeleteFlag = (mUndeleteFlag & ((1 << param_0) - 1)) | ((mUndeleteFlag & ~((1 << param_0) - 1)) * 2);
    } else {
        mUndeleteFlag = (mUndeleteFlag & ((1 << param_0) - 1)) | ((mUndeleteFlag & ~((1 << (param_0 + 1)) - 1)) >> 1);
    }
}

/* 802EFEAC-802F019C 2EA7EC 02F0+00 1/0 0/0 0/0 .text            setGX__12J2DTevBlock8Fv */
void J2DTevBlock8::setGX() {
    for (int i = 0; i < 8; i++) {
        loadTexture(GXTexMapID(i), i);
    }
    for (int i = 0; i < mTevStageNum; i++) {
        GXSetTevOrder(GXTevStageID(i), mTevOrder[i].getTexCoord(), mTevOrder[i].getTexMap(), mTevOrder[i].getColor());
    }
    for (int i = 0; i < 4; i++) {
        GXSetTevColorS10(i != 3 ? GXTevRegID(i + 1) : GX_TEVPREV, mTevColor[i]);
    }
    GXSetNumTevStages(mTevStageNum);
    for (int i = 0; i < mTevStageNum; i++) {
        GXSetTevColorIn(GXTevStageID(i), GXTevColorArg(mTevStage[i].getColorA()),
                        GXTevColorArg(mTevStage[i].getColorB()),
                        GXTevColorArg(mTevStage[i].getColorC()),
                        GXTevColorArg(mTevStage[i].getColorD()));
        GXSetTevAlphaIn(GXTevStageID(i), GXTevAlphaArg(mTevStage[i].getAlphaA()),
                        GXTevAlphaArg(mTevStage[i].getAlphaB()),
                        GXTevAlphaArg(mTevStage[i].getAlphaC()),
                        GXTevAlphaArg(mTevStage[i].getAlphaD()));
        GXSetTevColorOp(GXTevStageID(i), GXTevOp(mTevStage[i].getCOp()),
                        GXTevBias(mTevStage[i].getCBias()), GXTevScale(mTevStage[i].getCScale()),
                        mTevStage[i].getCClamp(), GXTevRegID(mTevStage[i].getCReg()));
        GXSetTevAlphaOp(GXTevStageID(i), (GXTevOp)mTevStage[i].getAOp(),
                        GXTevBias(mTevStage[i].getABias()), GXTevScale(mTevStage[i].getAScale()),
                        mTevStage[i].getAClamp(), GXTevRegID(mTevStage[i].getAReg()));
        GXSetTevKColorSel(GXTevStageID(i), mTevKColorSel[i] != 0xff ? GXTevKColorSel(mTevKColorSel[i]) : GX_TEV_KCSEL_1);
        GXSetTevKAlphaSel(GXTevStageID(i), mTevKAlphaSel[i] != 0xff ? GXTevKAlphaSel(mTevKAlphaSel[i]) : GX_TEV_KASEL_1);
    }
    for (int i = 0; i < 4; i++) {
        GXSetTevKColor(GXTevKColorID(i), mTevKColor[i]);
    }
    for (int i = 0; i < mTevStageNum; i++) {
        GXSetTevSwapMode(GXTevStageID(i), GXTevSwapSel(mTevStage[i].getRasSel()), GXTevSwapSel(mTevStage[i].getTexSel()));
    }
    for (int i = 0; i < 4; i++) {
        GXSetTevSwapModeTable(GXTevSwapSel(i), GXTevColor(mTevSwapModeTable[i].getR()),
                              GXTevColor(mTevSwapModeTable[i].getG()),
                              GXTevColor(mTevSwapModeTable[i].getB()),
                              GXTevColor(mTevSwapModeTable[i].getA()));
    }
    for (u8 i = 0; i < mTevStageNum; i++) {
        mIndTevStage[i].load(i);
    }
}

/* 802F019C-802F01E4 2EAADC 0048+00 1/0 0/0 0/0 .text loadTexture__12J2DTevBlock8F11_GXTexMapIDUl
 */
void J2DTevBlock8::loadTexture(GXTexMapID texmapID, u32 texIndex) {
    if (texIndex < 8 && mTexture[texIndex] != NULL && mTexture[texIndex]->getTexInfo() != NULL) {
        mTexture[texIndex]->load(texmapID);
    }
}

/* 802F01E4-802F030C 2EAB24 0128+00 0/0 1/1 0/0 .text            __ct__13J2DTevBlock16Fv */
J2DTevBlock16::J2DTevBlock16() {
    for (int i = 0; i < 8; i++) {
        mTexture[i] = NULL;
    }

    mUndeleteFlag = 0;
    initialize();
}

/* 802F030C-802F03EC 2EAC4C 00E0+00 1/0 0/0 0/0 .text            __dt__13J2DTevBlock16Fv */
J2DTevBlock16::~J2DTevBlock16() {
    for (int i = 0; i < 8; i++) {
        if (mUndeleteFlag & (1 << i)) {
            delete mTexture[i];
        }
        delete mPalette[i];
    }

    if (mFontUndeleteFlag) {
        delete mFont;
    }
}

/* 802F03EC-802F0660 2EAD2C 0274+00 1/0 0/0 0/0 .text            initialize__13J2DTevBlock16Fv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void initialize__13J2DTevBlock16Fv() {
    // asm void J2DTevBlock16::initialize() {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__13J2DTevBlock16Fv.s"
}
#pragma pop

/* 802F0660-802F0730 2EAFA0 00D0+00 1/0 0/0 0/0 .text            prepareTexture__13J2DTevBlock16FUc
 */
bool J2DTevBlock16::prepareTexture(u8 param_0) {
    for (u8 i = 0; i < param_0; i++) {
        if (i >= 8) {
            return 0;
        }

        if (mTexture[i] == NULL) {
            mTexture[i] = new JUTTexture();

            if (mTexture[i] == NULL) {
                return false;
            }
            mUndeleteFlag |= (1 << i);
        }
    }

    return true;
}

/* 802F0730-802F0AFC 2EB070 03CC+00 1/0 0/0 0/0 .text
 * insertTexture__13J2DTevBlock16FUlPC7ResTIMGP10JUTPalette     */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm bool J2DTevBlock16::insertTexture(u32 param_0, ResTIMG const* param_1, JUTPalette* param_2) {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/insertTexture__13J2DTevBlock16FUlPC7ResTIMGP10JUTPalette.s"
}
#pragma pop

/* 802F0AFC-802F0C8C 2EB43C 0190+00 1/0 0/0 0/0 .text
 * insertTexture__13J2DTevBlock16FUlP10JUTTexture               */
bool J2DTevBlock16::insertTexture(u32 param_0, JUTTexture* p_tex) {
    if (param_0 >= 8 || p_tex == NULL) {
        return false;
    }

    u8 texNo = 0;
    for (; texNo < 8; texNo++) {
        if (mTexture[texNo] == NULL || mTexture[texNo]->getTexInfo() == NULL) {
            break;
        }
    }

    if (texNo < param_0) {
        return false;
    }
    
    if (texNo == 8) {
        return false;
    }

    if (mTexture[7] != NULL && mTexture[7]->getTexInfo() == NULL) {
        if (mUndeleteFlag & 0x80) {
            delete mTexture[7];
        }
        
        mUndeleteFlag &= 0x7F;
    }

    for (u8 i = 7; i > param_0; i--) {
        mTexture[i] = mTexture[i - 1];
        mPalette[i] = mPalette[i - 1];
        mTexNo[i] = mTexNo[i - 1];
    }

    mTexture[param_0] = p_tex;
    mPalette[param_0] = NULL;
    mTexNo[param_0] = -1;
    shiftDeleteFlag(param_0, true);
    mUndeleteFlag &= ~(1 << param_0);
    return true;
}

/* 802F0C8C-802F0F18 2EB5CC 028C+00 1/0 0/0 0/0 .text setTexture__13J2DTevBlock16FUlPC7ResTIMG */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm bool J2DTevBlock16::setTexture(u32 param_0, ResTIMG const* param_1) {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/setTexture__13J2DTevBlock16FUlPC7ResTIMG.s"
}
#pragma pop

/* 802F0F18-802F0FC8 2EB858 00B0+00 1/0 0/0 0/0 .text setTexture__13J2DTevBlock16FUlP10JUTTexture
 */
bool J2DTevBlock16::setTexture(u32 param_0, JUTTexture* p_tex) {
    if (param_0 >= 8) {
        return false;
    }

    if (mUndeleteFlag & (1 << param_0)) {
        delete mTexture[param_0];
    }

    mTexture[param_0] = p_tex;
    mUndeleteFlag &= ~(1 << param_0);
    delete mPalette[param_0];
    mPalette[param_0] = NULL;
    mTexNo[param_0] = -1;
    return true;
}

/* 802F0FC8-802F10C0 2EB908 00F8+00 1/0 0/0 0/0 .text            removeTexture__13J2DTevBlock16FUl
 */
bool J2DTevBlock16::removeTexture(u32 param_0) {
    if (param_0 >= 8) {
        return false;
    }

    if (mUndeleteFlag & (1 << param_0)) {
        delete mTexture[param_0];
    }
    delete mPalette[param_0];

    for (u32 i = param_0; i < 7; i++) {
        mTexture[i] = mTexture[i + 1];
        mPalette[i] = mPalette[i + 1];
        mTexNo[i] = mTexNo[i + 1];
    }

    mTexture[7] = NULL;
    mPalette[7] = NULL;
    mTexNo[7] = -1;
    shiftDeleteFlag(param_0, false);
    return true;
}

/* 802F10C0-802F116C 2EBA00 00AC+00 1/0 0/0 0/0 .text            setFont__13J2DTevBlock16FP7ResFONT
 */
bool J2DTevBlock16::setFont(ResFONT* p_font) {
    if (p_font == NULL) {
        return false;
    }

    JUTResFont* resFont = new JUTResFont(p_font, NULL);
    if (resFont == NULL) {
        return false;
    }

    if (mFontUndeleteFlag) {
        delete mFont;
    }

    mFont = resFont;
    mFontUndeleteFlag = true;
    return true;
}

/* 802F116C-802F11E8 2EBAAC 007C+00 1/0 0/0 0/0 .text            setFont__13J2DTevBlock16FP7JUTFont
 */
bool J2DTevBlock16::setFont(JUTFont* p_font) {
    if (p_font == NULL) {
        return false;
    }

    if (mFontUndeleteFlag) {
        delete mFont;
    }

    mFont = (JUTResFont*)p_font;
    mFontUndeleteFlag = false;
    return true;
}

/* 802F11E8-802F12C0 2EBB28 00D8+00 1/0 0/0 0/0 .text setPalette__13J2DTevBlock16FUlPC7ResTLUT */
bool J2DTevBlock16::setPalette(u32 param_0, ResTLUT const* p_tlut) {
    if (param_0 >= 8) {
        return false;
    }

    if (p_tlut != NULL) {
        if (mPalette[param_0] == NULL) {
            mPalette[param_0] = new JUTPalette((GXTlut)param_0, (ResTLUT*)p_tlut);

            if (mPalette[param_0] == NULL) {
                return false;
            }
        } else {
            mPalette[param_0]->storeTLUT(GX_TLUT0, (ResTLUT*)p_tlut);
        }

        if (mTexture[param_0] != NULL) {
            mTexture[param_0]->attachPalette(mPalette[param_0]);
        }
    } else {
        delete mPalette[param_0];
        mPalette[param_0] = NULL;
    }

    return true;
}

/* 802F12C0-802F132C 2EBC00 006C+00 1/0 0/0 0/0 .text shiftDeleteFlag__13J2DTevBlock16FUcb */
void J2DTevBlock16::shiftDeleteFlag(u8 param_0, bool param_1) {
    if (param_1) {
        mUndeleteFlag = (mUndeleteFlag & ((1 << param_0) - 1)) | ((mUndeleteFlag & ~((1 << param_0) - 1)) * 2);
    } else {
        mUndeleteFlag = (mUndeleteFlag & ((1 << param_0) - 1)) | ((mUndeleteFlag & ~((1 << (param_0 + 1)) - 1)) >> 1);
    }
}

/* 802F132C-802F161C 2EBC6C 02F0+00 1/0 0/0 0/0 .text            setGX__13J2DTevBlock16Fv */
void J2DTevBlock16::setGX() {
    for (int i = 0; i < 8; i++) {
        loadTexture(GXTexMapID(i), i);
    }
    for (int i = 0; i < mTevStageNum; i++) {
        GXSetTevOrder(GXTevStageID(i), mTevOrder[i].getTexCoord(), mTevOrder[i].getTexMap(), mTevOrder[i].getColor());
    }
    for (int i = 0; i < 4; i++) {
        GXSetTevColorS10(i != 3 ? GXTevRegID(i + 1) : GX_TEVPREV, mTevColor[i]);
    }
    GXSetNumTevStages(mTevStageNum);
    for (int i = 0; i < mTevStageNum; i++) {
        GXSetTevColorIn(GXTevStageID(i), GXTevColorArg(mTevStage[i].getColorA()),
                        GXTevColorArg(mTevStage[i].getColorB()),
                        GXTevColorArg(mTevStage[i].getColorC()),
                        GXTevColorArg(mTevStage[i].getColorD()));
        GXSetTevAlphaIn(GXTevStageID(i), GXTevAlphaArg(mTevStage[i].getAlphaA()),
                        GXTevAlphaArg(mTevStage[i].getAlphaB()),
                        GXTevAlphaArg(mTevStage[i].getAlphaC()),
                        GXTevAlphaArg(mTevStage[i].getAlphaD()));
        GXSetTevColorOp(GXTevStageID(i), GXTevOp(mTevStage[i].getCOp()),
                        GXTevBias(mTevStage[i].getCBias()), GXTevScale(mTevStage[i].getCScale()),
                        mTevStage[i].getCClamp(), GXTevRegID(mTevStage[i].getCReg()));
        GXSetTevAlphaOp(GXTevStageID(i), (GXTevOp)mTevStage[i].getAOp(),
                        GXTevBias(mTevStage[i].getABias()), GXTevScale(mTevStage[i].getAScale()),
                        mTevStage[i].getAClamp(), GXTevRegID(mTevStage[i].getAReg()));
        GXSetTevKColorSel(GXTevStageID(i), mTevKColorSel[i] != 0xff ? GXTevKColorSel(mTevKColorSel[i]) : GX_TEV_KCSEL_1);
        GXSetTevKAlphaSel(GXTevStageID(i), mTevKAlphaSel[i] != 0xff ? GXTevKAlphaSel(mTevKAlphaSel[i]) : GX_TEV_KASEL_1);
    }
    for (int i = 0; i < 4; i++) {
        GXSetTevKColor(GXTevKColorID(i), mTevKColor[i]);
    }
    for (int i = 0; i < mTevStageNum; i++) {
        GXSetTevSwapMode(GXTevStageID(i), GXTevSwapSel(mTevStage[i].getRasSel()), GXTevSwapSel(mTevStage[i].getTexSel()));
    }
    for (int i = 0; i < 4; i++) {
        GXSetTevSwapModeTable(GXTevSwapSel(i), GXTevColor(mTevSwapModeTable[i].getR()),
                              GXTevColor(mTevSwapModeTable[i].getG()),
                              GXTevColor(mTevSwapModeTable[i].getB()),
                              GXTevColor(mTevSwapModeTable[i].getA()));
    }
    for (u8 i = 0; i < mTevStageNum; i++) {
        mIndTevStage[i].load(i);
    }
}

/* 802F161C-802F1664 2EBF5C 0048+00 1/0 0/0 0/0 .text loadTexture__13J2DTevBlock16F11_GXTexMapIDUl
 */
void J2DTevBlock16::loadTexture(GXTexMapID texmapID, u32 texIndex) {
    if (texIndex < 8 && mTexture[texIndex] != NULL && mTexture[texIndex]->getTexInfo() != NULL) {
        mTexture[texIndex]->load(texmapID);
    }
}

/* 802F1664-802F1730 2EBFA4 00CC+00 1/0 0/0 0/0 .text            initialize__15J2DIndBlockFullFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
extern "C" asm void initialize__15J2DIndBlockFullFv() {
    // asm void J2DIndBlockFull::initialize() {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/initialize__15J2DIndBlockFullFv.s"
}
#pragma pop

/* 802F1730-802F17FC 2EC070 00CC+00 1/0 0/0 0/0 .text            setGX__15J2DIndBlockFullFv */
void J2DIndBlockFull::setGX() {
    GXSetNumIndStages(mIndTexStageNum);
    for (u8 i = 0; i < mIndTexStageNum; i++) {
        mIndTexMtx[i].load(i);
    }
    for (u8 i = 0; i < mIndTexStageNum; i++) {
        mTexCoordScale[i].load(i);
    }
    for (u8 i = 0; i < mIndTexStageNum; i++) {
        mIndTexOrder[i].load(i);
    }
}

/* 802F17FC-802F1840 2EC13C 0044+00 0/0 1/1 0/0 .text            initialize__10J2DPEBlockFv */
void J2DPEBlock::initialize() {
    mAlphaComp = J2DAlphaComp();
    mBlend.setBlendInfo(j2dDefaultBlendInfo);
    mDither = data_804561A4;
}

/* 802F1840-802F18A0 2EC180 0060+00 0/0 1/1 0/0 .text            setGX__10J2DPEBlockFv */
void J2DPEBlock::setGX() {
    GXSetAlphaCompare(GXCompare(mAlphaComp.getComp0()), mAlphaComp.getRef0(), GXAlphaOp(mAlphaComp.getOp()), GXCompare(mAlphaComp.getComp1()), mAlphaComp.getRef1());
    GXSetBlendMode(GXBlendMode(mBlend.getType()), GXBlendFactor(mBlend.getSrcFactor()), GXBlendFactor(mBlend.getDstFactor()), GXLogicOp(mBlend.getOp()));
    GXSetDither(mDither);
}

/* 802F18A0-802F1934 2EC1E0 0094+00 5/5 0/0 0/0 .text            __ct__14J2DIndTevStageFv */
// should be inline
#ifdef NONMATCHING
J2DIndTevStage::J2DIndTevStage() {
    mFlags = J2DCalcIndTevStage(j2dDefaultIndTevStageInfo);
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __ct__14J2DIndTevStageFv() {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__ct__14J2DIndTevStageFv.s"
}
#pragma pop
#endif

/* 802F1934-802F1940 2EC274 000C+00 5/5 0/0 0/0 .text            __ct__19J2DTevSwapModeTableFv */
// Should be inline
#ifdef NONMATCHING
J2DTevSwapModeTable::J2DTevSwapModeTable() {
    field_0x0 = data_804561AC;
}
#else
asm void __ct__19J2DTevSwapModeTableFv() {
    #include "asm/JSystem/J2DGraph/J2DMatBlock/__ct__19J2DTevSwapModeTableFv.s"
}
#endif

/* 802F1940-802F19A8 2EC280 0068+00 5/5 1/1 0/0 .text            __ct__11J2DTevStageFv */
J2DTevStage::J2DTevStage() {
    setTevStageInfo(j2dDefaultTevStageInfo);
    setTevSwapModeInfo(j2dDefaultTevSwapMode);
}

/* 802F19A8-802F1B70 2EC2E8 01C8+00 1/1 1/1 0/0 .text
 * setTevStageInfo__11J2DTevStageFRC15J2DTevStageInfo           */
void J2DTevStage::setTevStageInfo(J2DTevStageInfo const& info) {
    setColorABCD(info.field_0x1, info.field_0x2, info.field_0x3, info.field_0x4);
    setTevColorOp(info.field_0x5, info.field_0x6, info.field_0x7, info.field_0x8, info.field_0x9);
    setAlphaABCD(info.field_0xa, info.field_0xb, info.field_0xc, info.field_0xd);
    setTevAlphaOp(info.field_0xe, info.field_0xf, info.field_0x10, info.field_0x11, info.field_0x12);
}

/* 802F1B70-802F1B90 2EC4B0 0020+00 5/5 0/0 0/0 .text            __ct__11J2DTevOrderFv */
// Matching but should be inline
#ifdef NONMATCHING
J2DTevOrder::J2DTevOrder() {
    mTevOrderInfo = j2dDefaultTevOrderInfoNull;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
// J2DTevOrder::J2DTevOrder() {
asm void __ct__11J2DTevOrderFv() {
    nofralloc
#include "asm/JSystem/J2DGraph/J2DMatBlock/__ct__11J2DTevOrderFv.s"
}
#pragma pop
#endif

/* 802F1B90-802F1B94 2EC4D0 0004+00 5/5 0/0 0/0 .text            __ct__13J2DGXColorS10Fv */
// Most likely inlined
//J2DGXColorS10::J2DGXColorS10() {
void __ct__13J2DGXColorS10Fv() {
    /* empty function */
}

/* 802F1B94-802F1BA0 2EC4D4 000C+00 1/0 0/0 0/0 .text            getType__15J2DIndBlockFullFv */
u32 J2DIndBlockFull::getType() {
    return 'IBLF';
}

/* 802F1BA0-802F1BA8 -00001 0008+00 0/0 0/0 0/0 .text setIndTexStageNum__15J2DIndBlockFullFUc */
void J2DIndBlockFull::setIndTexStageNum(u8 num) {
    mIndTexStageNum = num;
}

/* 802F1BA8-802F1BB0 2EC4E8 0008+00 1/0 0/0 0/0 .text getIndTexStageNum__15J2DIndBlockFullCFv */
u8 J2DIndBlockFull::getIndTexStageNum() const {
    return mIndTexStageNum;
}

/* 802F1BB0-802F1BCC 2EC4F0 001C+00 1/0 0/0 0/0 .text
 * setIndTexOrder__15J2DIndBlockFullFUl14J2DIndTexOrder         */
void J2DIndBlockFull::setIndTexOrder(u32 param_0, J2DIndTexOrder param_1) {
    mIndTexOrder[param_0] = param_1;
}

/* 802F1BCC-802F1BE0 2EC50C 0014+00 1/0 0/0 0/0 .text getIndTexOrder__15J2DIndBlockFullFUl */
J2DIndTexOrder* J2DIndBlockFull::getIndTexOrder(u32 param_0) {
    return &mIndTexOrder[param_0];
}

/* 802F1BE0-802F1C38 2EC520 0058+00 1/0 0/0 0/0 .text
 * setIndTexMtx__15J2DIndBlockFullFUl12J2DIndTexMtx             */
void J2DIndBlockFull::setIndTexMtx(u32 param_0, J2DIndTexMtx param_1) {
    mIndTexMtx[param_0] = param_1;
}

/* 802F1C38-802F1C4C 2EC578 0014+00 1/0 0/0 0/0 .text            getIndTexMtx__15J2DIndBlockFullFUl
 */
J2DIndTexMtx* J2DIndBlockFull::getIndTexMtx(u32 param_0) {
    return &mIndTexMtx[param_0];
}

/* 802F1C4C-802F1C68 2EC58C 001C+00 1/0 0/0 0/0 .text
 * setIndTexCoordScale__15J2DIndBlockFullFUl19J2DIndTexCoordScale */
void J2DIndBlockFull::setIndTexCoordScale(u32 param_0, J2DIndTexCoordScale param_1) {
    mTexCoordScale[param_0] = param_1;
}

/* 802F1C68-802F1C7C 2EC5A8 0014+00 1/0 0/0 0/0 .text getIndTexCoordScale__15J2DIndBlockFullFUl */
J2DIndTexCoordScale* J2DIndBlockFull::getIndTexCoordScale(u32 param_0) {
    return &mTexCoordScale[param_0];
}

/* 802F1C7C-802F1D18 2EC5BC 009C+00 1/0 0/0 0/0 .text            __dt__15J2DIndBlockFullFv */
J2DIndBlockFull::~J2DIndBlockFull() {}

/* 802F1D18-802F1D24 2EC658 000C+00 1/0 0/0 0/0 .text            getType__13J2DTevBlock16Fv */
u32 J2DTevBlock16::getType() {
    return 'TV16';
}

/* 802F1D24-802F1D2C 2EC664 0008+00 1/0 0/0 0/0 .text            getMaxStage__13J2DTevBlock16Fv */
u8 J2DTevBlock16::getMaxStage() {
    return 16;
}

/* 802F1D2C-802F1D3C 2EC66C 0010+00 1/0 0/0 0/0 .text            setTexNo__13J2DTevBlock16FUlUs */
void J2DTevBlock16::setTexNo(u32 index, u16 texNo) {
    mTexNo[index] = texNo;
}

/* 802F1D3C-802F1D4C 2EC67C 0010+00 1/0 0/0 0/0 .text            getTexNo__13J2DTevBlock16CFUl */
u32 J2DTevBlock16::getTexNo(u32 index) const {
    return mTexNo[index];
}

/* 802F1D4C-802F1D54 -00001 0008+00 0/0 0/0 0/0 .text            setFontNo__13J2DTevBlock16FUs */
void J2DTevBlock16::setFontNo(u16 fontNo) {
    mFontNo = fontNo;
}

/* 802F1D54-802F1D5C 2EC694 0008+00 1/0 0/0 0/0 .text            getFontNo__13J2DTevBlock16CFv */
u16 J2DTevBlock16::getFontNo() const {
    return mFontNo;
}

/* 802F1D5C-802F1D80 2EC69C 0024+00 1/0 0/0 0/0 .text setTevOrder__13J2DTevBlock16FUl11J2DTevOrder
 */
void J2DTevBlock16::setTevOrder(u32 index, J2DTevOrder order) {
    mTevOrder[index].mTevOrderInfo.mTexCoord = order.mTevOrderInfo.mTexCoord;
    mTevOrder[index].mTevOrderInfo.mTexMap = order.mTevOrderInfo.mTexMap;
    mTevOrder[index].mTevOrderInfo.mColor = order.mTevOrderInfo.mColor;
}

/* 802F1D80-802F1D94 2EC6C0 0014+00 1/0 0/0 0/0 .text            getTevOrder__13J2DTevBlock16FUl */
J2DTevOrder* J2DTevBlock16::getTevOrder(u32 index) {
    return &mTevOrder[index];
}

/* 802F1D94-802F1DC0 2EC6D4 002C+00 1/0 0/0 0/0 .text
 * setTevColor__13J2DTevBlock16FUl13J2DGXColorS10               */
void J2DTevBlock16::setTevColor(u32 index, J2DGXColorS10 color) {
    mTevColor[index] = color;
}

/* 802F1DC0-802F1DD4 2EC700 0014+00 1/0 0/0 0/0 .text            getTevColor__13J2DTevBlock16FUl */
J2DGXColorS10* J2DTevBlock16::getTevColor(u32 index) {
    return &mTevColor[index];
}

/* 802F1DD4-802F1E00 2EC714 002C+00 1/0 0/0 0/0 .text
 * setTevKColor__13J2DTevBlock16FUlQ28JUtility6TColor           */
void J2DTevBlock16::setTevKColor(u32 index, JUtility::TColor color) {
    mTevKColor[index].r = color.r;
    mTevKColor[index].g = color.g;
    mTevKColor[index].b = color.b;
    mTevKColor[index].a = color.a;
}

/* 802F1E00-802F1E14 2EC740 0014+00 1/0 0/0 0/0 .text            getTevKColor__13J2DTevBlock16FUl */
JUtility::TColor* J2DTevBlock16::getTevKColor(u32 index) {
    return &mTevKColor[index];
}

/* 802F1E14-802F1E20 2EC754 000C+00 1/0 0/0 0/0 .text setTevKColorSel__13J2DTevBlock16FUlUc */
void J2DTevBlock16::setTevKColorSel(u32 index, u8 sel) {
    mTevKColorSel[index] = sel;
}

/* 802F1E20-802F1E2C 2EC760 000C+00 1/0 0/0 0/0 .text            getTevKColorSel__13J2DTevBlock16FUl
 */
u8 J2DTevBlock16::getTevKColorSel(u32 index) {
    return mTevKColorSel[index];
}

/* 802F1E2C-802F1E38 2EC76C 000C+00 1/0 0/0 0/0 .text setTevKAlphaSel__13J2DTevBlock16FUlUc */
void J2DTevBlock16::setTevKAlphaSel(u32 index, u8 sel) {
    mTevKAlphaSel[index] = sel;
}

/* 802F1E38-802F1E44 2EC778 000C+00 1/0 0/0 0/0 .text            getTevKAlphaSel__13J2DTevBlock16FUl
 */
u8 J2DTevBlock16::getTevKAlphaSel(u32 index) {
    return mTevKAlphaSel[index];
}

/* 802F1E44-802F1E4C -00001 0008+00 0/0 0/0 0/0 .text            setTevStageNum__13J2DTevBlock16FUc
 */
void J2DTevBlock16::setTevStageNum(u8 stageNum) {
    mTevStageNum = stageNum;
}

/* 802F1E4C-802F1E54 2EC78C 0008+00 1/0 0/0 0/0 .text            getTevStageNum__13J2DTevBlock16CFv
 */
u8 J2DTevBlock16::getTevStageNum() const {
    return mTevStageNum;
}

/* 802F1E54-802F1E90 2EC794 003C+00 1/0 0/0 0/0 .text setTevStage__13J2DTevBlock16FUl11J2DTevStage
 */
void J2DTevBlock16::setTevStage(u32 index, J2DTevStage stage) {
    mTevStage[index] = stage;
}

/* 802F1E90-802F1EA4 2EC7D0 0014+00 1/0 0/0 0/0 .text            getTevStage__13J2DTevBlock16FUl */
J2DTevStage* J2DTevBlock16::getTevStage(u32 index) {
    return &mTevStage[index];
}

/* 802F1EA4-802F1EDC 2EC7E4 0038+00 1/0 0/0 0/0 .text
 * setTevSwapModeInfo__13J2DTevBlock16FUl18J2DTevSwapModeInfo   */
void J2DTevBlock16::setTevSwapModeInfo(u32 index, J2DTevSwapModeInfo info) {
    mTevStage[index].setTevSwapModeInfo(info);
}

/* 802F1EDC-802F1EEC 2EC81C 0010+00 1/0 0/0 0/0 .text
 * setTevSwapModeTable__13J2DTevBlock16FUl19J2DTevSwapModeTable */
void J2DTevBlock16::setTevSwapModeTable(u32 index, J2DTevSwapModeTable table) {
    mTevSwapModeTable[index] = table;
}

/* 802F1EEC-802F1EFC 2EC82C 0010+00 1/0 0/0 0/0 .text getTevSwapModeTable__13J2DTevBlock16FUl */
J2DTevSwapModeTable* J2DTevBlock16::getTevSwapModeTable(u32 index) {
    return &mTevSwapModeTable[index];
}

/* 802F1EFC-802F1F10 2EC83C 0014+00 1/0 0/0 0/0 .text
 * setIndTevStage__13J2DTevBlock16FUl14J2DIndTevStage           */
void J2DTevBlock16::setIndTevStage(u32 index, J2DIndTevStage stage) {
    mIndTevStage[index] = stage;
}

/* 802F1F10-802F1F24 2EC850 0014+00 1/0 0/0 0/0 .text            getIndTevStage__13J2DTevBlock16FUl
 */
J2DIndTevStage* J2DTevBlock16::getIndTevStage(u32 index) {
    return &mIndTevStage[index];
}

/* 802F1F24-802F1F54 2EC864 0030+00 1/0 0/0 0/0 .text insertTexture__13J2DTevBlock16FUlPC7ResTIMG
 */
bool J2DTevBlock16::insertTexture(u32 index, ResTIMG const* p_timg) {
    return insertTexture(index, p_timg, NULL);
}

/* 802F1F54-802F1F74 2EC894 0020+00 1/0 0/0 0/0 .text            getTexture__13J2DTevBlock16FUl */
JUTTexture* J2DTevBlock16::getTexture(u32 index) {
    if (index >= 8) {
        return NULL;
    }

    return mTexture[index];
}

/* 802F1F74-802F1F94 2EC8B4 0020+00 1/0 0/0 0/0 .text            getPalette__13J2DTevBlock16FUl */
JUTPalette* J2DTevBlock16::getPalette(u32 index) {
    if (index >= 8) {
        return NULL;
    }

    return mPalette[index];
}

/* 802F1F94-802F1F9C 2EC8D4 0008+00 1/0 0/0 0/0 .text            getFont__13J2DTevBlock16Fv */
JUTFont* J2DTevBlock16::getFont() {
    return mFont;
}

/* 802F1F9C-802F1FAC 2EC8DC 0010+00 1/0 0/0 0/0 .text            setUndeleteFlag__13J2DTevBlock16FUc
 */
void J2DTevBlock16::setUndeleteFlag(u8 flag) {
    mUndeleteFlag &= flag;
}

/* 802F1FAC-802F1FB8 2EC8EC 000C+00 1/0 0/0 0/0 .text setFontUndeleteFlag__13J2DTevBlock16Fv */
void J2DTevBlock16::setFontUndeleteFlag() {
    mFontUndeleteFlag = false;
}

/* 802F1FB8-802F1FC4 2EC8F8 000C+00 1/0 0/0 0/0 .text            getType__12J2DTevBlock8Fv */
u32 J2DTevBlock8::getType() {
    return 'TVB8';
}

/* 802F1FC4-802F1FCC 2EC904 0008+00 1/0 0/0 0/0 .text            getMaxStage__12J2DTevBlock8Fv */
u8 J2DTevBlock8::getMaxStage() {
    return 8;
}

/* 802F1FCC-802F1FDC 2EC90C 0010+00 1/0 0/0 0/0 .text            setTexNo__12J2DTevBlock8FUlUs */
void J2DTevBlock8::setTexNo(u32 index, u16 texNo) {
    mTexNo[index] = texNo;
}

/* 802F1FDC-802F1FEC 2EC91C 0010+00 1/0 0/0 0/0 .text            getTexNo__12J2DTevBlock8CFUl */
u32 J2DTevBlock8::getTexNo(u32 index) const {
    return mTexNo[index];
}

/* 802F1FEC-802F1FF4 -00001 0008+00 0/0 0/0 0/0 .text            setFontNo__12J2DTevBlock8FUs */
void J2DTevBlock8::setFontNo(u16 fontNo) {
    mFontNo = fontNo;
}

/* 802F1FF4-802F1FFC 2EC934 0008+00 1/0 0/0 0/0 .text            getFontNo__12J2DTevBlock8CFv */
u16 J2DTevBlock8::getFontNo() const {
    return mFontNo;
}

/* 802F1FFC-802F2020 2EC93C 0024+00 1/0 0/0 0/0 .text setTevOrder__12J2DTevBlock8FUl11J2DTevOrder
 */
void J2DTevBlock8::setTevOrder(u32 index, J2DTevOrder order) {
    mTevOrder[index].mTevOrderInfo.mTexCoord = order.mTevOrderInfo.mTexCoord;
    mTevOrder[index].mTevOrderInfo.mTexMap = order.mTevOrderInfo.mTexMap;
    mTevOrder[index].mTevOrderInfo.mColor = order.mTevOrderInfo.mColor;
}

/* 802F2020-802F2034 2EC960 0014+00 1/0 0/0 0/0 .text            getTevOrder__12J2DTevBlock8FUl */
J2DTevOrder* J2DTevBlock8::getTevOrder(u32 index) {
    return &mTevOrder[index];
}

/* 802F2034-802F2060 2EC974 002C+00 1/0 0/0 0/0 .text
 * setTevColor__12J2DTevBlock8FUl13J2DGXColorS10                */
void J2DTevBlock8::setTevColor(u32 index, J2DGXColorS10 color) {
    mTevColor[index] = color;
}

/* 802F2060-802F2074 2EC9A0 0014+00 1/0 0/0 0/0 .text            getTevColor__12J2DTevBlock8FUl */
J2DGXColorS10* J2DTevBlock8::getTevColor(u32 index) {
    return &mTevColor[index];
}

/* 802F2074-802F20A0 2EC9B4 002C+00 1/0 0/0 0/0 .text
 * setTevKColor__12J2DTevBlock8FUlQ28JUtility6TColor            */
void J2DTevBlock8::setTevKColor(u32 index, JUtility::TColor color) {
    mTevKColor[index].r = color.r;
    mTevKColor[index].g = color.g;
    mTevKColor[index].b = color.b;
    mTevKColor[index].a = color.a;
}

/* 802F20A0-802F20B4 2EC9E0 0014+00 1/0 0/0 0/0 .text            getTevKColor__12J2DTevBlock8FUl */
JUtility::TColor* J2DTevBlock8::getTevKColor(u32 index) {
    return &mTevKColor[index];
}

/* 802F20B4-802F20C0 2EC9F4 000C+00 1/0 0/0 0/0 .text setTevKColorSel__12J2DTevBlock8FUlUc */
void J2DTevBlock8::setTevKColorSel(u32 index, u8 sel) {
    mTevKColorSel[index] = sel;
}

/* 802F20C0-802F20CC 2ECA00 000C+00 1/0 0/0 0/0 .text            getTevKColorSel__12J2DTevBlock8FUl
 */
u8 J2DTevBlock8::getTevKColorSel(u32 index) {
    return mTevKColorSel[index];
}

/* 802F20CC-802F20D8 2ECA0C 000C+00 1/0 0/0 0/0 .text setTevKAlphaSel__12J2DTevBlock8FUlUc */
void J2DTevBlock8::setTevKAlphaSel(u32 index, u8 sel) {
    mTevKAlphaSel[index] = sel;
}

/* 802F20D8-802F20E4 2ECA18 000C+00 1/0 0/0 0/0 .text            getTevKAlphaSel__12J2DTevBlock8FUl
 */
u8 J2DTevBlock8::getTevKAlphaSel(u32 index) {
    return mTevKAlphaSel[index];
}

/* 802F20E4-802F20EC -00001 0008+00 0/0 0/0 0/0 .text            setTevStageNum__12J2DTevBlock8FUc
 */
void J2DTevBlock8::setTevStageNum(u8 stageNum) {
    mTevStageNum = stageNum;
}

/* 802F20EC-802F20F4 2ECA2C 0008+00 1/0 0/0 0/0 .text            getTevStageNum__12J2DTevBlock8CFv
 */
u8 J2DTevBlock8::getTevStageNum() const {
    return mTevStageNum;
}

/* 802F20F4-802F2130 2ECA34 003C+00 1/0 0/0 0/0 .text setTevStage__12J2DTevBlock8FUl11J2DTevStage
 */
void J2DTevBlock8::setTevStage(u32 index, J2DTevStage stage) {
    mTevStage[index] = stage;
}

/* 802F2130-802F2144 2ECA70 0014+00 1/0 0/0 0/0 .text            getTevStage__12J2DTevBlock8FUl */
J2DTevStage* J2DTevBlock8::getTevStage(u32 index) {
    return &mTevStage[index];
}

/* 802F2144-802F217C 2ECA84 0038+00 1/0 0/0 0/0 .text
 * setTevSwapModeInfo__12J2DTevBlock8FUl18J2DTevSwapModeInfo    */
void J2DTevBlock8::setTevSwapModeInfo(u32 index, J2DTevSwapModeInfo info) {
    mTevStage[index].setTevSwapModeInfo(info);
}

/* 802F217C-802F218C 2ECABC 0010+00 1/0 0/0 0/0 .text
 * setTevSwapModeTable__12J2DTevBlock8FUl19J2DTevSwapModeTable  */
void J2DTevBlock8::setTevSwapModeTable(u32 index, J2DTevSwapModeTable table) {
    mTevSwapModeTable[index] = table;
}

/* 802F218C-802F219C 2ECACC 0010+00 1/0 0/0 0/0 .text getTevSwapModeTable__12J2DTevBlock8FUl */
J2DTevSwapModeTable* J2DTevBlock8::getTevSwapModeTable(u32 index) {
    return &mTevSwapModeTable[index];
}

/* 802F219C-802F21B0 2ECADC 0014+00 1/0 0/0 0/0 .text
 * setIndTevStage__12J2DTevBlock8FUl14J2DIndTevStage            */
void J2DTevBlock8::setIndTevStage(u32 index, J2DIndTevStage stage) {
    mIndTevStage[index] = stage;
}

/* 802F21B0-802F21C4 2ECAF0 0014+00 1/0 0/0 0/0 .text            getIndTevStage__12J2DTevBlock8FUl
 */
J2DIndTevStage* J2DTevBlock8::getIndTevStage(u32 index) {
    return &mIndTevStage[index];
}

/* 802F21C4-802F21F4 2ECB04 0030+00 1/0 0/0 0/0 .text insertTexture__12J2DTevBlock8FUlPC7ResTIMG
 */
bool J2DTevBlock8::insertTexture(u32 index, ResTIMG const* p_timg) {
    return insertTexture(index, p_timg, NULL);
}

/* 802F21F4-802F2214 2ECB34 0020+00 1/0 0/0 0/0 .text            getTexture__12J2DTevBlock8FUl */
JUTTexture* J2DTevBlock8::getTexture(u32 index) {
    if (index >= 8) {
        return NULL;
    }

    return mTexture[index];
}

/* 802F2214-802F2234 2ECB54 0020+00 1/0 0/0 0/0 .text            getPalette__12J2DTevBlock8FUl */
JUTPalette* J2DTevBlock8::getPalette(u32 index) {
    if (index >= 8) {
        return NULL;
    }

    return mPalette[index];
}

/* 802F2234-802F223C 2ECB74 0008+00 1/0 0/0 0/0 .text            getFont__12J2DTevBlock8Fv */
JUTFont* J2DTevBlock8::getFont() {
    return mFont;
}

/* 802F223C-802F224C 2ECB7C 0010+00 1/0 0/0 0/0 .text            setUndeleteFlag__12J2DTevBlock8FUc
 */
void J2DTevBlock8::setUndeleteFlag(u8 flag) {
    mUndeleteFlag &= flag;
}

/* 802F224C-802F2258 2ECB8C 000C+00 1/0 0/0 0/0 .text setFontUndeleteFlag__12J2DTevBlock8Fv */
void J2DTevBlock8::setFontUndeleteFlag() {
    mFontUndeleteFlag = false;
}

/* 802F2258-802F2264 2ECB98 000C+00 1/0 0/0 0/0 .text            getType__12J2DTevBlock4Fv */
u32 J2DTevBlock4::getType() {
    return 'TVB4';
}

/* 802F2264-802F226C 2ECBA4 0008+00 1/0 0/0 0/0 .text            getMaxStage__12J2DTevBlock4Fv */
u8 J2DTevBlock4::getMaxStage() {
    return 4;
}

/* 802F226C-802F227C 2ECBAC 0010+00 1/0 0/0 0/0 .text            setTexNo__12J2DTevBlock4FUlUs */
void J2DTevBlock4::setTexNo(u32 index, u16 texNo) {
    mTexNo[index] = texNo;
}

/* 802F227C-802F228C 2ECBBC 0010+00 1/0 0/0 0/0 .text            getTexNo__12J2DTevBlock4CFUl */
u32 J2DTevBlock4::getTexNo(u32 index) const {
    return mTexNo[index];
}

/* 802F228C-802F2294 -00001 0008+00 0/0 0/0 0/0 .text            setFontNo__12J2DTevBlock4FUs */
void J2DTevBlock4::setFontNo(u16 fontNo) {
    mFontNo = fontNo;
}

/* 802F2294-802F229C 2ECBD4 0008+00 1/0 0/0 0/0 .text            getFontNo__12J2DTevBlock4CFv */
u16 J2DTevBlock4::getFontNo() const {
    return mFontNo;
}

/* 802F229C-802F22C0 2ECBDC 0024+00 1/0 0/0 0/0 .text setTevOrder__12J2DTevBlock4FUl11J2DTevOrder
 */
void J2DTevBlock4::setTevOrder(u32 index, J2DTevOrder order) {
    mTevOrder[index].mTevOrderInfo.mTexCoord = order.mTevOrderInfo.mTexCoord;
    mTevOrder[index].mTevOrderInfo.mTexMap = order.mTevOrderInfo.mTexMap;
    mTevOrder[index].mTevOrderInfo.mColor = order.mTevOrderInfo.mColor;
}

/* 802F22C0-802F22D4 2ECC00 0014+00 1/0 0/0 0/0 .text            getTevOrder__12J2DTevBlock4FUl */
J2DTevOrder* J2DTevBlock4::getTevOrder(u32 index) {
    return &mTevOrder[index];
}

/* 802F22D4-802F2300 2ECC14 002C+00 1/0 0/0 0/0 .text
 * setTevColor__12J2DTevBlock4FUl13J2DGXColorS10                */
void J2DTevBlock4::setTevColor(u32 index, J2DGXColorS10 color) {
    mTevColor[index] = color;
}

/* 802F2300-802F2314 2ECC40 0014+00 1/0 0/0 0/0 .text            getTevColor__12J2DTevBlock4FUl */
J2DGXColorS10* J2DTevBlock4::getTevColor(u32 index) {
    return &mTevColor[index];
}

/* 802F2314-802F2340 2ECC54 002C+00 1/0 0/0 0/0 .text
 * setTevKColor__12J2DTevBlock4FUlQ28JUtility6TColor            */
void J2DTevBlock4::setTevKColor(u32 index, JUtility::TColor color) {
    mTevKColor[index].r = color.r;
    mTevKColor[index].g = color.g;
    mTevKColor[index].b = color.b;
    mTevKColor[index].a = color.a;
}

/* 802F2340-802F2354 2ECC80 0014+00 1/0 0/0 0/0 .text            getTevKColor__12J2DTevBlock4FUl */
JUtility::TColor* J2DTevBlock4::getTevKColor(u32 index) {
    return &mTevKColor[index];
}

/* 802F2354-802F2360 2ECC94 000C+00 1/0 0/0 0/0 .text setTevKColorSel__12J2DTevBlock4FUlUc */
void J2DTevBlock4::setTevKColorSel(u32 index, u8 sel) {
    mTevKColorSel[index] = sel;
}

/* 802F2360-802F236C 2ECCA0 000C+00 1/0 0/0 0/0 .text            getTevKColorSel__12J2DTevBlock4FUl
 */
u8 J2DTevBlock4::getTevKColorSel(u32 index) {
    return mTevKColorSel[index];
}

/* 802F236C-802F2378 2ECCAC 000C+00 1/0 0/0 0/0 .text setTevKAlphaSel__12J2DTevBlock4FUlUc */
void J2DTevBlock4::setTevKAlphaSel(u32 index, u8 sel) {
    mTevKAlphaSel[index] = sel;
}

/* 802F2378-802F2384 2ECCB8 000C+00 1/0 0/0 0/0 .text            getTevKAlphaSel__12J2DTevBlock4FUl
 */
u8 J2DTevBlock4::getTevKAlphaSel(u32 index) {
    return mTevKAlphaSel[index];
}

/* 802F2384-802F238C -00001 0008+00 0/0 0/0 0/0 .text            setTevStageNum__12J2DTevBlock4FUc
 */
void J2DTevBlock4::setTevStageNum(u8 stageNum) {
    mTevStageNum = stageNum;
}

/* 802F238C-802F2394 2ECCCC 0008+00 1/0 0/0 0/0 .text            getTevStageNum__12J2DTevBlock4CFv
 */
u8 J2DTevBlock4::getTevStageNum() const {
    return mTevStageNum;
}

/* 802F2394-802F23D0 2ECCD4 003C+00 1/0 0/0 0/0 .text setTevStage__12J2DTevBlock4FUl11J2DTevStage
 */
void J2DTevBlock4::setTevStage(u32 index, J2DTevStage stage) {
    mTevStage[index] = stage;
}

/* 802F23D0-802F23E4 2ECD10 0014+00 1/0 0/0 0/0 .text            getTevStage__12J2DTevBlock4FUl */
J2DTevStage* J2DTevBlock4::getTevStage(u32 index) {
    return &mTevStage[index];
}

/* 802F23E4-802F241C 2ECD24 0038+00 1/0 0/0 0/0 .text
 * setTevSwapModeInfo__12J2DTevBlock4FUl18J2DTevSwapModeInfo    */
void J2DTevBlock4::setTevSwapModeInfo(u32 index, J2DTevSwapModeInfo info) {
    mTevStage[index].setTevSwapModeInfo(info);
}

/* 802F241C-802F242C 2ECD5C 0010+00 1/0 0/0 0/0 .text
 * setTevSwapModeTable__12J2DTevBlock4FUl19J2DTevSwapModeTable  */
void J2DTevBlock4::setTevSwapModeTable(u32 index, J2DTevSwapModeTable table) {
    mTevSwapModeTable[index] = table;
}

/* 802F242C-802F243C 2ECD6C 0010+00 1/0 0/0 0/0 .text getTevSwapModeTable__12J2DTevBlock4FUl */
J2DTevSwapModeTable* J2DTevBlock4::getTevSwapModeTable(u32 index) {
    return &mTevSwapModeTable[index];
}

/* 802F243C-802F2450 2ECD7C 0014+00 1/0 0/0 0/0 .text
 * setIndTevStage__12J2DTevBlock4FUl14J2DIndTevStage            */
void J2DTevBlock4::setIndTevStage(u32 index, J2DIndTevStage stage) {
    mIndTevStage[index] = stage;
}

/* 802F2450-802F2464 2ECD90 0014+00 1/0 0/0 0/0 .text            getIndTevStage__12J2DTevBlock4FUl
 */
J2DIndTevStage* J2DTevBlock4::getIndTevStage(u32 index) {
    return &mIndTevStage[index];
}

/* 802F2464-802F2494 2ECDA4 0030+00 1/0 0/0 0/0 .text insertTexture__12J2DTevBlock4FUlPC7ResTIMG
 */
bool J2DTevBlock4::insertTexture(u32 index, ResTIMG const* p_timg) {
    return insertTexture(index, p_timg, NULL);
}

/* 802F2494-802F24B4 2ECDD4 0020+00 1/0 0/0 0/0 .text            getTexture__12J2DTevBlock4FUl */
JUTTexture* J2DTevBlock4::getTexture(u32 index) {
    if (index >= 4) {
        return NULL;
    }

    return mTexture[index];
}

/* 802F24B4-802F24D4 2ECDF4 0020+00 1/0 0/0 0/0 .text            getPalette__12J2DTevBlock4FUl */
JUTPalette* J2DTevBlock4::getPalette(u32 index) {
    if (index >= 4) {
        return NULL;
    }

    return mPalette[index];
}

/* 802F24D4-802F24DC 2ECE14 0008+00 1/0 0/0 0/0 .text            getFont__12J2DTevBlock4Fv */
JUTFont* J2DTevBlock4::getFont() {
    return mFont;
}

/* 802F24DC-802F24EC 2ECE1C 0010+00 1/0 0/0 0/0 .text            setUndeleteFlag__12J2DTevBlock4FUc
 */
void J2DTevBlock4::setUndeleteFlag(u8 flag) {
    mUndeleteFlag &= flag;
}

/* 802F24EC-802F24FC 2ECE2C 0010+00 1/0 0/0 0/0 .text setFontUndeleteFlag__12J2DTevBlock4Fv */
void J2DTevBlock4::setFontUndeleteFlag() {
    mUndeleteFlag &= 0x7F;
}

/* 802F24FC-802F2508 2ECE3C 000C+00 1/0 0/0 0/0 .text            getType__12J2DTevBlock2Fv */
u32 J2DTevBlock2::getType() {
    return 'TVB2';
}

/* 802F2508-802F2510 2ECE48 0008+00 1/0 0/0 0/0 .text            getMaxStage__12J2DTevBlock2Fv */
u8 J2DTevBlock2::getMaxStage() {
    return 2;
}

/* 802F2510-802F2520 2ECE50 0010+00 1/0 0/0 0/0 .text            setTexNo__12J2DTevBlock2FUlUs */
void J2DTevBlock2::setTexNo(u32 index, u16 texNo) {
    mTexNo[index] = texNo;
}

/* 802F2520-802F2530 2ECE60 0010+00 1/0 0/0 0/0 .text            getTexNo__12J2DTevBlock2CFUl */
u32 J2DTevBlock2::getTexNo(u32 index) const {
    return mTexNo[index];
}

/* 802F2530-802F2538 -00001 0008+00 0/0 0/0 0/0 .text            setFontNo__12J2DTevBlock2FUs */
void J2DTevBlock2::setFontNo(u16 fontNo) {
    mFontNo = fontNo;
}

/* 802F2538-802F2540 2ECE78 0008+00 1/0 0/0 0/0 .text            getFontNo__12J2DTevBlock2CFv */
u16 J2DTevBlock2::getFontNo() const {
    return mFontNo;
}

/* 802F2540-802F2564 2ECE80 0024+00 1/0 0/0 0/0 .text setTevOrder__12J2DTevBlock2FUl11J2DTevOrder
 */
void J2DTevBlock2::setTevOrder(u32 index, J2DTevOrder order) {
    mTevOrder[index].mTevOrderInfo.mTexCoord = order.mTevOrderInfo.mTexCoord;
    mTevOrder[index].mTevOrderInfo.mTexMap = order.mTevOrderInfo.mTexMap;
    mTevOrder[index].mTevOrderInfo.mColor = order.mTevOrderInfo.mColor;
}

/* 802F2564-802F2578 2ECEA4 0014+00 1/0 0/0 0/0 .text            getTevOrder__12J2DTevBlock2FUl */
J2DTevOrder* J2DTevBlock2::getTevOrder(u32 index) {
    return &mTevOrder[index];
}

/* 802F2578-802F25A4 2ECEB8 002C+00 1/0 0/0 0/0 .text
 * setTevColor__12J2DTevBlock2FUl13J2DGXColorS10                */
void J2DTevBlock2::setTevColor(u32 index, J2DGXColorS10 color) {
    mTevColor[index] = color;
}

/* 802F25A4-802F25B8 2ECEE4 0014+00 1/0 0/0 0/0 .text            getTevColor__12J2DTevBlock2FUl */
J2DGXColorS10* J2DTevBlock2::getTevColor(u32 index) {
    return &mTevColor[index];
}

/* 802F25B8-802F25E4 2ECEF8 002C+00 1/0 0/0 0/0 .text
 * setTevKColor__12J2DTevBlock2FUlQ28JUtility6TColor            */
void J2DTevBlock2::setTevKColor(u32 index, JUtility::TColor color) {
    mTevKColor[index].r = color.r;
    mTevKColor[index].g = color.g;
    mTevKColor[index].b = color.b;
    mTevKColor[index].a = color.a;
}

/* 802F25E4-802F25F8 2ECF24 0014+00 1/0 0/0 0/0 .text            getTevKColor__12J2DTevBlock2FUl */
JUtility::TColor* J2DTevBlock2::getTevKColor(u32 index) {
    return &mTevKColor[index];
}

/* 802F25F8-802F2604 2ECF38 000C+00 1/0 0/0 0/0 .text setTevKColorSel__12J2DTevBlock2FUlUc */
void J2DTevBlock2::setTevKColorSel(u32 index, u8 sel) {
    mTevKColorSel[index] = sel;
}

/* 802F2604-802F2610 2ECF44 000C+00 1/0 0/0 0/0 .text            getTevKColorSel__12J2DTevBlock2FUl
 */
u8 J2DTevBlock2::getTevKColorSel(u32 index) {
    return mTevKColorSel[index];
}

/* 802F2610-802F261C 2ECF50 000C+00 1/0 0/0 0/0 .text setTevKAlphaSel__12J2DTevBlock2FUlUc */
void J2DTevBlock2::setTevKAlphaSel(u32 index, u8 sel) {
    mTevKAlphaSel[index] = sel;
}

/* 802F261C-802F2628 2ECF5C 000C+00 1/0 0/0 0/0 .text            getTevKAlphaSel__12J2DTevBlock2FUl
 */
u8 J2DTevBlock2::getTevKAlphaSel(u32 index) {
    return mTevKAlphaSel[index];
}

/* 802F2628-802F2630 -00001 0008+00 0/0 0/0 0/0 .text            setTevStageNum__12J2DTevBlock2FUc
 */
void J2DTevBlock2::setTevStageNum(u8 stageNum) {
    mTevStageNum = stageNum;
}

/* 802F2630-802F2638 2ECF70 0008+00 1/0 0/0 0/0 .text            getTevStageNum__12J2DTevBlock2CFv
 */
u8 J2DTevBlock2::getTevStageNum() const {
    return mTevStageNum;
}

/* 802F2638-802F2674 2ECF78 003C+00 1/0 0/0 0/0 .text setTevStage__12J2DTevBlock2FUl11J2DTevStage
 */
void J2DTevBlock2::setTevStage(u32 index, J2DTevStage stage) {
    mTevStage[index] = stage;
}

/* 802F2674-802F2688 2ECFB4 0014+00 1/0 0/0 0/0 .text            getTevStage__12J2DTevBlock2FUl */
J2DTevStage* J2DTevBlock2::getTevStage(u32 index) {
    return &mTevStage[index];
}

/* 802F2688-802F26C0 2ECFC8 0038+00 1/0 0/0 0/0 .text
 * setTevSwapModeInfo__12J2DTevBlock2FUl18J2DTevSwapModeInfo    */
void J2DTevBlock2::setTevSwapModeInfo(u32 index, J2DTevSwapModeInfo info) {
    mTevStage[index].setTevSwapModeInfo(info);
}

/* 802F26C0-802F26D0 2ED000 0010+00 1/0 0/0 0/0 .text
 * setTevSwapModeTable__12J2DTevBlock2FUl19J2DTevSwapModeTable  */
void J2DTevBlock2::setTevSwapModeTable(u32 index, J2DTevSwapModeTable table) {
    mTevSwapModeTable[index] = table;
}

/* 802F26D0-802F26E0 2ED010 0010+00 1/0 0/0 0/0 .text getTevSwapModeTable__12J2DTevBlock2FUl */
J2DTevSwapModeTable* J2DTevBlock2::getTevSwapModeTable(u32 index) {
    return &mTevSwapModeTable[index];
}

/* 802F26E0-802F26F4 2ED020 0014+00 1/0 0/0 0/0 .text
 * setIndTevStage__12J2DTevBlock2FUl14J2DIndTevStage            */
void J2DTevBlock2::setIndTevStage(u32 index, J2DIndTevStage stage) {
    mIndTevStage[index] = stage;
}

/* 802F26F4-802F2708 2ED034 0014+00 1/0 0/0 0/0 .text            getIndTevStage__12J2DTevBlock2FUl
 */
J2DIndTevStage* J2DTevBlock2::getIndTevStage(u32 index) {
    return &mIndTevStage[index];
}

/* 802F2708-802F2738 2ED048 0030+00 1/0 0/0 0/0 .text insertTexture__12J2DTevBlock2FUlPC7ResTIMG
 */
bool J2DTevBlock2::insertTexture(u32 index, ResTIMG const* p_timg) {
    return insertTexture(index, p_timg, NULL);
}

/* 802F2738-802F2758 2ED078 0020+00 1/0 0/0 0/0 .text            getTexture__12J2DTevBlock2FUl */
JUTTexture* J2DTevBlock2::getTexture(u32 index) {
    if (index >= 2) {
        return NULL;
    }

    return mTexture[index];
}

/* 802F2758-802F2778 2ED098 0020+00 1/0 0/0 0/0 .text            getPalette__12J2DTevBlock2FUl */
JUTPalette* J2DTevBlock2::getPalette(u32 index) {
    if (index >= 2) {
        return NULL;
    }

    return mPalette[index];
}

/* 802F2778-802F2780 2ED0B8 0008+00 1/0 0/0 0/0 .text            getFont__12J2DTevBlock2Fv */
JUTFont* J2DTevBlock2::getFont() {
    return mFont;
}

/* 802F2780-802F2790 2ED0C0 0010+00 1/0 0/0 0/0 .text            setUndeleteFlag__12J2DTevBlock2FUc
 */
void J2DTevBlock2::setUndeleteFlag(u8 flag) {
    mUndeleteFlag &= flag;
}

/* 802F2790-802F27A0 2ED0D0 0010+00 1/0 0/0 0/0 .text setFontUndeleteFlag__12J2DTevBlock2Fv */
void J2DTevBlock2::setFontUndeleteFlag() {
    mUndeleteFlag &= 0x7F;
}

/* 802F27A0-802F27AC 2ED0E0 000C+00 1/0 0/0 0/0 .text            getType__12J2DTevBlock1Fv */
u32 J2DTevBlock1::getType() {
    return 'TVB1';
}

/* 802F27AC-802F27B4 2ED0EC 0008+00 1/0 0/0 0/0 .text            getMaxStage__12J2DTevBlock1Fv */
u8 J2DTevBlock1::getMaxStage() {
    return 1;
}

/* 802F27B4-802F27C4 2ED0F4 0010+00 1/0 0/0 0/0 .text            setTexNo__12J2DTevBlock1FUlUs */
void J2DTevBlock1::setTexNo(u32 index, u16 texNo) {
    mTexNo[index] = texNo;
}

/* 802F27C4-802F27D4 2ED104 0010+00 1/0 0/0 0/0 .text            getTexNo__12J2DTevBlock1CFUl */
u32 J2DTevBlock1::getTexNo(u32 index) const {
    return mTexNo[index];
}

/* 802F27D4-802F27DC -00001 0008+00 0/0 0/0 0/0 .text            setFontNo__12J2DTevBlock1FUs */
void J2DTevBlock1::setFontNo(u16 fontNo) {
    mFontNo = fontNo;
}

/* 802F27DC-802F27E4 2ED11C 0008+00 1/0 0/0 0/0 .text            getFontNo__12J2DTevBlock1CFv */
u16 J2DTevBlock1::getFontNo() const {
    return mFontNo;
}

/* 802F27E4-802F2808 2ED124 0024+00 1/0 0/0 0/0 .text setTevOrder__12J2DTevBlock1FUl11J2DTevOrder
 */
void J2DTevBlock1::setTevOrder(u32 index, J2DTevOrder order) {
    mTevOrder[index].mTevOrderInfo.mTexCoord = order.mTevOrderInfo.mTexCoord;
    mTevOrder[index].mTevOrderInfo.mTexMap = order.mTevOrderInfo.mTexMap;
    mTevOrder[index].mTevOrderInfo.mColor = order.mTevOrderInfo.mColor;
}

/* 802F2808-802F281C 2ED148 0014+00 1/0 0/0 0/0 .text            getTevOrder__12J2DTevBlock1FUl */
J2DTevOrder* J2DTevBlock1::getTevOrder(u32 index) {
    return &mTevOrder[index];
}

/* 802F281C-802F2848 2ED15C 002C+00 1/0 0/0 0/0 .text
 * setTevColor__12J2DTevBlock1FUl13J2DGXColorS10                */
void J2DTevBlock1::setTevColor(u32 index, J2DGXColorS10 color) {
    mTevColor[index] = color;
}

/* 802F2848-802F285C 2ED188 0014+00 1/0 0/0 0/0 .text            getTevColor__12J2DTevBlock1FUl */
J2DGXColorS10* J2DTevBlock1::getTevColor(u32 index) {
    return &mTevColor[index];
}

/* 802F285C-802F2888 2ED19C 002C+00 1/0 0/0 0/0 .text
 * setTevKColor__12J2DTevBlock1FUlQ28JUtility6TColor            */
void J2DTevBlock1::setTevKColor(u32 index, JUtility::TColor color) {
    mTevKColor[index].r = color.r;
    mTevKColor[index].g = color.g;
    mTevKColor[index].b = color.b;
    mTevKColor[index].a = color.a;
}

/* 802F2888-802F289C 2ED1C8 0014+00 1/0 0/0 0/0 .text            getTevKColor__12J2DTevBlock1FUl */
JUtility::TColor* J2DTevBlock1::getTevKColor(u32 index) {
    return &mTevKColor[index];
}

/* 802F289C-802F28A8 2ED1DC 000C+00 1/0 0/0 0/0 .text setTevKColorSel__12J2DTevBlock1FUlUc */
void J2DTevBlock1::setTevKColorSel(u32 index, u8 sel) {
    mTevKColorSel[index] = sel;
}

/* 802F28A8-802F28B4 2ED1E8 000C+00 1/0 0/0 0/0 .text            getTevKColorSel__12J2DTevBlock1FUl
 */
u8 J2DTevBlock1::getTevKColorSel(u32 index) {
    return mTevKColorSel[index];
}

/* 802F28B4-802F28C0 2ED1F4 000C+00 1/0 0/0 0/0 .text setTevKAlphaSel__12J2DTevBlock1FUlUc */
void J2DTevBlock1::setTevKAlphaSel(u32 index, u8 sel) {
    mTevKAlphaSel[index] = sel;
}

/* 802F28C0-802F28CC 2ED200 000C+00 1/0 0/0 0/0 .text            getTevKAlphaSel__12J2DTevBlock1FUl
 */
u8 J2DTevBlock1::getTevKAlphaSel(u32 index) {
    return mTevKAlphaSel[index];
}

/* 802F28CC-802F28D0 2ED20C 0004+00 1/0 0/0 0/0 .text            setTevStageNum__12J2DTevBlock1FUc
 */
void J2DTevBlock1::setTevStageNum(u8) {
    /* empty function */
}

/* 802F28D0-802F28D8 2ED210 0008+00 1/0 0/0 0/0 .text            getTevStageNum__12J2DTevBlock1CFv
 */
u8 J2DTevBlock1::getTevStageNum() const {
    return 1;
}

/* 802F28D8-802F2914 2ED218 003C+00 1/0 0/0 0/0 .text setTevStage__12J2DTevBlock1FUl11J2DTevStage
 */
void J2DTevBlock1::setTevStage(u32 index, J2DTevStage stage) {
    mTevStage[index] = stage;
}

/* 802F2914-802F2928 2ED254 0014+00 1/0 0/0 0/0 .text            getTevStage__12J2DTevBlock1FUl */
J2DTevStage* J2DTevBlock1::getTevStage(u32 index) {
    return &mTevStage[index];
}

/* 802F2928-802F2960 2ED268 0038+00 1/0 0/0 0/0 .text
 * setTevSwapModeInfo__12J2DTevBlock1FUl18J2DTevSwapModeInfo    */
void J2DTevBlock1::setTevSwapModeInfo(u32 index, J2DTevSwapModeInfo info) {
    mTevStage[index].setTevSwapModeInfo(info);
}

/* 802F2960-802F2970 2ED2A0 0010+00 1/0 0/0 0/0 .text
 * setTevSwapModeTable__12J2DTevBlock1FUl19J2DTevSwapModeTable  */
void J2DTevBlock1::setTevSwapModeTable(u32 index, J2DTevSwapModeTable table) {
    mTevSwapModeTable[index] = table;
}

/* 802F2970-802F2980 2ED2B0 0010+00 1/0 0/0 0/0 .text getTevSwapModeTable__12J2DTevBlock1FUl */
J2DTevSwapModeTable* J2DTevBlock1::getTevSwapModeTable(u32 index) {
    return &mTevSwapModeTable[index];
}

/* 802F2980-802F2994 2ED2C0 0014+00 1/0 0/0 0/0 .text
 * setIndTevStage__12J2DTevBlock1FUl14J2DIndTevStage            */
void J2DTevBlock1::setIndTevStage(u32 index, J2DIndTevStage stage) {
    mIndTevStage[index] = stage;
}

/* 802F2994-802F29A8 2ED2D4 0014+00 1/0 0/0 0/0 .text            getIndTevStage__12J2DTevBlock1FUl
 */
J2DIndTevStage* J2DTevBlock1::getIndTevStage(u32 index) {
    return &mIndTevStage[index];
}

/* 802F29A8-802F29D8 2ED2E8 0030+00 1/0 0/0 0/0 .text insertTexture__12J2DTevBlock1FUlPC7ResTIMG
 */
bool J2DTevBlock1::insertTexture(u32 index, ResTIMG const* p_timg) {
    return insertTexture(index, p_timg, NULL);
}

/* 802F29D8-802F29F8 2ED318 0020+00 1/0 0/0 0/0 .text            getTexture__12J2DTevBlock1FUl */
JUTTexture* J2DTevBlock1::getTexture(u32 index) {
    if (index >= 1) {
        return NULL;
    }

    return mTexture[index];
}

/* 802F29F8-802F2A18 2ED338 0020+00 1/0 0/0 0/0 .text            getPalette__12J2DTevBlock1FUl */
JUTPalette* J2DTevBlock1::getPalette(u32 index) {
    if (index >= 1) {
        return NULL;
    }

    return mPalette[index];
}

/* 802F2A18-802F2A20 2ED358 0008+00 1/0 0/0 0/0 .text            getFont__12J2DTevBlock1Fv */
JUTFont* J2DTevBlock1::getFont() {
    return mFont;
}

/* 802F2A20-802F2A30 2ED360 0010+00 1/0 0/0 0/0 .text            setUndeleteFlag__12J2DTevBlock1FUc
 */
void J2DTevBlock1::setUndeleteFlag(u8 flag) {
    mUndeleteFlag &= flag;
}

/* 802F2A30-802F2A40 2ED370 0010+00 1/0 0/0 0/0 .text setFontUndeleteFlag__12J2DTevBlock1Fv */
void J2DTevBlock1::setFontUndeleteFlag() {
    mUndeleteFlag &= 0x7F;
}

/* 802F2A40-802F2A44 2ED380 0004+00 1/0 0/0 0/0 .text            initialize__11J2DTevBlockFv */
void J2DTevBlock::initialize() {
    /* empty function */
}

/* 802F2A44-802F2A48 2ED384 0004+00 1/0 0/0 0/0 .text loadTexture__11J2DTevBlockF11_GXTexMapIDUl
 */
void J2DTevBlock::loadTexture(GXTexMapID, u32) {
    /* empty function */
}

/* 802F2A48-802F2A4C 2ED388 0004+00 1/0 0/0 0/0 .text            setFontNo__11J2DTevBlockFUs */
void J2DTevBlock::setFontNo(u16) {
    /* empty function */
}

/* 802F2A4C-802F2A50 2ED38C 0004+00 1/0 0/0 0/0 .text setTevOrder__11J2DTevBlockFUl11J2DTevOrder
 */
void J2DTevBlock::setTevOrder(u32, J2DTevOrder) {
    /* empty function */
}

/* 802F2A50-802F2A54 2ED390 0004+00 1/0 0/0 0/0 .text            setTevKColorSel__11J2DTevBlockFUlUc
 */
void J2DTevBlock::setTevKColorSel(u32, u8) {
    /* empty function */
}

/* 802F2A54-802F2A58 2ED394 0004+00 1/0 0/0 0/0 .text            setTevKAlphaSel__11J2DTevBlockFUlUc
 */
void J2DTevBlock::setTevKAlphaSel(u32, u8) {
    /* empty function */
}

/* 802F2A58-802F2A5C 2ED398 0004+00 1/0 0/0 0/0 .text            setTevStageNum__11J2DTevBlockFUc */
void J2DTevBlock::setTevStageNum(u8) {
    /* empty function */
}

/* 802F2A5C-802F2A60 2ED39C 0004+00 1/0 0/0 0/0 .text setTevStage__11J2DTevBlockFUl11J2DTevStage
 */
void J2DTevBlock::setTevStage(u32, J2DTevStage) {
    /* empty function */
}

/* 802F2A60-802F2A64 2ED3A0 0004+00 1/0 0/0 0/0 .text
 * setTevSwapModeInfo__11J2DTevBlockFUl18J2DTevSwapModeInfo     */
void J2DTevBlock::setTevSwapModeInfo(u32, J2DTevSwapModeInfo) {
    /* empty function */
}

/* 802F2A64-802F2A68 2ED3A4 0004+00 1/0 0/0 0/0 .text
 * setTevSwapModeTable__11J2DTevBlockFUl19J2DTevSwapModeTable   */
void J2DTevBlock::setTevSwapModeTable(u32, J2DTevSwapModeTable) {
    /* empty function */
}

/* 802F2A68-802F2A6C 2ED3A8 0004+00 1/0 0/0 0/0 .text
 * setIndTevStage__11J2DTevBlockFUl14J2DIndTevStage             */
void J2DTevBlock::setIndTevStage(u32, J2DIndTevStage) {
    /* empty function */
}

/* 802F2A6C-802F2A74 2ED3AC 0008+00 1/0 0/0 0/0 .text insertTexture__11J2DTevBlockFUlP10JUTTexture
 */
bool J2DTevBlock::insertTexture(u32, JUTTexture*) {
    return false;
}

/* 802F2A74-802F2A7C 2ED3B4 0008+00 1/0 0/0 0/0 .text
 * insertTexture__11J2DTevBlockFUlPC7ResTIMGP10JUTPalette       */
bool J2DTevBlock::insertTexture(u32, ResTIMG const*, JUTPalette*) {
    return false;
}

/* 802F2A7C-802F2A84 2ED3BC 0008+00 1/0 0/0 0/0 .text insertTexture__11J2DTevBlockFUlPC7ResTIMG */
bool J2DTevBlock::insertTexture(u32, ResTIMG const*) {
    return false;
}

/* 802F2A84-802F2A8C 2ED3C4 0008+00 1/0 0/0 0/0 .text setTexture__11J2DTevBlockFUlP10JUTTexture */
bool J2DTevBlock::setTexture(u32, JUTTexture*) {
    return false;
}

/* 802F2A8C-802F2A94 2ED3CC 0008+00 1/0 0/0 0/0 .text setTexture__11J2DTevBlockFUlPC7ResTIMG */
bool J2DTevBlock::setTexture(u32, ResTIMG const*) {
    return false;
}

/* 802F2A94-802F2A9C 2ED3D4 0008+00 1/0 0/0 0/0 .text            removeTexture__11J2DTevBlockFUl */
bool J2DTevBlock::removeTexture(u32) {
    return false;
}

/* 802F2A9C-802F2AA4 2ED3DC 0008+00 1/0 0/0 0/0 .text            setFont__11J2DTevBlockFP7JUTFont */
bool J2DTevBlock::setFont(JUTFont*) {
    return false;
}

/* 802F2AA4-802F2AAC 2ED3E4 0008+00 1/0 0/0 0/0 .text            setFont__11J2DTevBlockFP7ResFONT */
bool J2DTevBlock::setFont(ResFONT*) {
    return false;
}

/* 802F2AAC-802F2AB4 2ED3EC 0008+00 1/0 0/0 0/0 .text setPalette__11J2DTevBlockFUlPC7ResTLUT */
bool J2DTevBlock::setPalette(u32, ResTLUT const*) {
    return false;
}

/* 802F2AB4-802F2ABC 2ED3F4 0008+00 1/0 0/0 0/0 .text            prepareTexture__11J2DTevBlockFUc */
bool J2DTevBlock::prepareTexture(u8) {
    return false;
}

/* 802F2ABC-802F2AC4 2ED3FC 0008+00 1/0 0/0 0/0 .text            getFont__11J2DTevBlockFv */
JUTFont* J2DTevBlock::getFont() {
    return NULL;
}

/* 802F2AC4-802F2AC8 2ED404 0004+00 1/0 0/0 0/0 .text            shiftDeleteFlag__11J2DTevBlockFUcb
 */
void J2DTevBlock::shiftDeleteFlag(u8, bool) {
    /* empty function */
}

/* 802F2AC8-802F2ACC 2ED408 0004+00 1/0 0/0 0/0 .text            setUndeleteFlag__11J2DTevBlockFUc
 */
void J2DTevBlock::setUndeleteFlag(u8) {
    /* empty function */
}

/* 802F2ACC-802F2AD0 2ED40C 0004+00 1/0 0/0 0/0 .text setFontUndeleteFlag__11J2DTevBlockFv */
void J2DTevBlock::setFontUndeleteFlag() {
    /* empty function */
}
