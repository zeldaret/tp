//
// Generated By: dol2asm
// Translation Unit: JUTResFont
//

#include "JSystem/JUtility/JUTResFont.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// Forward References:
//

extern "C" void __ct__10JUTResFontFv();
extern "C" void __ct__10JUTResFontFPC7ResFONTP7JKRHeap();
extern "C" void __dt__10JUTResFontFv();
extern "C" void deleteMemBlocks_ResFont__10JUTResFontFv();
extern "C" void initialize_state__10JUTResFontFv();
extern "C" void initiate__10JUTResFontFPC7ResFONTP7JKRHeap();
extern "C" void protected_initiate__10JUTResFontFPC7ResFONTP7JKRHeap();
extern "C" void countBlock__10JUTResFontFv();
extern "C" void setBlock__10JUTResFontFv();
extern "C" void setGX__10JUTResFontFv();
extern "C" void setGX__10JUTResFontFQ28JUtility6TColorQ28JUtility6TColor();
extern "C" void drawChar_scale__10JUTResFontFffffib();
extern "C" void loadFont__10JUTResFontFi11_GXTexMapIDPQ27JUTFont6TWidth();
extern "C" void getWidthEntry__10JUTResFontCFiPQ27JUTFont6TWidth();
extern "C" void getCellWidth__10JUTResFontCFv();
extern "C" void getCellHeight__10JUTResFontCFv();
extern "C" void isLeadByte__10JUTResFontCFi();
extern "C" void getFontCode__10JUTResFontCFi();
extern "C" void loadImage__10JUTResFontFi11_GXTexMapID();
extern "C" void convertSjis__10JUTResFontCFiPUs();
extern "C" bool isLeadByte_1Byte__7JUTFontFi();
extern "C" bool isLeadByte_2Byte__7JUTFontFi();
extern "C" void isLeadByte_ShiftJIS__7JUTFontFi();
extern "C" void* const saoAboutEncoding___10JUTResFont[3];
extern "C" extern char const* const JUTResFont__stringBase0;

//
// External References:
//

extern "C" void* __nwa__FUlP7JKRHeapi();
extern "C" void __dl__FPv();
extern "C" void __dla__FPv();
extern "C" void getResFont__10JUTResFontCFv();
extern "C" void getFontType__10JUTResFontCFv();
extern "C" void getLeading__10JUTResFontCFv();
extern "C" void getWidth__10JUTResFontCFv();
extern "C" void getAscent__10JUTResFontCFv();
extern "C" void getDescent__10JUTResFontCFv();
extern "C" void getHeight__10JUTResFontCFv();
extern "C" void __ct__7JUTFontFv();
extern "C" void initialize_state__7JUTFontFv();
extern "C" void JUTReportConsole();
extern "C" void GXClearVtxDesc();
extern "C" void _savegpr_25();
extern "C" void _savegpr_27();
extern "C" void _savegpr_28();
extern "C" void _savegpr_29();
extern "C" void _restgpr_25();
extern "C" void _restgpr_27();
extern "C" void _restgpr_28();
extern "C" void _restgpr_29();
extern "C" extern void* __vt__7JUTFont[17];

//
// Declarations:
//

/* ############################################################################################## */
/* 803CC5A0-803CC5F0 0296C0 004C+04 3/3 0/0 0/0 .data            __vt__10JUTResFont */
SECTION_DATA extern void* __vt__10JUTResFont[19 + 1 /* padding */] = {
    (void*)NULL /* RTTI */,
    (void*)NULL,
    (void*)__dt__10JUTResFontFv,
    (void*)setGX__10JUTResFontFv,
    (void*)setGX__10JUTResFontFQ28JUtility6TColorQ28JUtility6TColor,
    (void*)drawChar_scale__10JUTResFontFffffib,
    (void*)getLeading__10JUTResFontCFv,
    (void*)getAscent__10JUTResFontCFv,
    (void*)getDescent__10JUTResFontCFv,
    (void*)getHeight__10JUTResFontCFv,
    (void*)getWidth__10JUTResFontCFv,
    (void*)getWidthEntry__10JUTResFontCFiPQ27JUTFont6TWidth,
    (void*)getCellWidth__10JUTResFontCFv,
    (void*)getCellHeight__10JUTResFontCFv,
    (void*)getFontType__10JUTResFontCFv,
    (void*)getResFont__10JUTResFontCFv,
    (void*)isLeadByte__10JUTResFontCFi,
    (void*)loadImage__10JUTResFontFi11_GXTexMapID,
    (void*)setBlock__10JUTResFontFv,
    /* padding */
    NULL,
};

/* 802DEF48-802DEF94 2D9888 004C+00 0/0 1/1 0/0 .text            __ct__10JUTResFontFv */
JUTResFont::JUTResFont() {
    initialize_state();
    JUTFont::initialize_state();
}

/* 802DEF94-802DF000 2D98D4 006C+00 0/0 10/10 0/0 .text __ct__10JUTResFontFPC7ResFONTP7JKRHeap */
JUTResFont::JUTResFont(ResFONT const* param_0, JKRHeap* param_1) {
    initialize_state();
    JUTFont::initialize_state();
    initiate(param_0, param_1);
}

/* 802DF000-802DF08C 2D9940 008C+00 1/0 2/2 0/0 .text            __dt__10JUTResFontFv */
JUTResFont::~JUTResFont() {
    if (mValid) {
        deleteMemBlocks_ResFont();
        initialize_state();
        JUTFont::initialize_state();
    }
}

/* 802DF08C-802DF0B0 2D99CC 0024+00 3/3 3/3 0/0 .text deleteMemBlocks_ResFont__10JUTResFontFv */
void JUTResFont::deleteMemBlocks_ResFont() {
    delete[] field_0x50;
}

/* 802DF0B0-802DF0DC 2D99F0 002C+00 5/5 3/3 0/0 .text            initialize_state__10JUTResFontFv */
void JUTResFont::initialize_state() {
    mResFont = NULL;
    field_0x50 = NULL;
    mWid1Ptr = NULL;
    mGly1Ptr = NULL;
    mMap1Ptr = NULL;
    field_0x1c = NULL;
    field_0x20 = NULL;
    field_0x44 = -1;
}

/* 802DF0DC-802DF13C 2D9A1C 0060+00 1/1 0/0 0/0 .text initiate__10JUTResFontFPC7ResFONTP7JKRHeap
 */
bool JUTResFont::initiate(ResFONT const* param_0, JKRHeap* param_1) {
    if (!protected_initiate(param_0, param_1)) {
        deleteMemBlocks_ResFont();
        initialize_state();
        JUTFont::initialize_state();
        mValid = false;
        return false;
    } else {
        return true;
    }
}

/* 802DF13C-802DF248 2D9A7C 010C+00 1/1 0/0 0/0 .text
 * protected_initiate__10JUTResFontFPC7ResFONTP7JKRHeap         */
// regalloc
#ifdef NONMATCHING
bool JUTResFont::protected_initiate(ResFONT const* param_0, JKRHeap* param_1) {
    delete_and_initialize();
    JUTFont::initialize_state();

    if (!param_0) {
        return false;
    } else {
        mResFont = param_0;
        mValid = true;

        countBlock();

        void* tmp = new (param_1, 0) void*[mWid1BlockNum + mGly1BlockNum + mMap1BlockNum];
        field_0x50 = tmp;

        if (!field_0x50) {
            return false;
        } else {
            if (mWid1BlockNum != 0) {
                mWid1Ptr = (ResFONT::WID1*)tmp;
                (int*)tmp += mWid1BlockNum;
            }
            if (mGly1BlockNum != 0) {
                mGly1Ptr = (ResFONT::GLY1*)tmp;
                (int*)tmp += mGly1BlockNum;
            }
            if (mMap1BlockNum != 0) {
                mMap1Ptr = (ResFONT::MAP1*)tmp;
            }
            setBlock();
            return true;
        }
    }
    return false;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm bool JUTResFont::protected_initiate(ResFONT const* param_0, JKRHeap* param_1) {
    nofralloc
#include "asm/JSystem/JUtility/JUTResFont/protected_initiate__10JUTResFontFPC7ResFONTP7JKRHeap.s"
}
#pragma pop
#endif

/* ############################################################################################## */
/* 8039D45C-8039D45C 029ABC 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8039D45C = "JUTResFont: Unknown data block\n";
#pragma pop

/* 802DF248-802DF344 2D9B88 00FC+00 1/1 0/0 0/0 .text            countBlock__10JUTResFontFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTResFont::countBlock() {
    nofralloc
#include "asm/JSystem/JUtility/JUTResFont/countBlock__10JUTResFontFv.s"
}
#pragma pop

/* ############################################################################################## */
/* 8039D390-8039D39C -00001 000C+00 1/1 1/1 0/0 .rodata          saoAboutEncoding___10JUTResFont */
SECTION_RODATA void* const JUTResFont::saoAboutEncoding_[3] = {
    (void*)isLeadByte_1Byte__7JUTFontFi,
    (void*)isLeadByte_2Byte__7JUTFontFi,
    (void*)isLeadByte_ShiftJIS__7JUTFontFi,
};
COMPILER_STRIP_GATE(0x8039D390, &JUTResFont::saoAboutEncoding_);

/* 8039D45C-8039D45C 029ABC 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
#pragma push
#pragma force_active on
SECTION_DEAD static char const* const stringBase_8039D47C = "Unknown data block\n";
#pragma pop

/* 802DF344-802DF48C 2D9C84 0148+00 1/0 0/0 0/0 .text            setBlock__10JUTResFontFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTResFont::setBlock() {
    nofralloc
#include "asm/JSystem/JUtility/JUTResFont/setBlock__10JUTResFontFv.s"
}
#pragma pop

/* 802DF48C-802DF584 2D9DCC 00F8+00 1/0 1/0 0/0 .text            setGX__10JUTResFontFv */
void JUTResFont::setGX() {
    GXSetNumChans(1);
    GXSetNumTevStages(1);
    GXSetNumTexGens(1);
    GXSetTevOrder(GX_TEVSTAGE0, GX_TEXCOORD0, GX_TEXMAP0, GX_COLOR0A0);
    GXSetChanCtrl(GX_COLOR0A0, GX_FALSE, GX_SRC_REG, GX_SRC_VTX, GX_LIGHT_NULL, GX_DF_NONE,
                  GX_AF_NONE);
    GXSetTevOp(GX_TEVSTAGE0, GX_MODULATE);
    GXSetBlendMode(GX_BM_BLEND, GX_BL_SRC_ALPHA, GX_BL_INV_SRC_ALPHA, GX_LO_SET);
    GXSetVtxAttrFmt(GX_VTXFMT0, GX_VA_POS, GX_CLR_RGBA, GX_RGBA4, 0);
    GXSetVtxAttrFmt(GX_VTXFMT0, GX_VA_CLR0, GX_CLR_RGBA, GX_RGBA8, 0);
    GXSetVtxAttrFmt(GX_VTXFMT0, GX_VA_TEX0, GX_CLR_RGBA, GX_RGBX8, 15);
    GXClearVtxDesc();
    GXSetVtxDesc(GX_VA_POS, GX_DIRECT);
    GXSetVtxDesc(GX_VA_CLR0, GX_DIRECT);
    GXSetVtxDesc(GX_VA_TEX0, GX_DIRECT);
}

/* 802DF584-802DF7C4 2D9EC4 0240+00 1/0 1/0 0/0 .text
 * setGX__10JUTResFontFQ28JUtility6TColorQ28JUtility6TColor     */
void JUTResFont::setGX(JUtility::TColor param_0, JUtility::TColor param_1) {
    if (param_0 == 0 && param_1 == -1) {
        setGX();
    } else {
        GXSetNumChans(1);
        GXSetNumTevStages(2);
        GXSetNumTexGens(1);
        GXSetTevOrder(GX_TEVSTAGE0, GX_TEXCOORD0, GX_TEXMAP0, GX_COLOR_NULL);
        GXSetChanCtrl(GX_COLOR0A0, GX_FALSE, GX_SRC_REG, GX_SRC_VTX, GX_LIGHT_NULL, GX_DF_NONE,
                      GX_AF_NONE);
        GXSetTevColor(GX_TEVREG0, param_0);
        GXSetTevColor(GX_TEVREG1, param_1);
        GXSetTevColorIn(GX_TEVSTAGE0, GX_CC_C0, GX_CC_C1, GX_CC_TEXC, GX_CC_ZERO);
        GXSetTevAlphaIn(GX_TEVSTAGE0, GX_CA_A0, GX_CA_A1, GX_CA_TEXA, GX_CA_ZERO);
        GXSetTevColorOp(GX_TEVSTAGE0, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, GX_TRUE, GX_TEVPREV);
        GXSetTevAlphaOp(GX_TEVSTAGE0, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, GX_TRUE, GX_TEVPREV);
        GXSetTevOrder(GX_TEVSTAGE1, GX_TEXCOORD_NULL, GX_TEXMAP_NULL, GX_COLOR0A0);
        GXSetTevColorIn(GX_TEVSTAGE1, GX_CC_ZERO, GX_CC_CPREV, GX_CC_RASC, GX_CC_ZERO);
        GXSetTevAlphaIn(GX_TEVSTAGE1, GX_CA_ZERO, GX_CA_APREV, GX_CA_RASA, GX_CA_ZERO);
        GXSetTevColorOp(GX_TEVSTAGE1, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, GX_TRUE, GX_TEVPREV);
        GXSetTevAlphaOp(GX_TEVSTAGE1, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, GX_TRUE, GX_TEVPREV);
        GXSetBlendMode(GX_BM_BLEND, GX_BL_SRC_ALPHA, GX_BL_INV_SRC_ALPHA, GX_LO_SET);
        GXSetVtxAttrFmt(GX_VTXFMT0, GX_VA_POS, GX_CLR_RGBA, GX_RGBA4, 0);
        GXSetVtxAttrFmt(GX_VTXFMT0, GX_VA_CLR0, GX_CLR_RGBA, GX_RGBA8, 0);
        GXSetVtxAttrFmt(GX_VTXFMT0, GX_VA_TEX0, GX_CLR_RGBA, GX_RGBX8, 15);
        GXClearVtxDesc();
        GXSetVtxDesc(GX_VA_POS, GX_DIRECT);
        GXSetVtxDesc(GX_VA_CLR0, GX_DIRECT);
        GXSetVtxDesc(GX_VA_TEX0, GX_DIRECT);
    }
}

/* ############################################################################################## */
/* 80455FF0-80455FF8 0045F0 0004+04 2/2 0/0 0/0 .sdata2          @647 */
SECTION_SDATA2 static f32 lit_647[1 + 1 /* padding */] = {
    0.0f,
    /* padding */
    0.0f,
};

/* 80455FF8-80456000 0045F8 0008+00 1/1 0/0 0/0 .sdata2          @649 */
SECTION_SDATA2 static f64 lit_649 = 4503601774854144.0 /* cast s32 to float */;

/* 80456000-80456008 004600 0008+00 1/1 0/0 0/0 .sdata2          @651 */
SECTION_SDATA2 static f64 lit_651 = 4503599627370496.0 /* cast u32 to float */;

/* 802DF7C4-802DFBE8 2DA104 0424+00 1/0 1/0 0/0 .text            drawChar_scale__10JUTResFontFffffib
 */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm f32 JUTResFont::drawChar_scale(f32 param_0, f32 param_1, f32 param_2, f32 param_3, int param_4,
                                   bool param_5) {
    nofralloc
#include "asm/JSystem/JUtility/JUTResFont/drawChar_scale__10JUTResFontFffffib.s"
}
#pragma pop

/* 802DFBE8-802DFC64 2DA528 007C+00 1/1 0/0 0/0 .text
 * loadFont__10JUTResFontFi11_GXTexMapIDPQ27JUTFont6TWidth      */
void JUTResFont::loadFont(int param_0, _GXTexMapID param_1, JUTFont::TWidth* param_2) {
    if (param_2 != 0) {
        getWidthEntry(param_0, param_2);
    }

    int code = getFontCode(param_0);
    loadImage(code, param_1);
}

/* 802DFC64-802DFD0C 2DA5A4 00A8+00 1/0 1/0 0/0 .text
 * getWidthEntry__10JUTResFontCFiPQ27JUTFont6TWidth             */
#ifdef NONMATCHING
void JUTResFont::getWidthEntry(int param_0, JUTFont::TWidth* param_1) const {
    int code = getFontCode(param_0);
    int tmp = 0;
    param_1->field_0x0 = 0;
    param_1->field_0x1 = mInf1Ptr->width;

    for (int i = mWid1BlockNum; i > 0; i--) {
        if (i = 0) {
            return;
        }

        ResFONT::WID1* tmp2 = mWid1Ptr + tmp;
        if (tmp2->startCode <= code && code <= tmp2->endCode) {
            break;
        }
        tmp += 4;
    }
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTResFont::getWidthEntry(int param_0, JUTFont::TWidth* param_1) const {
    nofralloc
#include "asm/JSystem/JUtility/JUTResFont/getWidthEntry__10JUTResFontCFiPQ27JUTFont6TWidth.s"
}
#pragma pop
#endif

/* 802DFD0C-802DFD58 2DA64C 004C+00 1/0 1/0 0/0 .text            getCellWidth__10JUTResFontCFv */
// regalloc
#ifdef NONMATCING
u16 JUTResFont::getCellWidth() const {
    u16 width;

    if (mGly1Ptr && mGly1Ptr->magic != 0) {
        width = mGly1Ptr->cellWidth;
    } else {
        width = getWidth();
    }

    return width;
}
#else
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm u16 JUTResFont::getCellWidth() const {
    nofralloc
#include "asm/JSystem/JUtility/JUTResFont/getCellWidth__10JUTResFontCFv.s"
}
#pragma pop
#endif

/* 802DFD58-802DFDA4 2DA698 004C+00 1/0 1/0 0/0 .text            getCellHeight__10JUTResFontCFv */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm u16 JUTResFont::getCellHeight() const {
    nofralloc
#include "asm/JSystem/JUtility/JUTResFont/getCellHeight__10JUTResFontCFv.s"
}
#pragma pop

/* 802DFDA4-802DFDD8 2DA6E4 0034+00 1/0 1/0 0/0 .text            isLeadByte__10JUTResFontCFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm bool JUTResFont::isLeadByte(int param_0) const {
    nofralloc
#include "asm/JSystem/JUtility/JUTResFont/isLeadByte__10JUTResFontCFi.s"
}
#pragma pop

/* ############################################################################################## */
/* 8039D39C-8039D45C 0299FC 00BE+02 1/1 0/0 0/0 .rodata          halftofull$726 */
SECTION_RODATA static u8 const halftofull[190 + 2 /* padding */] = {
    0x81,
    0x40,
    0x81,
    0x49,
    0x81,
    0x68,
    0x81,
    0x94,
    0x81,
    0x90,
    0x81,
    0x93,
    0x81,
    0x95,
    0x81,
    0x66,
    0x81,
    0x69,
    0x81,
    0x6A,
    0x81,
    0x96,
    0x81,
    0x7B,
    0x81,
    0x43,
    0x81,
    0x7C,
    0x81,
    0x44,
    0x81,
    0x5E,
    0x82,
    0x4F,
    0x82,
    0x50,
    0x82,
    0x51,
    0x82,
    0x52,
    0x82,
    0x53,
    0x82,
    0x54,
    0x82,
    0x55,
    0x82,
    0x56,
    0x82,
    0x57,
    0x82,
    0x58,
    0x81,
    0x46,
    0x81,
    0x47,
    0x81,
    0x83,
    0x81,
    0x81,
    0x81,
    0x84,
    0x81,
    0x48,
    0x81,
    0x97,
    0x82,
    0x60,
    0x82,
    0x61,
    0x82,
    0x62,
    0x82,
    0x63,
    0x82,
    0x64,
    0x82,
    0x65,
    0x82,
    0x66,
    0x82,
    0x67,
    0x82,
    0x68,
    0x82,
    0x69,
    0x82,
    0x6A,
    0x82,
    0x6B,
    0x82,
    0x6C,
    0x82,
    0x6D,
    0x82,
    0x6E,
    0x82,
    0x6F,
    0x82,
    0x70,
    0x82,
    0x71,
    0x82,
    0x72,
    0x82,
    0x73,
    0x82,
    0x74,
    0x82,
    0x75,
    0x82,
    0x76,
    0x82,
    0x77,
    0x82,
    0x78,
    0x82,
    0x79,
    0x81,
    0x6D,
    0x81,
    0x8F,
    0x81,
    0x6E,
    0x81,
    0x4F,
    0x81,
    0x51,
    0x81,
    0x65,
    0x82,
    0x81,
    0x82,
    0x82,
    0x82,
    0x83,
    0x82,
    0x84,
    0x82,
    0x85,
    0x82,
    0x86,
    0x82,
    0x87,
    0x82,
    0x88,
    0x82,
    0x89,
    0x82,
    0x8A,
    0x82,
    0x8B,
    0x82,
    0x8C,
    0x82,
    0x8D,
    0x82,
    0x8E,
    0x82,
    0x8F,
    0x82,
    0x90,
    0x82,
    0x91,
    0x82,
    0x92,
    0x82,
    0x93,
    0x82,
    0x94,
    0x82,
    0x95,
    0x82,
    0x96,
    0x82,
    0x97,
    0x82,
    0x98,
    0x82,
    0x99,
    0x82,
    0x9A,
    0x81,
    0x6F,
    0x81,
    0x62,
    0x81,
    0x70,
    0x81,
    0x60,
    /* padding */
    0x00,
    0x00,
};
COMPILER_STRIP_GATE(0x8039D39C, &halftofull);

/* 802DFDD8-802DFF60 2DA718 0188+00 2/2 0/0 0/0 .text            getFontCode__10JUTResFontCFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm int JUTResFont::getFontCode(int param_0) const {
    nofralloc
#include "asm/JSystem/JUtility/JUTResFont/getFontCode__10JUTResFontCFi.s"
}
#pragma pop

/* 802DFF60-802E00C4 2DA8A0 0164+00 1/0 0/0 0/0 .text loadImage__10JUTResFontFi11_GXTexMapID */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTResFont::loadImage(int param_0, _GXTexMapID param_1) {
    nofralloc
#include "asm/JSystem/JUtility/JUTResFont/loadImage__10JUTResFontFi11_GXTexMapID.s"
}
#pragma pop

/* 802E00C4-802E0108 2DAA04 0044+00 1/1 0/0 0/0 .text            convertSjis__10JUTResFontCFiPUs */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void JUTResFont::convertSjis(int param_0, u16* param_1) const {
    nofralloc
#include "asm/JSystem/JUtility/JUTResFont/convertSjis__10JUTResFontCFiPUs.s"
}
#pragma pop

/* 802E0108-802E0110 2DAA48 0008+00 1/0 0/0 0/0 .text            isLeadByte_1Byte__7JUTFontFi */
bool JUTFont::isLeadByte_1Byte(int param_0) {
    return false;
}

/* 802E0110-802E0118 2DAA50 0008+00 1/0 0/0 0/0 .text            isLeadByte_2Byte__7JUTFontFi */
bool JUTFont::isLeadByte_2Byte(int param_0) {
    return true;
}

/* 802E0118-802E0148 2DAA58 0030+00 1/0 0/0 0/0 .text            isLeadByte_ShiftJIS__7JUTFontFi */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm bool JUTFont::isLeadByte_ShiftJIS(int param_0) {
    nofralloc
#include "asm/JSystem/JUtility/JUTResFont/isLeadByte_ShiftJIS__7JUTFontFi.s"
}
#pragma pop

/* 8039D45C-8039D45C 029ABC 0000+00 0/0 0/0 0/0 .rodata          @stringBase0 */
