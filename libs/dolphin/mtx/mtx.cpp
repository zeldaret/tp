//
// Generated By: dol2asm
// Translation Unit: mtx
//

#include "dolphin/mtx/mtx.h"
#include "dol2asm.h"
#include "dolphin/mtx/mtxvec.h"
#include "dolphin/types.h"
#include "MSL_C/math.h"

//
// Declarations:
//

/* ############################################################################################## */
/* 80456508-8045650C 004B08 0004+00 6/6 0/0 0/0 .sdata2          @96 */
SECTION_SDATA2 static f32 lit_96 = 1.0f;

/* 8045650C-80456510 004B0C 0004+00 6/6 0/0 0/0 .sdata2          @97 */
SECTION_SDATA2 static u8 lit_97[4] = {
    0x00,
    0x00,
    0x00,
    0x00,
};

/* 80346484-803464B0 340DC4 002C+00 0/0 27/27 13/13 .text            PSMTXIdentity */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXIdentity(Mtx matrix) {
    nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXIdentity.s"
}
#pragma pop

/* 803464B0-803464E4 340DF0 0034+00 0/0 119/119 1436/1436 .text            PSMTXCopy */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXCopy(const Mtx src, Mtx dst) {
    nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXCopy.s"
}
#pragma pop

/* ############################################################################################## */
/* 804509D0-804509D8 000450 0008+00 1/1 0/0 0/0 .sdata           Unit01 */
SECTION_SDATA static u8 Unit01[8] = {
    0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00,
};

/* 803464E4-803465B0 340E24 00CC+00 0/0 109/109 30/30 .text            PSMTXConcat */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXConcat(const Mtx src_a, const Mtx src_b, Mtx dst) {
    nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXConcat.s"
}
#pragma pop

/* 803465B0-803466A8 340EF0 00F8+00 0/0 43/43 39/39 .text            PSMTXInverse */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm u32 PSMTXInverse(const Mtx src, Mtx dst) {
    nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXInverse.s"
}
#pragma pop

/* 803466A8-80346718 340FE8 0070+00 0/0 17/17 0/0 .text            PSMTXRotRad */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXRotRad(Mtx matrix, u8 axis, float rad) {
    nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXRotRad.s"
}
#pragma pop

/* 80346718-803467C8 341058 00B0+00 1/1 0/0 0/0 .text            PSMTXRotTrig */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXRotTrig(Mtx matrix, u8 axis, float sin, float cos) {
    nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXRotTrig.s"
}
#pragma pop

/* ############################################################################################## */
/* 80456510-80456514 004B10 0004+00 2/2 0/0 0/0 .sdata2          @190 */
SECTION_SDATA2 static f32 lit_190 = 0.5f;

/* 80456514-80456518 004B14 0004+00 1/1 0/0 0/0 .sdata2          @191 */
SECTION_SDATA2 static f32 lit_191 = 3.0f;

/* 803467C8-80346878 341108 00B0+00 1/1 0/0 0/0 .text            __PSMTXRotAxisRadInternal */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm double __PSMTXRotAxisRadInternal(double param_1, double param_2, int param_3, int param_4) {
    nofralloc
#include "asm/dolphin/mtx/mtx/__PSMTXRotAxisRadInternal.s"
}
#pragma pop

/* 80346878-803468E8 3411B8 0070+00 0/0 6/6 8/8 .text            PSMTXRotAxisRad */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXRotAxisRad(Mtx matrix, const Vec* axis, float rad) {
    nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXRotAxisRad.s"
}
#pragma pop

/* 803468E8-8034691C 341228 0034+00 0/0 38/38 471/471 .text            PSMTXTrans */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXTrans(Mtx matrix, float x_trans, float y_trans, float z_trans) {
    nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXTrans.s"
}
#pragma pop

/* 8034691C-80346968 34125C 004C+00 0/0 3/3 0/0 .text            PSMTXTransApply */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXTransApply(const Mtx src, Mtx dst, float x, float y, float z) {
    nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXTransApply.s"
}
#pragma pop

/* 80346968-80346990 3412A8 0028+00 0/0 14/14 8/8 .text            PSMTXScale */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXScale(Mtx matrix, float x_scale, float y_scale, float z_scale) {
    nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXScale.s"
}
#pragma pop

/* 80346990-803469E8 3412D0 0058+00 0/0 1/1 0/0 .text            PSMTXScaleApply */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXScaleApply(const Mtx src, Mtx dst, float x_scale, float y_scale, float z_scale) {
    nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXScaleApply.s"
}
#pragma pop

/* 803469E8-80346A8C 341328 00A4+00 0/0 8/8 2/2 .text            PSMTXQuat */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void PSMTXQuat(Mtx matrix, const Quaternion* quat) {
    nofralloc
#include "asm/dolphin/mtx/mtx/PSMTXQuat.s"
}
#pragma pop

/* 80346A8C-80346C18 3413CC 018C+00 0/0 2/2 0/0 .text            C_MTXLookAt */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void C_MTXLookAt(Mtx param_1, const Vec* param_2, const Vec* param_3, const Vec* param_4) {
    nofralloc
#include "asm/dolphin/mtx/mtx/C_MTXLookAt.s"
}
#pragma pop

/* ############################################################################################## */
/* 80456518-8045651C 004B18 0004+00 1/1 0/0 0/0 .sdata2          @206 */
SECTION_SDATA2 static f32 lit_206 = 2.0f;

/* 8045651C-80456520 004B1C 0004+00 1/1 0/0 0/0 .sdata2          @227 */
SECTION_SDATA2 static f32 lit_227 = -1.0f;

/* 80456520-80456528 004B20 0004+04 1/1 0/0 0/0 .sdata2          @230 */
SECTION_SDATA2 static f32 lit_230[1 + 1 /* padding */] = {
    0.01745329238474369f,
    /* padding */
    0.0f,
};

/* 80346C18-80346CE4 341558 00CC+00 0/0 4/4 7/7 .text            C_MTXLightPerspective */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void C_MTXLightPerspective(Mtx matrix, float fov_y, float aspect, float scale_s, float scale_t,
                               float trans_s, float trans_t) {
    nofralloc
#include "asm/dolphin/mtx/mtx/C_MTXLightPerspective.s"
}
#pragma pop

/* 80346CE4-80346D6C 341624 0088+00 0/0 2/2 5/5 .text            C_MTXLightOrtho */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void C_MTXLightOrtho(Mtx matrix, float top, float bottom, float left, float right,
                         float scale_s, float scale_t, float trans_s, float trans_t) {
    nofralloc
#include "asm/dolphin/mtx/mtx/C_MTXLightOrtho.s"
}
#pragma pop
