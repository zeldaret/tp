//
// Generated By: dol2asm
// Translation Unit: OSAlarm
//

#include "dolphin/os/OSAlarm.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// External References:
//

extern "C" void PPCMtdec();
extern "C" void __OSSetExceptionHandler();
extern "C" void __OSGetExceptionHandler();
extern "C" void OSSetCurrentContext();
extern "C" void OSLoadContext();
extern "C" void OSClearContext();
extern "C" void OSDisableInterrupts();
extern "C" void OSRestoreInterrupts();
extern "C" void OSRegisterResetFunction();
extern "C" void OSDisableScheduler();
extern "C" void OSEnableScheduler();
extern "C" void __OSReschedule();
extern "C" void __DVDTestAlarm();
extern "C" void __div2i();

//
// Declarations:
//

/* ############################################################################################## */
/* 803CF480-803CF490 -00001 0010+00 1/1 0/0 0/0 .data            ResetFunctionInfo */
SECTION_DATA static void* ResetFunctionInfo[4] = {
    (void*)OnReset,
    (void*)0xFFFFFFFF,
    (void*)NULL,
    (void*)NULL,
};

/* 80451638-80451640 000B38 0008+00 5/5 0/0 0/0 .sbss            AlarmQueue */
static u8 AlarmQueue[8];

/* 8033A8A0-8033A8F8 3351E0 0058+00 0/0 3/3 0/0 .text            OSInitAlarm */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSInitAlarm(void) {
    nofralloc
#include "asm/dolphin/os/OSAlarm/OSInitAlarm.s"
}
#pragma pop

/* 8033A8F8-8033A908 335238 0010+00 0/0 17/17 0/0 .text            OSCreateAlarm */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSCreateAlarm(OSAlarm* alarm) {
    nofralloc
#include "asm/dolphin/os/OSAlarm/OSCreateAlarm.s"
}
#pragma pop

/* 8033A908-8033AB58 335248 0250+00 3/3 0/0 0/0 .text            InsertAlarm */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void InsertAlarm(OSAlarm* alarm, s64 time, OSAlarmHandler* handler) {
    nofralloc
#include "asm/dolphin/os/OSAlarm/InsertAlarm.s"
}
#pragma pop

/* 8033AB58-8033ABC0 335498 0068+00 0/0 18/18 0/0 .text            OSSetAlarm */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSSetAlarm(OSAlarm* alarm, s64 time, OSAlarmHandler* handler) {
    nofralloc
#include "asm/dolphin/os/OSAlarm/OSSetAlarm.s"
}
#pragma pop

/* 8033ABC0-8033AC3C 335500 007C+00 0/0 1/1 0/0 .text            OSSetPeriodicAlarm */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSSetPeriodicAlarm(OSAlarm* alarm, s64 start, s64 period, OSAlarmHandler* handler) {
    nofralloc
#include "asm/dolphin/os/OSAlarm/OSSetPeriodicAlarm.s"
}
#pragma pop

/* 8033AC3C-8033AD58 33557C 011C+00 1/1 11/11 0/0 .text            OSCancelAlarm */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSCancelAlarm(OSAlarm* alarm) {
    nofralloc
#include "asm/dolphin/os/OSAlarm/OSCancelAlarm.s"
}
#pragma pop

/* 8033AD58-8033AF88 335698 0230+00 1/1 0/0 0/0 .text            DecrementerExceptionCallback */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void DecrementerExceptionCallback(OSException* exception, struct OSContext* context) {
    nofralloc
#include "asm/dolphin/os/OSAlarm/DecrementerExceptionCallback.s"
}
#pragma pop

/* 8033AF88-8033AFD8 3358C8 0050+00 1/1 0/0 0/0 .text            DecrementerExceptionHandler */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void DecrementerExceptionHandler(OSException* exception, struct OSContext* context) {
    nofralloc
#include "asm/dolphin/os/OSAlarm/DecrementerExceptionHandler.s"
}
#pragma pop

/* 8033AFD8-8033B078 335918 00A0+00 1/0 0/0 0/0 .text            OnReset */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm s32 OnReset(s32 param_0) {
    nofralloc
#include "asm/dolphin/os/OSAlarm/OnReset.s"
}
#pragma pop
