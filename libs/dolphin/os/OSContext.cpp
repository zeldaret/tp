//
// Generated By: dol2asm
// Translation Unit: OSContext
//

#include "dolphin/os/OSContext.h"
#include "dolphin/os/OSInterrupt.h"
#include "dolphin/os/OS.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// External References:
//

extern "C" void __RAS_OSDisableInterrupts_end();
extern "C" void DBPrintf();
extern "C" void __cvt_fp2unsigned();

//
// Declarations:
//

/* 8033BBE4-8033BD08 336524 0124+00 1/1 0/0 0/0 .text            __OSLoadFPUContext */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSLoadFPUContext(void) {
    nofralloc
#include "asm/dolphin/os/OSContext/__OSLoadFPUContext.s"
}
#pragma pop

/* 8033BD08-8033BE30 336648 0128+00 2/2 0/0 0/0 .text            __OSSaveFPUContext */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSSaveFPUContext(OSContext* context) {
    nofralloc
#include "asm/dolphin/os/OSContext/__OSSaveFPUContext.s"
}
#pragma pop

/* 8033BE30-8033BE38 336770 0008+00 0/0 1/1 0/0 .text            OSSaveFPUContext */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSSaveFPUContext(OSContext* context) {
    nofralloc
#include "asm/dolphin/os/OSContext/OSSaveFPUContext.s"
}
#pragma pop

/* 8033BE38-8033BE94 336778 005C+00 1/1 18/18 0/0 .text            OSSetCurrentContext */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSSetCurrentContext(OSContext* context) {
    nofralloc
#include "asm/dolphin/os/OSContext/OSSetCurrentContext.s"
}
#pragma pop

/* 8033BE94-8033BEA0 3367D4 000C+00 0/0 2/2 0/0 .text            OSGetCurrentContext */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm OSContext* OSGetCurrentContext(void) {
    nofralloc
#include "asm/dolphin/os/OSContext/OSGetCurrentContext.s"
}
#pragma pop

/* 8033BEA0-8033BF20 3367E0 0080+00 0/0 1/1 0/0 .text            OSSaveContext */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSSaveContext(OSContext* context) {
    nofralloc
#include "asm/dolphin/os/OSContext/OSSaveContext.s"
}
#pragma pop

/* 8033BF20-8033BFF8 336860 00D8+00 0/0 4/4 0/0 .text            OSLoadContext */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSLoadContext(OSContext* context) {
    nofralloc
#include "asm/dolphin/os/OSContext/OSLoadContext.s"
}
#pragma pop

/* 8033BFF8-8033C000 336938 0008+00 0/0 5/5 0/0 .text            OSGetStackPointer */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm u8* OSGetStackPointer(void) {
    nofralloc
#include "asm/dolphin/os/OSContext/OSGetStackPointer.s"
}
#pragma pop

/* 8033C000-8033C024 336940 0024+00 1/1 20/20 0/0 .text            OSClearContext */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSClearContext(OSContext* context) {
    nofralloc
#include "asm/dolphin/os/OSContext/OSClearContext.s"
}
#pragma pop

/* 8033C024-8033C0E0 336964 00BC+00 0/0 1/1 0/0 .text            OSInitContext */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSInitContext(OSContext* context, u32 pc, u32 lr) {
    nofralloc
#include "asm/dolphin/os/OSContext/OSInitContext.s"
}
#pragma pop

/* ############################################################################################## */
/* 803CF740-803CF784 02C860 0044+00 1/1 0/0 0/0 .data            @61 */
SECTION_DATA static u8 lit_61[68] = {
    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x20, 0x43, 0x6F,
    0x6E, 0x74, 0x65, 0x78, 0x74, 0x20, 0x30, 0x78, 0x25, 0x30, 0x38, 0x78, 0x20, 0x2D,
    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A, 0x00,
};

/* 803CF784-803CF7B4 02C8A4 0030+00 0/1 0/0 0/0 .data            @62 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_62[48] = {
    0x72, 0x25, 0x2D, 0x32, 0x64, 0x20, 0x20, 0x3D, 0x20, 0x30, 0x78, 0x25, 0x30, 0x38, 0x78, 0x20,
    0x28, 0x25, 0x31, 0x34, 0x64, 0x29, 0x20, 0x20, 0x72, 0x25, 0x2D, 0x32, 0x64, 0x20, 0x20, 0x3D,
    0x20, 0x30, 0x78, 0x25, 0x30, 0x38, 0x78, 0x20, 0x28, 0x25, 0x31, 0x34, 0x64, 0x29, 0x0A, 0x00,
};
#pragma pop

/* 803CF7B4-803CF7E4 02C8D4 002F+01 0/1 0/0 0/0 .data            @63 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_63[47 + 1 /* padding */] = {
    0x4C,
    0x52,
    0x20,
    0x20,
    0x20,
    0x3D,
    0x20,
    0x30,
    0x78,
    0x25,
    0x30,
    0x38,
    0x78,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x43,
    0x52,
    0x20,
    0x20,
    0x20,
    0x3D,
    0x20,
    0x30,
    0x78,
    0x25,
    0x30,
    0x38,
    0x78,
    0x0A,
    0x00,
    /* padding */
    0x00,
};
#pragma pop

/* 803CF7E4-803CF814 02C904 002F+01 0/1 0/0 0/0 .data            @64 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_64[47 + 1 /* padding */] = {
    0x53,
    0x52,
    0x52,
    0x30,
    0x20,
    0x3D,
    0x20,
    0x30,
    0x78,
    0x25,
    0x30,
    0x38,
    0x78,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x53,
    0x52,
    0x52,
    0x31,
    0x20,
    0x3D,
    0x20,
    0x30,
    0x78,
    0x25,
    0x30,
    0x38,
    0x78,
    0x0A,
    0x00,
    /* padding */
    0x00,
};
#pragma pop

/* 803CF814-803CF828 02C934 0011+03 0/1 0/0 0/0 .data            @65 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_65[17 + 3 /* padding */] = {
    0x0A,
    0x47,
    0x51,
    0x52,
    0x73,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
};
#pragma pop

/* 803CF828-803CF84C 02C948 0021+03 0/1 0/0 0/0 .data            @66 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_66[33 + 3 /* padding */] = {
    0x67,
    0x71,
    0x72,
    0x25,
    0x64,
    0x20,
    0x3D,
    0x20,
    0x30,
    0x78,
    0x25,
    0x30,
    0x38,
    0x78,
    0x20,
    0x09,
    0x20,
    0x67,
    0x71,
    0x72,
    0x25,
    0x64,
    0x20,
    0x3D,
    0x20,
    0x30,
    0x78,
    0x25,
    0x30,
    0x38,
    0x78,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
};
#pragma pop

/* 803CF84C-803CF860 02C96C 0012+02 0/1 0/0 0/0 .data            @67 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_67[18 + 2 /* padding */] = {
    0x0A,
    0x0A,
    0x46,
    0x50,
    0x52,
    0x73,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
};
#pragma pop

/* 803CF860-803CF87C 02C980 0019+03 0/1 0/0 0/0 .data            @68 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_68[25 + 3 /* padding */] = {
    0x66,
    0x72,
    0x25,
    0x64,
    0x20,
    0x09,
    0x3D,
    0x20,
    0x25,
    0x64,
    0x20,
    0x09,
    0x20,
    0x66,
    0x72,
    0x25,
    0x64,
    0x20,
    0x09,
    0x3D,
    0x20,
    0x25,
    0x64,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
};
#pragma pop

/* 803CF87C-803CF890 02C99C 0012+02 0/1 0/0 0/0 .data            @69 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_69[18 + 2 /* padding */] = {
    0x0A,
    0x0A,
    0x50,
    0x53,
    0x46,
    0x73,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x2D,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
};
#pragma pop

/* 803CF890-803CF8B0 02C9B0 001D+03 0/1 0/0 0/0 .data            @70 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_70[29 + 3 /* padding */] = {
    0x70,
    0x73,
    0x25,
    0x64,
    0x20,
    0x09,
    0x3D,
    0x20,
    0x30,
    0x78,
    0x25,
    0x78,
    0x20,
    0x09,
    0x20,
    0x70,
    0x73,
    0x25,
    0x64,
    0x20,
    0x09,
    0x3D,
    0x20,
    0x30,
    0x78,
    0x25,
    0x78,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
};
#pragma pop

/* 803CF8B0-803CF8D8 02C9D0 0026+02 0/1 0/0 0/0 .data            @71 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_71[38 + 2 /* padding */] = {
    0x0A,
    0x41,
    0x64,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x3A,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x20,
    0x42,
    0x61,
    0x63,
    0x6B,
    0x20,
    0x43,
    0x68,
    0x61,
    0x69,
    0x6E,
    0x20,
    0x20,
    0x20,
    0x20,
    0x4C,
    0x52,
    0x20,
    0x53,
    0x61,
    0x76,
    0x65,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
};
#pragma pop

/* 803CF8D8-803CF8F4 02C9F8 001C+00 0/1 0/0 0/0 .data            @72 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_72[28] = {
    0x30, 0x78, 0x25, 0x30, 0x38, 0x78, 0x3A, 0x20, 0x20, 0x20, 0x30, 0x78, 0x25, 0x30,
    0x38, 0x78, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x25, 0x30, 0x38, 0x78, 0x0A, 0x00,
};
#pragma pop

/* 8033C0E0-8033C388 336A20 02A8+00 0/0 3/3 0/0 .text            OSDumpContext */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSDumpContext(OSContext* context) {
    nofralloc
#include "asm/dolphin/os/OSContext/OSDumpContext.s"
}
#pragma pop

/* 8033C388-8033C40C 336CC8 0084+00 1/1 0/0 0/0 .text            OSSwitchFPUContext */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void OSSwitchFPUContext(OSContext* context) {
    nofralloc
#include "asm/dolphin/os/OSContext/OSSwitchFPUContext.s"
}
#pragma pop

/* ############################################################################################## */
/* 803CF8F4-803CF918 02CA14 0023+01 1/1 0/0 0/0 .data            @76 */
SECTION_DATA static u8 lit_76[35 + 1 /* padding */] = {
    0x46,
    0x50,
    0x55,
    0x2D,
    0x75,
    0x6E,
    0x61,
    0x76,
    0x61,
    0x69,
    0x6C,
    0x61,
    0x62,
    0x6C,
    0x65,
    0x20,
    0x68,
    0x61,
    0x6E,
    0x64,
    0x6C,
    0x65,
    0x72,
    0x20,
    0x69,
    0x6E,
    0x73,
    0x74,
    0x61,
    0x6C,
    0x6C,
    0x65,
    0x64,
    0x0A,
    0x00,
    /* padding */
    0x00,
};

/* 8033C40C-8033C454 336D4C 0048+00 0/0 1/1 0/0 .text            __OSContextInit */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSContextInit(void) {
    nofralloc
#include "asm/dolphin/os/OSContext/__OSContextInit.s"
}
#pragma pop

/* 8033C454-8033C580 336D94 012C+00 0/0 1/1 0/0 .text            OSFillFPUContext */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSFillFPUContext(OSContext* context) {
    nofralloc
#include "asm/dolphin/os/OSContext/OSFillFPUContext.s"
}
#pragma pop
