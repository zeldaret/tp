//
// Generated By: dol2asm
// Translation Unit: OSReset
//

#include "dolphin/os/OSReset.h"
#include "dol2asm.h"
#include "dolphin/types.h"

//
// External References:
//

SECTION_INIT void memset();
extern "C" void OSReport();
extern "C" void __OSStopAudioSystem();
extern "C" void ICFlashInvalidate();
extern "C" void LCDisable();
extern "C" void OSDisableInterrupts();
extern "C" void __OSReboot();
extern "C" void __OSLockSram();
extern "C" void __OSUnlockSram();
extern "C" void __OSSyncSram();
extern "C" void OSDisableScheduler();
extern "C" void OSEnableScheduler();
extern "C" void OSCancelThread();
extern "C" void __PADDisableRecalibration();
extern "C" extern u8 __OSRebootParams[28 + 4 /* padding */];

//
// Declarations:
//

/* ############################################################################################## */
/* 80451690-80451698 000B90 0008+00 2/2 0/0 0/0 .sbss            ResetFunctionQueue */
static u8 ResetFunctionQueue[8];

/* 8033F660-8033F6E4 339FA0 0084+00 0/0 5/5 0/0 .text            OSRegisterResetFunction */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSRegisterResetFunction(OSResetFunctionInfo* info) {
    nofralloc
#include "asm/dolphin/os/OSReset/OSRegisterResetFunction.s"
}
#pragma pop

/* 8033F6E4-8033F78C 33A024 00A8+00 1/1 0/0 0/0 .text            __OSCallResetFunctions */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm BOOL __OSCallResetFunctions(s32 param_0) {
    nofralloc
#include "asm/dolphin/os/OSReset/__OSCallResetFunctions.s"
}
#pragma pop

/* 8033F78C-8033F7FC 33A0CC 0070+00 2/2 0/0 0/0 .text            Reset */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void Reset(s32 param_0) {
    nofralloc
#include "asm/dolphin/os/OSReset/Reset.s"
}
#pragma pop

/* 8033F7FC-8033F864 33A13C 0068+00 1/1 0/0 0/0 .text            KillThreads */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void KillThreads(void) {
    nofralloc
#include "asm/dolphin/os/OSReset/KillThreads.s"
}
#pragma pop

/* 8033F864-8033F8AC 33A1A4 0048+00 0/0 3/3 0/0 .text            __OSDoHotReset */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSDoHotReset(s32 param_0) {
    nofralloc
#include "asm/dolphin/os/OSReset/__OSDoHotReset.s"
}
#pragma pop

/* ############################################################################################## */
/* 803D07E8-803D0838 02D908 004E+02 1/1 0/0 0/0 .data            @153 */
SECTION_DATA static u8 lit_153[78 + 2 /* padding */] = {
    0x4F,
    0x53,
    0x52,
    0x65,
    0x73,
    0x65,
    0x74,
    0x53,
    0x79,
    0x73,
    0x74,
    0x65,
    0x6D,
    0x28,
    0x29,
    0x3A,
    0x20,
    0x59,
    0x6F,
    0x75,
    0x20,
    0x63,
    0x61,
    0x6E,
    0x27,
    0x74,
    0x20,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x79,
    0x20,
    0x54,
    0x52,
    0x55,
    0x45,
    0x20,
    0x74,
    0x6F,
    0x20,
    0x66,
    0x6F,
    0x72,
    0x63,
    0x65,
    0x4D,
    0x65,
    0x6E,
    0x75,
    0x20,
    0x69,
    0x66,
    0x20,
    0x79,
    0x6F,
    0x75,
    0x20,
    0x72,
    0x65,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x2E,
    0x20,
    0x49,
    0x67,
    0x6E,
    0x6F,
    0x72,
    0x65,
    0x64,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
};

/* 80451698-804516A0 000B98 0004+04 1/1 0/0 0/0 .sbss            bootThisDol */
static u8 bootThisDol[4 + 4 /* padding */];

/* 8033F8AC-8033FAAC 33A1EC 0200+00 0/0 5/5 0/0 .text            OSResetSystem */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void OSResetSystem(s32 reset, u32 resetCode, BOOL forceMenu) {
    nofralloc
#include "asm/dolphin/os/OSReset/OSResetSystem.s"
}
#pragma pop

/* 8033FAAC-8033FAE4 33A3EC 0038+00 0/0 3/3 0/0 .text            OSGetResetCode */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm u32 OSGetResetCode(void) {
    nofralloc
#include "asm/dolphin/os/OSReset/OSGetResetCode.s"
}
#pragma pop
