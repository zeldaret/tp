//
// Generated By: dol2asm
// Translation Unit: OSCache
//

#include "dolphin/os/OSCache.h"
#include "dol2asm.h"
#include "dolphin/os/OSError.h"
#include "dolphin/types.h"

//
// Forward References:
//

extern "C" static void DCEnable();
extern "C" void DCFlushRange();
extern "C" void DCFlushRangeNoSync();
extern "C" void DCStoreRangeNoSync();
extern "C" void DCZeroRange();
extern "C" void ICInvalidateRange();
extern "C" void ICFlashInvalidate();
extern "C" static void ICEnable();
extern "C" void __LCEnable();
extern "C" void LCEnable();
extern "C" void LCDisable();
extern "C" static void LCStoreBlocks();
extern "C" void LCStoreData();
extern "C" void LCQueueWait();
extern "C" static void L2GlobalInvalidate();
extern "C" static void DMAErrorHandler();
extern "C" void __OSCacheInit();

//
// External References:
//

extern "C" void OSReport();
extern "C" void PPCMfmsr();
extern "C" void PPCMtmsr();
extern "C" void PPCMfhid0();
extern "C" void PPCMfl2cr();
extern "C" void PPCMtl2cr();
extern "C" void PPCHalt();
extern "C" void PPCMfhid2();
extern "C" void PPCMthid2();
extern "C" void OSDumpContext();
extern "C" void OSDisableInterrupts();
extern "C" void OSRestoreInterrupts();
extern "C" void DBPrintf();

//
// Declarations:
//

/* 8033B56C-8033B580 335EAC 0014+00 1/1 0/0 0/0 .text            DCEnable */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void DCEnable() {
    nofralloc
#include "asm/dolphin/os/OSCache/DCEnable.s"
}
#pragma pop

/* 8033B580-8033B5AC 335EC0 002C+00 0/0 30/30 1/1 .text            DCInvalidateRange */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DCInvalidateRange(void*, u32) {
    nofralloc
#include "asm/dolphin/os/OSCache/DCInvalidateRange.s"
}
#pragma pop

/* 8033B5AC-8033B5DC 335EEC 0030+00 0/0 11/11 0/0 .text            DCFlushRange */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DCFlushRange() {
    nofralloc
#include "asm/dolphin/os/OSCache/DCFlushRange.s"
}
#pragma pop

/* 8033B5DC-8033B60C 335F1C 0030+00 0/0 54/54 1/1 .text            DCStoreRange */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DCStoreRange(void*, u32) {
    nofralloc
#include "asm/dolphin/os/OSCache/DCStoreRange.s"
}
#pragma pop

/* 8033B60C-8033B638 335F4C 002C+00 0/0 2/2 0/0 .text            DCFlushRangeNoSync */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DCFlushRangeNoSync() {
    nofralloc
#include "asm/dolphin/os/OSCache/DCFlushRangeNoSync.s"
}
#pragma pop

/* 8033B638-8033B664 335F78 002C+00 0/0 13/13 3/3 .text            DCStoreRangeNoSync */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DCStoreRangeNoSync() {
    nofralloc
#include "asm/dolphin/os/OSCache/DCStoreRangeNoSync.s"
}
#pragma pop

/* 8033B664-8033B690 335FA4 002C+00 0/0 1/1 1/1 .text            DCZeroRange */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void DCZeroRange() {
    nofralloc
#include "asm/dolphin/os/OSCache/DCZeroRange.s"
}
#pragma pop

/* 8033B690-8033B6C4 335FD0 0034+00 0/0 6/6 0/0 .text            ICInvalidateRange */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void ICInvalidateRange() {
    nofralloc
#include "asm/dolphin/os/OSCache/ICInvalidateRange.s"
}
#pragma pop

/* 8033B6C4-8033B6D4 336004 0010+00 0/0 5/5 0/0 .text            ICFlashInvalidate */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void ICFlashInvalidate() {
    nofralloc
#include "asm/dolphin/os/OSCache/ICFlashInvalidate.s"
}
#pragma pop

/* 8033B6D4-8033B6E8 336014 0014+00 1/1 0/0 0/0 .text            ICEnable */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void ICEnable() {
    nofralloc
#include "asm/dolphin/os/OSCache/ICEnable.s"
}
#pragma pop

/* 8033B6E8-8033B7B4 336028 00CC+00 1/1 0/0 0/0 .text            __LCEnable */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __LCEnable() {
    nofralloc
#include "asm/dolphin/os/OSCache/__LCEnable.s"
}
#pragma pop

/* 8033B7B4-8033B7EC 3360F4 0038+00 0/0 0/0 1/1 .text            LCEnable */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void LCEnable() {
    nofralloc
#include "asm/dolphin/os/OSCache/LCEnable.s"
}
#pragma pop

/* 8033B7EC-8033B814 33612C 0028+00 0/0 2/2 1/1 .text            LCDisable */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void LCDisable() {
    nofralloc
#include "asm/dolphin/os/OSCache/LCDisable.s"
}
#pragma pop

/* 8033B814-8033B838 336154 0024+00 1/1 0/0 0/0 .text            LCStoreBlocks */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void LCStoreBlocks() {
    nofralloc
#include "asm/dolphin/os/OSCache/LCStoreBlocks.s"
}
#pragma pop

/* 8033B838-8033B8E4 336178 00AC+00 0/0 0/0 3/3 .text            LCStoreData */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void LCStoreData() {
    nofralloc
#include "asm/dolphin/os/OSCache/LCStoreData.s"
}
#pragma pop

/* 8033B8E4-8033B8F8 336224 0014+00 0/0 0/0 3/3 .text            LCQueueWait */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void LCQueueWait() {
    nofralloc
#include "asm/dolphin/os/OSCache/LCQueueWait.s"
}
#pragma pop

/* ############################################################################################## */
/* 803CF510-803CF53C 02C630 0029+03 3/3 0/0 0/0 .data            @63 */
SECTION_DATA static u8 lit_63[41 + 3 /* padding */] = {
    0x3E,
    0x3E,
    0x3E,
    0x20,
    0x4C,
    0x32,
    0x20,
    0x49,
    0x4E,
    0x56,
    0x41,
    0x4C,
    0x49,
    0x44,
    0x41,
    0x54,
    0x45,
    0x20,
    0x3A,
    0x20,
    0x53,
    0x48,
    0x4F,
    0x55,
    0x4C,
    0x44,
    0x20,
    0x4E,
    0x45,
    0x56,
    0x45,
    0x52,
    0x20,
    0x48,
    0x41,
    0x50,
    0x50,
    0x45,
    0x4E,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
};

/* 8033B8F8-8033B990 336238 0098+00 1/1 0/0 0/0 .text            L2GlobalInvalidate */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void L2GlobalInvalidate() {
    nofralloc
#include "asm/dolphin/os/OSCache/L2GlobalInvalidate.s"
}
#pragma pop

/* ############################################################################################## */
/* 803CF53C-803CF554 02C65C 0018+00 0/1 0/0 0/0 .data            @84 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_84[24] = {
    0x4D, 0x61, 0x63, 0x68, 0x69, 0x6E, 0x65, 0x20, 0x63, 0x68, 0x65, 0x63,
    0x6B, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x0A, 0x00,
};
#pragma pop

/* 803CF554-803CF570 02C674 001B+01 0/1 0/0 0/0 .data            @85 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_85[27 + 1 /* padding */] = {
    0x48,
    0x49,
    0x44,
    0x32,
    0x20,
    0x3D,
    0x20,
    0x30,
    0x78,
    0x25,
    0x78,
    0x20,
    0x20,
    0x20,
    0x53,
    0x52,
    0x52,
    0x31,
    0x20,
    0x3D,
    0x20,
    0x30,
    0x78,
    0x25,
    0x78,
    0x0A,
    0x00,
    /* padding */
    0x00,
};
#pragma pop

/* 803CF570-803CF5A0 02C690 0030+00 0/1 0/0 0/0 .data            @86 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_86[48] = {
    0x4D, 0x61, 0x63, 0x68, 0x69, 0x6E, 0x65, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x77, 0x61,
    0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x44, 0x4D, 0x41, 0x2F, 0x6C, 0x6F, 0x63, 0x6B, 0x65, 0x64,
    0x20, 0x63, 0x61, 0x63, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6C, 0x61, 0x74, 0x65, 0x64, 0x0A, 0x00,
};
#pragma pop

/* 803CF5A0-803CF5DC 02C6C0 003C+00 0/1 0/0 0/0 .data            @87 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_87[60] = {
    0x44, 0x4D, 0x41, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72,
    0x28, 0x29, 0x3A, 0x20, 0x41, 0x6E, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x6F, 0x63,
    0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x69, 0x6C, 0x65, 0x20, 0x70, 0x72,
    0x6F, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x44, 0x4D, 0x41, 0x2E, 0x0A, 0x00,
};
#pragma pop

/* 803CF5DC-803CF614 02C6FC 0037+01 0/1 0/0 0/0 .data            @88 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_88[55 + 1 /* padding */] = {
    0x54,
    0x68,
    0x65,
    0x20,
    0x66,
    0x6F,
    0x6C,
    0x6C,
    0x6F,
    0x77,
    0x69,
    0x6E,
    0x67,
    0x20,
    0x65,
    0x72,
    0x72,
    0x6F,
    0x72,
    0x73,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6E,
    0x20,
    0x64,
    0x65,
    0x74,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x61,
    0x6E,
    0x64,
    0x20,
    0x63,
    0x6C,
    0x65,
    0x61,
    0x72,
    0x65,
    0x64,
    0x20,
    0x3A,
    0x0A,
    0x00,
    /* padding */
    0x00,
};
#pragma pop

/* 803CF614-803CF654 02C734 003F+01 0/1 0/0 0/0 .data            @89 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_89[63 + 1 /* padding */] = {
    0x09,
    0x2D,
    0x20,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x65,
    0x64,
    0x20,
    0x61,
    0x20,
    0x6C,
    0x6F,
    0x63,
    0x6B,
    0x65,
    0x64,
    0x20,
    0x63,
    0x61,
    0x63,
    0x68,
    0x65,
    0x20,
    0x74,
    0x61,
    0x67,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x61,
    0x6C,
    0x72,
    0x65,
    0x61,
    0x64,
    0x79,
    0x20,
    0x69,
    0x6E,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x61,
    0x63,
    0x68,
    0x65,
    0x0A,
    0x00,
    /* padding */
    0x00,
};
#pragma pop

/* 803CF654-803CF680 02C774 0029+03 0/1 0/0 0/0 .data            @90 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_90[41 + 3 /* padding */] = {
    0x09,
    0x2D,
    0x20,
    0x44,
    0x4D,
    0x41,
    0x20,
    0x61,
    0x74,
    0x74,
    0x65,
    0x6D,
    0x70,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6F,
    0x20,
    0x61,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x20,
    0x6E,
    0x6F,
    0x72,
    0x6D,
    0x61,
    0x6C,
    0x20,
    0x63,
    0x61,
    0x63,
    0x68,
    0x65,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
};
#pragma pop

/* 803CF680-803CF6A0 02C7A0 001D+03 0/1 0/0 0/0 .data            @91 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_91[29 + 3 /* padding */] = {
    0x09,
    0x2D,
    0x20,
    0x44,
    0x4D,
    0x41,
    0x20,
    0x6D,
    0x69,
    0x73,
    0x73,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6E,
    0x20,
    0x64,
    0x61,
    0x74,
    0x61,
    0x20,
    0x63,
    0x61,
    0x63,
    0x68,
    0x65,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
};
#pragma pop

/* 803CF6A0-803CF6BC 02C7C0 0019+03 0/1 0/0 0/0 .data            @92 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_92[25 + 3 /* padding */] = {
    0x09,
    0x2D,
    0x20,
    0x44,
    0x4D,
    0x41,
    0x20,
    0x71,
    0x75,
    0x65,
    0x75,
    0x65,
    0x20,
    0x6F,
    0x76,
    0x65,
    0x72,
    0x66,
    0x6C,
    0x6F,
    0x77,
    0x65,
    0x64,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
};
#pragma pop

/* 8033B990-8033BAF0 3362D0 0160+00 1/1 0/0 0/0 .text            DMAErrorHandler */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
static asm void DMAErrorHandler() {
    nofralloc
#include "asm/dolphin/os/OSCache/DMAErrorHandler.s"
}
#pragma pop

/* ############################################################################################## */
/* 803CF6BC-803CF6D8 02C7DC 0019+03 0/1 0/0 0/0 .data            @104 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_104[25 + 3 /* padding */] = {
    0x4C,
    0x31,
    0x20,
    0x69,
    0x2D,
    0x63,
    0x61,
    0x63,
    0x68,
    0x65,
    0x73,
    0x20,
    0x69,
    0x6E,
    0x69,
    0x74,
    0x69,
    0x61,
    0x6C,
    0x69,
    0x7A,
    0x65,
    0x64,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
};
#pragma pop

/* 803CF6D8-803CF6F4 02C7F8 0019+03 0/1 0/0 0/0 .data            @105 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_105[25 + 3 /* padding */] = {
    0x4C,
    0x31,
    0x20,
    0x64,
    0x2D,
    0x63,
    0x61,
    0x63,
    0x68,
    0x65,
    0x73,
    0x20,
    0x69,
    0x6E,
    0x69,
    0x74,
    0x69,
    0x61,
    0x6C,
    0x69,
    0x7A,
    0x65,
    0x64,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
};
#pragma pop

/* 803CF6F4-803CF70C 02C814 0016+02 0/1 0/0 0/0 .data            @106 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_106[22 + 2 /* padding */] = {
    0x4C,
    0x32,
    0x20,
    0x63,
    0x61,
    0x63,
    0x68,
    0x65,
    0x20,
    0x69,
    0x6E,
    0x69,
    0x74,
    0x69,
    0x61,
    0x6C,
    0x69,
    0x7A,
    0x65,
    0x64,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
};
#pragma pop

/* 803CF70C-803CF740 02C82C 002E+06 0/1 0/0 0/0 .data            @107 */
#pragma push
#pragma force_active on
SECTION_DATA static u8 lit_107[46 + 6 /* padding */] = {
    0x4C,
    0x6F,
    0x63,
    0x6B,
    0x65,
    0x64,
    0x20,
    0x63,
    0x61,
    0x63,
    0x68,
    0x65,
    0x20,
    0x6D,
    0x61,
    0x63,
    0x68,
    0x69,
    0x6E,
    0x65,
    0x20,
    0x63,
    0x68,
    0x65,
    0x63,
    0x6B,
    0x20,
    0x68,
    0x61,
    0x6E,
    0x64,
    0x6C,
    0x65,
    0x72,
    0x20,
    0x69,
    0x6E,
    0x73,
    0x74,
    0x61,
    0x6C,
    0x6C,
    0x65,
    0x64,
    0x0A,
    0x00,
    /* padding */
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
};
#pragma pop

/* 8033BAF0-8033BBE4 336430 00F4+00 0/0 2/2 0/0 .text            __OSCacheInit */
#pragma push
#pragma optimization_level 0
#pragma optimizewithasm off
asm void __OSCacheInit() {
    nofralloc
#include "asm/dolphin/os/OSCache/__OSCacheInit.s"
}
#pragma pop
