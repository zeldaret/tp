#ifndef D_EVENT_D_EVENT_H
#define D_EVENT_D_EVENT_H

#include "d/a/d_a_itembase.h"
#include "d/a/d_a_player.h"
#include "d/d_stage.h"
#include "d/save/d_save.h"
#include "dolphin/types.h"

#pragma pack(push, 1)
class dEvt_order_c {
public:
    /* 80030154 */ ~dEvt_order_c();
    /* 800415D4 */ dEvt_order_c();

private:
    u8 field_0x0;
    u8 field_0x1;
    u8 field_0x2;
    u8 field_0x3;
    u8 field_0x4;
    u8 field_0x5;
    u8 field_0x6;
    u8 field_0x7;
    u8 field_0x8;
    u8 field_0x9;
    u8 field_0xa;
    u8 field_0xb;
    u8 field_0xc;
    u8 field_0xd;
    u8 field_0xe;
    u8 field_0xf;
    u8 field_0x10;
    u8 field_0x11;
    u8 field_0x12;
    u8 field_0x13;
    u8 field_0x14;
    u8 field_0x15;
    u8 field_0x16;
    u8 field_0x17;
    u8 field_0x18;
    u8 field_0x19;
    u8 field_0x1a;
    u8 field_0x1b;
    u8 field_0x1c;
    u8 field_0x1d;
    u8 field_0x1e;
    u8 field_0x1f;
    u8 field_0x20;
    u8 field_0x21;
    u8 field_0x22;
    u8 field_0x23;
    u8 field_0x24;
    u8 field_0x25;
    u8 field_0x26;
    u8 field_0x27;
    u8 field_0x28;
    u8 field_0x29;
    u8 field_0x2a;
    u8 field_0x2b;
    u8 field_0x2c;
    u8 field_0x2d;
    u8 field_0x2e;
    u8 field_0x2f;
    u8 field_0x30;
    u8 field_0x31;
    u8 field_0x32;
    u8 field_0x33;
    u8 field_0x34;
    u8 field_0x35;
    u8 field_0x36;
    u8 field_0x37;
    u8 field_0x38;
    u8 field_0x39;
    u8 field_0x3a;
    u8 field_0x3b;
    u8 field_0x3c;
    u8 field_0x3d;
    u8 field_0x3e;
    u8 field_0x3f;
    u8 field_0x40;
    u8 field_0x41;
    u8 field_0x42;
    u8 field_0x43;
    u8 field_0x44;
    u8 field_0x45;
    u8 field_0x46;
    u8 field_0x47;
    u8 field_0x48;
    u8 field_0x49;
    u8 field_0x4a;
    u8 field_0x4b;
    u8 field_0x4c;
    u8 field_0x4d;
    u8 field_0x4e;
    u8 field_0x4f;
    u8 field_0x50;
    u8 field_0x51;
    u8 field_0x52;
    u8 field_0x53;
    u8 field_0x54;
    u8 field_0x55;
    u8 field_0x56;
    u8 field_0x57;
    u8 field_0x58;
    u8 field_0x59;
    u8 field_0x5a;
    u8 field_0x5b;
    u8 field_0x5c;
    u8 field_0x5d;
    u8 field_0x5e;
    u8 field_0x5f;
    u8 field_0x60;
    u8 field_0x61;
    u8 field_0x62;
    u8 field_0x63;
    u8 field_0x64;
    u8 field_0x65;
    u8 field_0x66;
    u8 field_0x67;
    u8 field_0x68;
    u8 field_0x69;
    u8 field_0x6a;
    u8 field_0x6b;
    u8 field_0x6c;
    u8 field_0x6d;
    u8 field_0x6e;
    u8 field_0x6f;
    u8 field_0x70;
    u8 field_0x71;
    u8 field_0x72;
    u8 field_0x73;
    u8 field_0x74;
    u8 field_0x75;
    u8 field_0x76;
    u8 field_0x77;
    u8 field_0x78;
    u8 field_0x79;
    u8 field_0x7a;
    u8 field_0x7b;
    u8 field_0x7c;
    u8 field_0x7d;
    u8 field_0x7e;
    u8 field_0x7f;
    u8 field_0x80;
    u8 field_0x81;
    u8 field_0x82;
    u8 field_0x83;
    u8 field_0x84;
    u8 field_0x85;
    u8 field_0x86;
    u8 field_0x87;
    u8 field_0x88;
    u8 field_0x89;
    u8 field_0x8a;
    u8 field_0x8b;
    u8 field_0x8c;
    u8 field_0x8d;
    u8 field_0x8e;
    u8 field_0x8f;
    u8 field_0x90;
    u8 field_0x91;
    u8 field_0x92;
    u8 field_0x93;
    u8 field_0x94;
    u8 field_0x95;
    u8 field_0x96;
    u8 field_0x97;
    u8 field_0x98;
    u8 field_0x99;
    u8 field_0x9a;
    u8 field_0x9b;
    u8 field_0x9c;
    u8 field_0x9d;
    u8 field_0x9e;
    u8 field_0x9f;
    u8 field_0xa0;
    u8 field_0xa1;
    u8 field_0xa2;
    u8 field_0xa3;
    u8 field_0xa4;
    u8 field_0xa5;
    u8 field_0xa6;
    u8 field_0xa7;
    u8 field_0xa8;
    u8 field_0xa9;
    u8 field_0xaa;
    u8 field_0xab;
    u8 field_0xac;
    u8 field_0xad;
    u8 field_0xae;
    u8 field_0xaf;
    u8 field_0xb0;
    u8 field_0xb1;
    u8 field_0xb2;
    u8 field_0xb3;
    u8 field_0xb4;
    u8 field_0xb5;
    u8 field_0xb6;
    u8 field_0xb7;
    u8 field_0xb8;
    u8 field_0xb9;
    u8 field_0xba;
    u8 field_0xbb;
    u8 field_0xbc;
    u8 field_0xbd;
    u8 field_0xbe;
};
#pragma pack(pop)

#pragma pack(push, 1)
class dEvt_control_c {
public:
    /* 80041580 */ dEvt_control_c();
    /* 800415D8 */ void orderOld(u16, u16, u16, u16, void*, void*, void const*);
    /* 80041668 */ void order(u16, u16, u16, u16, void*, void*, s16, u8);
    /* 80041804 */ void setParam(dEvt_order_c*);
    /* 80041934 */ void beforeFlagProc(dEvt_order_c*);
    /* 80041964 */ void afterFlagProc(dEvt_order_c*);
    /* 800419A8 */ void commonCheck(dEvt_order_c*, u16, u16);
    /* 80041A20 */ void talkCheck(dEvt_order_c*);
    /* 80041B58 */ void talkXyCheck(dEvt_order_c*);
    /* 80041C90 */ void catchCheck(dEvt_order_c*);
    /* 80041D34 */ void talkEnd();
    /* 80041DDC */ void demoCheck(dEvt_order_c*);
    /* 80041F18 */ void demoEnd();
    /* 80041FA0 */ void potentialCheck(dEvt_order_c*);
    /* 80042014 */ void doorCheck(dEvt_order_c*);
    /* 8004212C */ void itemCheck(dEvt_order_c*);
    /* 800421C0 */ void endProc();
    /* 80042254 */ void change();
    /* 800422C0 */ void entry();
    /* 80042518 */ void reset(void*);
    /* 80042468 */ void reset();
    /* 800425B4 */ void clearSkipSystem();
    /* 8004290C */ void getSkipEventName();
    /* 80042914 */ void setSkipProc(void*, int (*)(void*, int), int);
    /* 80042958 */ void setSkipZev(void*, char*);
    /* 800429A8 */ void onSkipFade();
    /* 800429B4 */ void offSkipFade();
    /* 800429D4 */ void skipper();
    /* 80042BBC */ void Step();
    /* 80042FA8 */ void moveApproval(void*);
    /* 8004316C */ void compulsory(void*, char const*, u16);
    /* 800431E8 */ void remove();
    /* 80043278 */ void getStageEventDt();
    /* 80043280 */ void sceneChange(int);
    /* 800432C8 */ void getPId(void*);
    /* 800432EC */ void convPId(unsigned int);
    /* 8004331C */ void getStbDemoData(char*);
    /* 80043500 */ void searchMapEventData(u8, s32);
    /* 800434D8 */ void searchMapEventData(u8);
    /* 8004360C */ void runningEventID(s16);
    /* 8004362C */ void setPt1(void*);
    /* 8004365C */ void setPt2(void*);
    /* 8004368C */ void setPtT(void*);
    /* 800436BC */ void setPtI(void*);
    /* 800436EC */ void setPtI_Id(unsigned int);
    /* 800436F4 */ void setPtD(void*);
    /* 80043724 */ void setGtItm(u8);

private:
    /* 0x000 */ u8 field_0x0[4];
    /* 0x004 */ dEvt_order_c event_order;
    /* 0x0C4 */ int mPt1;
    /* 0x0C8 */ int mPt2;
    /* 0x0CC */ int mPtT;
    /* 0x0D0 */ int mPtI;
    /* 0x0D4 */ int mPtd;
    /* 0x0D8 */ u16 mEventFlag;
    /* 0x0DA */ u16 mFlag2;
    /* 0x0DC */ u16 mHindFlag;
    /* 0x0DE */ u16 field_0xde;
    /* 0x0E0 */ u16 field_0xe0;
    /* 0x0E2 */ u8 field_0xe2;
    /* 0x0E3 */ u8 field_0xe3;
    /* 0x0E4 */ u8 mMode;
    /* 0x0E5 */ u8 field_0xe5;
    /* 0x0E6 */ u8 field_0xe6;
    /* 0x0E7 */ u8 field_0xe7;
    /* 0x0E8 */ u8 field_0xe8;
    /* 0x0E9 */ u8 mDebugStb;
    /* 0x0EA */ u8 field_0xea;
    /* 0x0EB */ u8 mMapToolId;
    /* 0x0EC */ u8 field_0xec;
    /* 0x0ED */ u8 field_0xed;
    /* 0x0EE */ u8 mPreItemNo;
    /* 0x0EF */ u8 mGtItm;
    /* 0x0F0 */ float mCullRate;
    /* 0x0F4 */ int mStageEventDt;
    /* 0x0F8 */ int mChangeOK;
    /* 0x0FC */ u8 field_0xfc[20];
    /* 0x110 */ bool mSkipFade;
    /* 0x114 */ char mSkipEventName[0x14];
    /* 0x128 */ u8 mCompulsory;
    /* 0x129 */ u8 field_0x129;
    /* 0x12C */ int field_0x12c;
};
#pragma pack(pop)

#endif /* D_EVENT_D_EVENT_H */
