#ifndef M_DO_GRAPHIC_H_
#define M_DO_GRAPHIC_H_

#include "JSystem/JUtility/JUTTexture.h"
#include "global.h"
#include "mtx_vec.h"

class view_class {};

class view_port_class {};

void mDoGph_Create(void);
ResTIMG* createTimg(u32 width, u32 height, u32 format);
void darwFilter(_GXColor color);
void mDoGph_BlankingON(void);
void mDoGph_BlankingOFF(void);
void dScnPly_BeforeOfPaint(void);
bool mDoGph_BeforeOfDraw(void);
bool mDoGph_AfterOfDraw(void);
void drawDepth2(view_class* view_class_ptr, view_port_class* view_port_class_ptr, int param_3);
void trimming(view_class* view_class_ptr, view_port_class* view_port_class_ptr);
void mDoGph_drawFilterQuad(s8 param_1, s8 param_2);
void retry_captue_frame(view_class* view_class_ptr, view_port_class* view_port_class_ptr,
                        int param_3);
void motionBlure(view_class* view_class_ptr);
void setLight(void);
void drawItem3D(void);
bool mDoGph_Painter(void);

class mDoGph_gInf_c {  // Possible Namespace?
public:
    static void create(void);
    static void beginRender(void);
    static void fadeOut(f32 fadeSpeed, _GXColor& color);
    static void fadeOut_f(f32 fadeSpeed, _GXColor& color);
    static void onBlure(void);
    static void onBlure(const f32[][4]);
    static void fadeOut(f32 speed);
    static void calcFade(void);
    class bloom_c {
    public:
        void create();
        int remove();
        void draw();
    };
};

// additional symbols needed for m_Do_graphic.cpp
// autogenerated by split.py v0.4 at 2021-01-26 05:26:23.383541
extern "C" {
void mDoGph_Create__Fv(void);
void createTimg__FUsUsUl(void);
void J2DOrthoGraph_NS_setOrtho(void);
void J2DOrthoGraph_NS_setPort(void);
void J2DOrthoGraph_X1_(void);
void J2DPrint_NS_setBuffer(void);
void J3DSys_NS_drawInit(void);
void J3DSys_NS_reinitGX(void);
void JFWDisplay_NS_createManager(void);
void JUTFader(void);
void JUTVideo_NS_setRenderMode(void);
void PPCSync(void);
void __dl__FPv(void);
void __nw__FUl(void);
void _restgpr_17(void);
void _restgpr_21(void);
void _restgpr_24(void);
void _restgpr_27(void);
void _restgpr_28(void);
void _savegpr_17(void);
void _savegpr_21(void);
void _savegpr_24(void);
void _savegpr_27(void);
void _savegpr_28(void);
void alloc__7JKRHeapFUli(void);
void alloc__7JKRHeapFUliP7JKRHeap(void);
void cLib_addCalc__FPfffff(void);
void cLib_memSet__FPviUl(void);
void dAttention_c_NS_LockonTruth(void);
void dCam_getBody(void);
void dDlst_list_c_NS_calcWipe(void);
void dDlst_list_c_NS_draw(void);
void dDlst_list_c_NS_drawOpaDrawList(void);
void dDlst_list_c_NS_drawOpaListItem3d(void);
void dDlst_list_c_NS_drawXluDrawList(void);
void dDlst_list_c_NS_drawXluListItem3d(void);
void dDlst_list_c_NS_init(void);
void reset__12dDlst_list_cFv(void);
void dDlst_shadowControl_c_NS_draw(void);
void dDlst_shadowControl_c_NS_imageDraw(void);
void dKy_setLight(void);
void dMenu_Collect3D_c_NS_setupItem3D(void);
void dPa_control_c_NS_calcMenu(void);
void dPa_control_c_NS_draw(void);
void dScnPly_BeforeOfPaint__Fv(void);
void darwFilter__F8_GXColor(void);
void drawDepth2__FP10view_classP15view_port_classi(void);
void drawItem3D__Fv(void);
void fopAcIt_Judge(void);
void free__7JKRHeapFPv(void);
void func_80008028(void);
void func_8000841C(void);
void func_80008420(void);
void func_80008450(void);
void func_80008474(void);
void func_8000A604(void);
void func_8000B118(void);
void func_8000B1D0(void);
void func_8000B1E4(void);
void func_803620AC(void);
void mDoExt_adjustSolidHeap(void);
void mDoExt_createSolidHeapToCurrent_X1_(void);
void mDoExt_restoreCurrentHeap(void);
void create__13mDoGph_gInf_cFv(void);
void mDoGph_drawFilterQuad__FScSc(void);
void beginRender__13mDoGph_gInf_cFv(void);
void create__Q213mDoGph_gInf_c7bloom_cFv(void);
void draw__Q213mDoGph_gInf_c7bloom_cFv(void);
void remove__Q213mDoGph_gInf_c7bloom_cFv(void);
void calcFade__13mDoGph_gInf_cFv(void);
void mDoGph_gInf_c_NS_create(void);
void fadeOut__13mDoGph_gInf_cFfR8_GXColor(void);
void mDoGph_gInf_c_NS_fadeOut_X1_(void);
void onBlure__13mDoGph_gInf_cFv(void);
void onBlure__13mDoGph_gInf_cFPA4_Cf(void);
void mDoMtx_lookAt_X1_(void);
void motionBlure__FP10view_class(void);
void retry_captue_frame__FP10view_classP15view_port_classi(void);
void setLight__Fv(void);
void trimming__FP10view_classP15view_port_class(void);
void VISetBlack(void);
}

// additional symbols needed for m_Do_graphic.cpp
// autogenerated by split.py v0.4 at 2021-01-26 05:26:23.383553
extern u8 lbl_80373DD0;
extern Mtx lbl_803A2FD8;  // g_mDoMtx_identity
extern u8 lbl_803CC9B8;
extern u8 lbl_803CC9E0;
extern u8 lbl_803DD3E8;
extern u8 lbl_803DD408;
extern u8 lbl_803DD428;
extern Mtx lbl_803DD43C;  // mBlureMtx
extern u8 lbl_80450590;
extern _GXColor lbl_80450594;  // mFadeColor
extern u8 lbl_80450598;
extern u8 lbl_8045059C;
extern u8 lbl_804505A0;
extern _GXColor lbl_80450600;  // g_clearColor
extern u8 lbl_80450608;
extern u8 lbl_80450BC8;
extern u8 lbl_80450BCC;
extern u8 lbl_80450BD0;
extern u8 lbl_80450BD4;
extern u8 lbl_80450BD8;
extern f32 lbl_80450BDC;
extern f32 lbl_80450BE0;  //_mFadeRate
extern bool lbl_80450BE4;
extern u8 lbl_80450BE5;
extern bool lbl_80450BE6;
extern u8 lbl_80450BE7;
extern u8 lbl_80450BE8;
extern u8 lbl_804511C0;
extern u8 lbl_804514C8;
extern u8 lbl_80451538;
extern u8 lbl_80451558;
extern f32 lbl_80451A38;  // 0.0f
extern u8 lbl_80451A3C;
extern u8 lbl_80451A40;
extern u8 lbl_80451A44;
extern u8 lbl_80451A48;
extern u8 lbl_80451A4C;
extern u8 lbl_80451A50;
extern u8 lbl_80451A54;
extern u8 lbl_80451A58;
extern u8 lbl_80451A60;
extern u8 lbl_80451A68;
extern u8 lbl_80451A70;
extern u8 lbl_80451A74;
extern u8 lbl_80451A78;
extern u8 lbl_80451A7C;
extern u8 lbl_80451A80;
extern u8 lbl_80451A84;
extern u8 lbl_80451A88;
extern u8 lbl_80451A8C;
extern u8 lbl_80451A90;
extern u8 lbl_80451A94;
extern u8 lbl_80451A98;
extern u8 lbl_80451A9C;
extern u8 lbl_80451AA0;
extern u8 lbl_80451AA4;
extern u8 lbl_80451AA8;
extern u8 lbl_80451AAC;
extern u8 lbl_80451AB0;
extern u8 lbl_80451AB4;
extern u8 lbl_80451AB8;
extern u8 lbl_80451ABC;
extern u8 lbl_80451AC0;
extern u8 lbl_80451AC8;
extern u8 lbl_80451AD0;
extern u8 lbl_80451AD4;
extern u8 lbl_80451AD8;
extern u8 lbl_80451ADC;
extern u8 lbl_80451AE0;
extern u8 lbl_80451AE4;
extern u8 lbl_80451AE8;
extern u8 lbl_80451AEC;
extern u8 lbl_80451AF0;
extern u8 lbl_80451AF4;
extern u8 lbl_80451AF8;
extern u8 lbl_80456B60;

#endif